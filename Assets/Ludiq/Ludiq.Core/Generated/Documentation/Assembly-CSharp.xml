<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="T:Fungus.Break">
            <summary>
            Force a loop to terminate immediately.
            </summary>
        </member>
        <member name="T:Fungus.CallMode">
            <summary>
            Supported modes for calling a block.
            </summary>
        </member>
        <member name="F:Fungus.CallMode.Stop">
            <summary> Stop executing the current block after calling. </summary>
        </member>
        <member name="F:Fungus.CallMode.Continue">
            <summary> Continue executing the current block after calling  </summary>
        </member>
        <member name="F:Fungus.CallMode.WaitUntilFinished">
            <summary> Wait until the called block finishes executing, then continue executing current block. </summary>
        </member>
        <member name="T:Fungus.Call">
            <summary>
            Execute another block in the same Flowchart as the command, or in a different Flowchart.
            </summary>
        </member>
        <member name="T:Fungus.CallMethod">
            <summary>
            Calls a named method on a GameObject using the GameObject.SendMessage() system.
            This command is called "Call Method" because a) it's more descriptive than Send Message and we're already have
            a Send Message command for sending messages to trigger block execution.
            </summary>
        </member>
        <member name="T:Fungus.ClearMenu">
            <summary>
            Clears the options from a menu dialogue.
            </summary>
        </member>
        <member name="T:Fungus.Comment">
            <summary>
            Use comments to record design notes and reminders about your game.
            </summary>
        </member>
        <member name="T:Fungus.ControlAudioType">
            <summary>
            The type of audio control to perform.
            </summary>
        </member>
        <member name="F:Fungus.ControlAudioType.PlayOnce">
            <summary> Play the audiosource once. </summary>
        </member>
        <member name="F:Fungus.ControlAudioType.PlayLoop">
            <summary> Play the audiosource in a loop. </summary>
        </member>
        <member name="F:Fungus.ControlAudioType.PauseLoop">
            <summary> Pause a looping audiosource. </summary>
        </member>
        <member name="F:Fungus.ControlAudioType.StopLoop">
            <summary> Stop a looping audiosource. </summary>
        </member>
        <member name="F:Fungus.ControlAudioType.ChangeVolume">
            <summary> Change the volume level of an audiosource. </summary>
        </member>
        <member name="T:Fungus.ControlAudio">
            <summary>
            Plays, loops, or stops an audiosource. Any AudioSources with the same tag as the target Audio Source will automatically be stoped.
            </summary>
        </member>
        <member name="T:Fungus.StageDisplayType">
            <summary>
            Supported display operations for Stage.
            </summary>
        </member>
        <member name="F:Fungus.StageDisplayType.None">
            <summary> No operation </summary>
        </member>
        <member name="F:Fungus.StageDisplayType.Show">
            <summary> Show the stage and all portraits. </summary>
        </member>
        <member name="F:Fungus.StageDisplayType.Hide">
            <summary> Hide the stage and all portraits. </summary>
        </member>
        <member name="F:Fungus.StageDisplayType.Swap">
            <summary> Swap the stage and all portraits with another stage. </summary>
        </member>
        <member name="F:Fungus.StageDisplayType.MoveToFront">
            <summary> Move stage to the front. </summary>
        </member>
        <member name="F:Fungus.StageDisplayType.UndimAllPortraits">
            <summary> Undim all portraits on the stage. </summary>
        </member>
        <member name="F:Fungus.StageDisplayType.DimNonSpeakingPortraits">
            <summary> Dim all non-speaking portraits on the stage. </summary>
        </member>
        <member name="T:Fungus.ControlStage">
            <summary>
            Controls the stage on which character portraits are displayed.
            </summary>
        </member>
        <member name="T:Fungus.Conversation">
            <summary>
            Do multiple say and portrait commands in a single block of text. Format is: [character] [portrait] [stage position] [: Story text].
            </summary>
        </member>
        <member name="T:Fungus.DebugLogType">
            <summary>
            Type of log message. Maps directly to Unity's log types.
            </summary>
        </member>
        <member name="F:Fungus.DebugLogType.Info">
            <summary> Informative log message. </summary>
        </member>
        <member name="F:Fungus.DebugLogType.Warning">
            <summary> Warning log message. </summary>
        </member>
        <member name="F:Fungus.DebugLogType.Error">
            <summary> Error log message. </summary>
        </member>
        <member name="T:Fungus.DebugLog">
            <summary>
            Writes a log message to the debug console.
            </summary>
        </member>
        <member name="T:Fungus.DeleteSaveKey">
            <summary>
            Deletes a saved value from permanent storage.
            </summary>
        </member>
        <member name="T:Fungus.Destroy">
            <summary>
            Destroys a specified game object in the scene.
            </summary>
        </member>
        <member name="T:Fungus.Else">
            <summary>
            Marks the start of a command block to be executed when the preceding If statement is False.
            </summary>
        </member>
        <member name="T:Fungus.ElseIf">
            <summary>
            Marks the start of a command block to be executed when the preceding If statement is False and the test expression is true.
            </summary>
        </member>
        <member name="T:Fungus.End">
            <summary>
            Marks the end of a conditional block.
            </summary>
        </member>
        <member name="T:Fungus.ExecuteLua">
            <summary>
            Executes a Lua code chunk using a Lua Environment.
            </summary>
        </member>
        <member name="M:Fungus.ExecuteLua.InitExecuteLua">
            <summary>
            Initialises the Lua environment and compiles the Lua string for execution later on.
            </summary>
        </member>
        <member name="T:Fungus.FadeScreen">
            <summary>
            Draws a fullscreen texture over the scene to give a fade effect. Setting Target Alpha to 1 will obscure the screen, alpha 0 will reveal the screen.
            If no Fade Texture is provided then a default flat color texture is used.
            </summary>
        </member>
        <member name="T:Fungus.FadeSprite">
            <summary>
            Fades a sprite to a target color over a period of time.
            </summary>
        </member>
        <member name="T:Fungus.FadeToView">
            <summary>
            Fades the camera out and in again at a position specified by a View object.
            </summary>
        </member>
        <member name="P:Fungus.FadeToView.TargetView">
            <summary>
            View to transition to when Fade is complete
            </summary>
        </member>
        <member name="T:Fungus.FadeMode">
            <summary>
            Select which type of fade will be applied.
            </summary>
        </member>
        <member name="F:Fungus.FadeMode.Alpha">
            <summary> Fade the alpha color component only. </summary>
        </member>
        <member name="F:Fungus.FadeMode.Color">
            <summary> Fade all color components (RGBA). </summary>
        </member>
        <member name="T:Fungus.FadeUI">
            <summary>
            Fades a UI object.
            </summary>
        </member>
        <member name="T:Fungus.FullscreenMode">
            <summary>
            Fullscreen mode options.
            </summary>
        </member>
        <member name="F:Fungus.FullscreenMode.Toggle">
            <summary> Toggle the current mode between fullscreen and windowed. </summary>
        </member>
        <member name="F:Fungus.FullscreenMode.Fullscreen">
            <summary> Switch to fullscreen mode. </summary>
        </member>
        <member name="F:Fungus.FullscreenMode.Windowed">
            <summary> Switch to windowed mode. </summary>
        </member>
        <member name="T:Fungus.Fullscreen">
            <summary>
            Sets the application to fullscreen, windowed or toggles the current state.
            </summary>
        </member>
        <member name="T:Fungus.GetText">
            <summary>
            Gets the text property from a UI Text object and stores it in a string variable.
            </summary>
        </member>
        <member name="T:Fungus.GetToggleState">
            <summary>
            Gets the state of a toggle UI object and stores it in a boolean variable.
            </summary>
        </member>
        <member name="T:Fungus.If">
            <summary>
            If the test expression is true, execute the following command block.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Fungus.GetAxis" -->
        <member name="T:Fungus.InvokeType">
            <summary>
            Supported types of method invocation.
            </summary>
        </member>
        <member name="F:Fungus.InvokeType.Static">
            <summary> Call a method with an optional constant value parameter. </summary>
        </member>
        <member name="F:Fungus.InvokeType.DynamicBoolean">
            <summary> Call a method with an optional boolean constant / variable parameter. </summary>
        </member>
        <member name="F:Fungus.InvokeType.DynamicInteger">
            <summary> Call a method with an optional integer constant / variable parameter. </summary>
        </member>
        <member name="F:Fungus.InvokeType.DynamicFloat">
            <summary> Call a method with an optional float constant / variable parameter. </summary>
        </member>
        <member name="F:Fungus.InvokeType.DynamicString">
            <summary> Call a method with an optional string constant / variable parameter. </summary>
        </member>
        <member name="T:Fungus.InvokeEvent">
            <summary>
            Calls a list of component methods via the Unity Event System (as used in the Unity UI)
            This command is more efficient than the Invoke Method command but can only pass a single parameter and doesn't support return values.
            This command uses the UnityEvent system to call methods in script. http://docs.unity3d.com/Manual/UnityEvents.html
            </summary>
        </member>
        <member name="T:Fungus.InvokeMethod">
            <summary>
            Invokes a method of a component via reflection. Supports passing multiple parameters and storing returned values in a Fungus variable.
            </summary>
        </member>
        <member name="P:Fungus.InvokeMethod.TargetObject">
            <summary>
            GameObject containing the component method to be invoked.
            </summary>
        </member>
        <member name="T:Fungus.iTweenAxis">
            <summary>
            Axis to apply the tween on.
            </summary>
        </member>
        <member name="F:Fungus.iTweenAxis.None">
            <summary> Don't specify an axis. </summary>
        </member>
        <member name="F:Fungus.iTweenAxis.X">
            <summary> Apply the tween on the X axis only. </summary>
        </member>
        <member name="F:Fungus.iTweenAxis.Y">
            <summary> Apply the tween on the Y axis only. </summary>
        </member>
        <member name="F:Fungus.iTweenAxis.Z">
            <summary> Apply the tween on the Z axis only. </summary>
        </member>
        <member name="T:Fungus.iTweenCommand">
            <summary>
            Abstract base class for iTween commands.
            </summary>
        </member>
        <member name="T:Fungus.Jump">
            <summary>
            Move execution to a specific Label command in the same block.
            </summary>
        </member>
        <member name="T:Fungus.Label">
            <summary>
            Marks a position in the command list for execution to jump to.
            </summary>
        </member>
        <member name="P:Fungus.Label.Key">
            <summary>
            Display name for the label
            </summary>
        </member>
        <member name="T:Fungus.BaseLeanTweenCommand">
            <summary>
            Abstract base class for LeanTween commands.
            </summary>
        </member>
        <member name="T:Fungus.MoveLean">
            <summary>
            Moves a game object to a specified position over time. The position can be defined by a transform in another object (using To Transform) or by setting an absolute position (using To Position, if To Transform is set to None).
            </summary>
        </member>
        <member name="T:Fungus.RotateLean">
            <summary>
            Rotates a game object to the specified angles over time.
            </summary>
        </member>
        <member name="T:Fungus.ScaleLean">
            <summary>
            Changes a game object's scale to a specified value over time.
            </summary>
        </member>
        <member name="T:Fungus.StopTweensLean">
            <summary>
            
            </summary> 
        </member>
        <member name="T:Fungus.LoadScene">
            <summary>
            Loads a new Unity scene and displays an optional loading image. This is useful
            for splitting a large game across multiple scene files to reduce peak memory
            usage. Previously loaded assets will be released before loading the scene to free up memory.
            The scene to be loaded must be added to the scene list in Build Settings.")]
            </summary>
        </member>
        <member name="T:Fungus.LoadVariable">
            <summary>
            Loads a saved value and stores it in a Boolean, Integer, Float or String variable. If the key is not found then the variable is not modified.
            </summary>
        </member>
        <member name="T:Fungus.LookFrom">
            <summary>
            Instantly rotates a GameObject to look at the supplied Vector3 then returns it to it's starting rotation over time.
            </summary>
        </member>
        <member name="T:Fungus.LookTo">
            <summary>
            Rotates a GameObject to look at a supplied Transform or Vector3 over time.
            </summary>
        </member>
        <member name="M:Fungus.LuaCondition.InitExecuteLua">
            <summary>
            Initialises the Lua environment and compiles the Lua string for execution later on.
            </summary>
        </member>
        <member name="T:Fungus.LuaElseIf">
            <summary>
            Marks the start of a command block to be executed when the preceding If statement is False and the test expression is true.
            </summary>
        </member>
        <member name="T:Fungus.LuaIf">
            <summary>
            If the test expression is true, execute the following command block.
            </summary>
        </member>
        <member name="T:Fungus.Abs">
            <summary>
            Command to execute and store the result of a Abs
            </summary>
        </member>
        <member name="T:Fungus.BaseUnaryMathCommand">
            <summary>
            Base class for all simple Unary
            </summary>
        </member>
        <member name="T:Fungus.Clamp">
            <summary>
            Command to contain a value between a lower and upper bound, with optional wrapping modes
            </summary>
        </member>
        <member name="T:Fungus.Curve">
            <summary>
            Pass a value through an AnimationCurve
            </summary>
        </member>
        <member name="T:Fungus.Exp">
            <summary>
            Command to execute and store the result of a Exp
            </summary>
        </member>
        <member name="T:Fungus.Inv">
            <summary>
            Multiplicative Inverse of a float (1/f)
            </summary>
        </member>
        <member name="T:Fungus.InvLerp">
            <summary>
            Calculates the inverse lerp, the percentage a value is between two others.
            </summary>
        </member>
        <member name="T:Fungus.Lerp">
            <summary>
            Linearly Interpolate from A to B
            </summary>
        </member>
        <member name="T:Fungus.Log">
            <summary>
            Command to execute and store the result of a Log
            </summary>
        </member>
        <member name="T:Fungus.Map">
            <summary>
            Map a value that exists in 1 range of numbers to another.
            </summary>
        </member>
        <member name="T:Fungus.MinMax">
            <summary>
            Command to store the min or max of 2 values
            </summary>
        </member>
        <member name="T:Fungus.Neg">
            <summary>
            Negate a float
            </summary>
        </member>
        <member name="T:Fungus.Pow">
            <summary>
            Raise a value to the power of another
            </summary>
        </member>
        <member name="T:Fungus.Round">
            <summary>
            Command to execute and store the result of a Round
            </summary>
        </member>
        <member name="T:Fungus.Sign">
            <summary>
            Command to execute and store the result of a Sign
            </summary>
        </member>
        <member name="T:Fungus.Sqrt">
            <summary>
            Command to execute and store the result of a Sqrt
            </summary>
        </member>
        <member name="T:Fungus.ToInt">
            <summary>
            Command to execute and store the result of a float to int conversion
            </summary>
        </member>
        <member name="T:Fungus.Trig">
            <summary>
            Command to execute and store the result of basic trigonometry
            </summary>
        </member>
        <member name="T:Fungus.Menu">
            <summary>
            Displays a button in a multiple choice menu.
            </summary>
        </member>
        <member name="T:Fungus.MenuShuffle">
            <summary>
            Shuffle the order of the items in a Fungus Menu
            </summary>
        </member>
        <member name="T:Fungus.MenuTimer">
            <summary>
            Displays a timer bar and executes a target block if the player fails to select a menu option in time.
            </summary>
        </member>
        <member name="T:Fungus.MoveAdd">
            <summary>
            Moves a game object by a specified offset over time.
            </summary>
        </member>
        <member name="T:Fungus.MoveFrom">
            <summary>
            Moves a game object from a specified position back to its starting position over time. The position can be defined by a transform in another object (using To Transform) or by setting an absolute position (using To Position, if To Transform is set to None).
            </summary>
        </member>
        <member name="T:Fungus.MoveTo">
            <summary>
            Moves a game object to a specified position over time. The position can be defined by a transform in another object (using To Transform) or by setting an absolute position (using To Position, if To Transform is set to None).
            </summary>
        </member>
        <member name="T:Fungus.MoveToView">
            <summary>
            Moves the camera to a location specified by a View object.
            </summary>
        </member>
        <member name="T:Fungus.OpenURL">
            <summary>
            Opens the specified URL in the browser.
            </summary>
        </member>
        <member name="T:Fungus.PlayAnimState">
            <summary>
            Plays a state of an animator according to the state name.
            </summary>
        </member>
        <member name="T:Fungus.PlayMusic">
            <summary>
            Plays looping game music. If any game music is already playing, it is stopped. Game music will continue playing across scene loads.
            </summary>
        </member>
        <member name="T:Fungus.PlaySound">
            <summary>
            Plays a once-off sound effect. Multiple sound effects can be played at the same time.
            </summary>
        </member>
        <member name="T:Fungus.PlayUsfxrSound">
            <summary>
            Plays a usfxr synth sound. Use the usfxr editor [Tools > Fungus > Utilities > Generate usfxr Sound Effects] to create the SettingsString. Set a ParentTransform if using positional sound. See https://github.com/zeh/usfxr for more information about usfxr.
            </summary>
        </member>
        <member name="T:Fungus.Portrait">
            <summary>
            Controls a character portrait.
            </summary>
        </member>
        <member name="P:Fungus.Portrait._Stage">
            <summary>
            Stage to display portrait on.
            </summary>
        </member>
        <member name="P:Fungus.Portrait._Character">
            <summary>
            Character to display.
            </summary>
        </member>
        <member name="P:Fungus.Portrait._Portrait">
            <summary>
            Portrait to display.
            </summary>
        </member>
        <member name="P:Fungus.Portrait.Offset">
            <summary>
            Move the portrait from/to this offset position.
            </summary>
        </member>
        <member name="P:Fungus.Portrait.FromPosition">
            <summary>
            Move the portrait from this position.
            </summary>
        </member>
        <member name="P:Fungus.Portrait.ToPosition">
            <summary>
            Move the portrait to this position.
            </summary>
        </member>
        <member name="P:Fungus.Portrait.Facing">
            <summary>
            Direction character is facing.
            </summary>
        </member>
        <member name="P:Fungus.Portrait.UseDefaultSettings">
            <summary>
            Use Default Settings.
            </summary>
        </member>
        <member name="P:Fungus.Portrait.Move">
            <summary>
            Move portrait into new position.
            </summary>
        </member>
        <member name="P:Fungus.Portrait.ShiftIntoPlace">
            <summary>
            Start from offset position.
            </summary>
        </member>
        <member name="T:Fungus.PunchPosition">
            <summary>
            Applies a jolt of force to a GameObject's position and wobbles it back to its initial position.
            </summary>
        </member>
        <member name="T:Fungus.PunchRotation">
            <summary>
            Applies a jolt of force to a GameObject's rotation and wobbles it back to its initial rotation.
            </summary>
        </member>
        <member name="T:Fungus.PunchScale">
            <summary>
            Applies a jolt of force to a GameObject's scale and wobbles it back to its initial scale.
            </summary>
        </member>
        <member name="T:Fungus.Quit">
            <summary>
            Quits the application. Does not work in Editor or Webplayer builds. Shouldn't generally be used on iOS.
            </summary>
        </member>
        <member name="T:Fungus.RandomFloat">
            <summary>
            Sets an float variable to a random value in the defined range.
            </summary>
        </member>
        <member name="T:Fungus.RandomInteger">
            <summary>
            Sets an integer variable to a random value in the defined range.
            </summary>
        </member>
        <member name="T:Fungus.ReadTextFile">
            <summary>
            Reads in a text file and stores the contents in a string variable.
            </summary>
        </member>
        <member name="T:Fungus.Reset">
            <summary>
            Resets the state of all commands and variables in the Flowchart.
            </summary>
        </member>
        <member name="T:Fungus.ResetAnimTrigger">
            <summary>
            Resets a trigger parameter on an Animator component.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Fungus.AddForce2D" -->
        <!-- Badly formed XML comment ignored for member "T:Fungus.AddTorque2D" -->
        <!-- Badly formed XML comment ignored for member "T:Fungus.StopMotionRigidBody2D" -->
        <member name="T:Fungus.RotateAdd">
            <summary>
            Rotates a game object by the specified angles over time.
            </summary>
        </member>
        <member name="T:Fungus.RotateFrom">
            <summary>
            Rotates a game object from the specified angles back to its starting orientation over time.
            </summary>
        </member>
        <member name="T:Fungus.RotateTo">
            <summary>
            Rotates a game object to the specified angles over time.
            </summary>
        </member>
        <member name="T:Fungus.SavePoint.KeyMode">
            <summary>
            Supported modes for specifying a Save Point Key.
            </summary>
        </member>
        <member name="F:Fungus.SavePoint.KeyMode.BlockName">
            <summary> Use the parent Block's name as the Save Point Key. N.B. If you change the Block name later it will break the save file!</summary>
        </member>
        <member name="F:Fungus.SavePoint.KeyMode.Custom">
            <summary> Use a custom string for the key. This allows you to use multiple Save Points in the same block and save files will still work if the Block is renamed later. </summary>
        </member>
        <member name="F:Fungus.SavePoint.KeyMode.BlockNameAndCustom">
            <summary> Use both the parent Block's name as well as a custom string for the Save Point key. This allows you to use your custom key every block, provided your Block names are unique./// </summary>
        </member>
        <member name="T:Fungus.SavePoint.DescriptionMode">
            <summary>
            Supported modes for specifying a Save Point Description.
            </summary>
        </member>
        <member name="F:Fungus.SavePoint.DescriptionMode.Timestamp">
            <summary> Uses the current date and time as the save point description.</summary>
        </member>
        <member name="F:Fungus.SavePoint.DescriptionMode.Custom">
            <summary> Use a custom string for the save point description.</summary>
        </member>
        <member name="P:Fungus.SavePoint.IsStartPoint">
            <summary>
            Marks this Save Point as the starting point for Flowchart execution in the scene. Each scene in your game should have exactly one Save Point with this enabled.
            </summary>
        </member>
        <member name="P:Fungus.SavePoint.SavePointKey">
            <summary>
            Gets a string key which uniquely identifies this Save Point.
            </summary>
        </member>
        <member name="P:Fungus.SavePoint.SavePointDescription">
            <summary>
            Gets the save point description.
            </summary>
        </member>
        <member name="P:Fungus.SavePoint.ResumeOnLoad">
            <summary>
            Resume execution from this location after loading this Save Point.
            </summary>
        </member>
        <member name="T:Fungus.SaveVariable">
            <summary>
            Save an Boolean, Integer, Float or String variable to persistent storage using a string key.
            The value can be loaded again later using the Load Variable command. You can also 
            use the Set Save Profile command to manage separate save profiles for multiple players.
            </summary>
        </member>
        <member name="T:Fungus.Say">
            <summary>
            Writes text in a dialog box.
            </summary>
        </member>
        <member name="P:Fungus.Say._Character">
            <summary>
            Character that is speaking.
            </summary>
        </member>
        <member name="P:Fungus.Say.Portrait">
            <summary>
            Portrait that represents speaking character.
            </summary>
        </member>
        <member name="P:Fungus.Say.ExtendPrevious">
            <summary>
            Type this text in the previous dialog box.
            </summary>
        </member>
        <member name="T:Fungus.ScaleAdd">
            <summary>
            Changes a game object's scale by a specified offset over time.
            </summary>
        </member>
        <member name="T:Fungus.ScaleFrom">
            <summary>
            Changes a game object's scale to the specified value and back to its original scale over time.
            </summary>
        </member>
        <member name="T:Fungus.ScaleTo">
            <summary>
            Changes a game object's scale to a specified value over time.
            </summary>
        </member>
        <member name="T:Fungus.ReloadScene">
            <summary>
            Reload the current scene
            </summary>
        </member>
        <member name="T:Fungus.MessageTarget">
            <summary>
            Supported target types for messages.
            </summary>
        </member>
        <member name="F:Fungus.MessageTarget.SameFlowchart">
            <summary>
            Send message to the Flowchart containing the SendMessage command.
            </summary>
        </member>
        <member name="F:Fungus.MessageTarget.AllFlowcharts">
            <summary>
            Broadcast message to all Flowcharts.
            </summary>
        </member>
        <member name="T:Fungus.SendMessage">
            <summary>
            Sends a message to either the owner Flowchart or all Flowcharts in the scene. Blocks can listen for this message using a Message Received event handler.
            </summary>
        </member>
        <member name="T:Fungus.SetActive">
            <summary>
            Sets a game object in the scene to be active / inactive.
            </summary>
        </member>
        <member name="T:Fungus.SetAnimBool">
            <summary>
            Sets a boolean parameter on an Animator component to control a Unity animation"
            </summary>
        </member>
        <member name="T:Fungus.SetAnimFloat">
            <summary>
            Sets a float parameter on an Animator component to control a Unity animation.
            </summary>
        </member>
        <member name="T:Fungus.SetAnimInteger">
            <summary>
            Sets an integer parameter on an Animator component to control a Unity animation.
            </summary>
        </member>
        <member name="T:Fungus.SetAnimTrigger">
            <summary>
            Sets a trigger parameter on an Animator component to control a Unity animation.
            </summary>
        </member>
        <member name="T:Fungus.SetAudioPitch">
            <summary>
            Sets the global pitch level for audio played with Play Music and Play Sound commands.
            </summary>
        </member>
        <member name="T:Fungus.SetAudioVolume">
            <summary>
            Sets the global volume level for audio played with Play Music and Play Sound commands.
            </summary>
        </member>
        <member name="T:Fungus.SetClickable2D">
            <summary>
            Sets a Clickable2D component to be clickable / non-clickable.
            </summary>
        </member>
        <member name="T:Fungus.SetCollider">
            <summary>
            Sets all collider (2d or 3d) components on the target objects to be active / inactive.
            </summary>
        </member>
        <member name="T:Fungus.SetDraggable2D">
            <summary>
            Sets a Draggable2D component to be draggable / non-draggable.
            </summary>
        </member>
        <member name="T:Fungus.SetInteractable">
            <summary>
            Set the interactable state of selectable objects.
            </summary>
        </member>
        <member name="T:Fungus.SetLanguage">
            <summary>
            Set the active language for the scene. A Localization object with a localization file must be present in the scene.
            </summary>
        </member>
        <member name="T:Fungus.SetSortingLayer">
            <summary>
            Sets the Renderer sorting layer of every child of a game object. Applies to all Renderers (including mesh, skinned mesh, and sprite).
            </summary>
        </member>
        <member name="T:Fungus.SetMenuDialog">
            <summary>
            Sets a custom menu dialog to use when displaying multiple choice menus.
            </summary>
        </member>
        <member name="T:Fungus.SetMouseCursor">
            <summary>
            Sets the mouse cursor sprite.
            </summary>
        </member>
        <member name="T:Fungus.SetSaveProfile">
            <summary>
            Sets the active profile that the Save Variable and Load Variable commands will use. This is useful to crete multiple player save games. Once set, the profile applies across all Flowcharts and will also persist across scene loads.
            </summary>
        </member>
        <member name="F:Fungus.SetSaveProfile.saveProfile">
            <summary>
            Shared save profile name used by SaveVariable and LoadVariable.
            </summary>
        </member>
        <member name="T:Fungus.SetSayDialog">
            <summary>
            Sets a custom say dialog to use when displaying story text.
            </summary>
        </member>
        <member name="T:Fungus.SetSliderValue">
            <summary>
            Sets the value property of a slider object.
            </summary>
        </member>
        <member name="T:Fungus.SetSpriteOrder">
            <summary>
            Controls the render order of sprites by setting the Order In Layer property of a list of sprites.
            </summary>
        </member>
        <member name="T:Fungus.SetText">
            <summary>
            Sets the text property on a UI Text object and/or an Input Field object.
            </summary>
        </member>
        <member name="T:Fungus.SetToggleState">
            <summary>
            Sets the state of a toggle UI object.
            </summary>
        </member>
        <member name="T:Fungus.SetVariable">
            <summary>
            Sets a Boolean, Integer, Float or String variable to a new value using a simple arithmetic operation. The value can be a constant or reference another variable of the same type.
            </summary>
        </member>
        <member name="P:Fungus.SetVariable._SetOperator">
            <summary>
            The type of math operation to be performed.
            </summary>
        </member>
        <member name="T:Fungus.ShakeCamera">
            <summary>
            Applies a camera shake effect to the main camera.
            </summary>
        </member>
        <member name="T:Fungus.ShakePosition">
            <summary>
            Randomly shakes a GameObject's position by a diminishing amount over time.
            </summary>
        </member>
        <member name="T:Fungus.ShakeRotation">
            <summary>
            Randomly shakes a GameObject's rotation by a diminishing amount over time.
            </summary>
        </member>
        <member name="T:Fungus.ShakeScale">
            <summary>
            Randomly shakes a GameObject's rotation by a diminishing amount over time.
            </summary>
        </member>
        <member name="T:Fungus.ShowSprite">
            <summary>
            Makes a sprite visible / invisible by setting the color alpha.
            </summary>
        </member>
        <member name="T:Fungus.SpawnObject">
            <summary>
            Spawns a new object based on a reference to a scene or prefab game object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Fungus.StartSwipe" -->
        <member name="T:Fungus.Stop">
            <summary>
            Stop executing the Block that contains this command.
            </summary>
        </member>
        <member name="T:Fungus.StopBlock">
            <summary>
            Stops executing the named Block.
            </summary>
        </member>
        <member name="T:Fungus.StopFlowchart">
            <summary>
            Stops execution of all Blocks in a Flowchart.
            </summary>
        </member>
        <member name="T:Fungus.StopMusic">
            <summary>
            Stops the currently playing game music.
            </summary>
        </member>
        <member name="T:Fungus.StopSwipe">
            <summary>
            Deactivates swipe panning mode.
            </summary>
        </member>
        <member name="T:Fungus.StopTween">
            <summary>
            Stops an active iTween by name.
            </summary>
        </member>
        <member name="T:Fungus.StopTweens">
            <summary>
            Stop all active iTweens in the current scene.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Fungus.TransformProperty" -->
        <member name="T:Fungus.TweenUI">
            <summary>
            Abstract base class for TweenUI commands.
            </summary>
        </member>
        <member name="P:Fungus.VariableCondition._CompareOperator">
            <summary>
            The type of comparison operation to be performed.
            </summary>
        </member>
        <member name="T:Fungus.Vector3Arithmetic">
            <summary>
            Vector3 add, sub, mul, div arithmetic
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Fungus.Vector3Fields" -->
        <!-- Badly formed XML comment ignored for member "T:Fungus.Vector3Normalise" -->
        <!-- Badly formed XML comment ignored for member "T:Fungus.Vector3ToVector2" -->
        <member name="T:Fungus.Wait">
            <summary>
            Waits for period of time before executing the next command in the block.
            </summary>
        </member>
        <member name="T:Fungus.WaitFrames">
            <summary>
            Waits for a number of frames before executing the next command in the block.
            </summary>
        </member>
        <member name="T:Fungus.While">
            <summary>
            Continuously loop through a block of commands while the condition is true. Use the Break command to force the loop to terminate immediately.
            </summary>
        </member>
        <member name="T:Fungus.TextColor">
            <summary>
            Text coloring mode for Write command.
            </summary>
        </member>
        <member name="F:Fungus.TextColor.Default">
            <summary> Don't change the text color. </summary>
        </member>
        <member name="F:Fungus.TextColor.SetVisible">
            <summary> Set the text alpha to 1. </summary>
        </member>
        <member name="F:Fungus.TextColor.SetAlpha">
            <summary> Set the text alpha to a value. </summary>
        </member>
        <member name="F:Fungus.TextColor.SetColor">
            <summary> Set the text color to a value. </summary>
        </member>
        <member name="T:Fungus.Write">
            <summary>
            Writes content to a UI Text or Text Mesh object.
            </summary>
        </member>
        <member name="T:Fungus.ExecutionState">
            <summary>
            Execution state of a Block.
            </summary>
        </member>
        <member name="F:Fungus.ExecutionState.Idle">
            <summary> No command executing </summary>
        </member>
        <member name="F:Fungus.ExecutionState.Executing">
            <summary> Executing a command </summary>
        </member>
        <member name="T:Fungus.Block">
            <summary>
            A container for a sequence of Fungus comands.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Fungus.Block.previousActiveCommandIndex" -->
        <member name="M:Fungus.Block.SetExecutionInfo">
            <summary>
            Populate the command metadata used to control execution.
            </summary>
        </member>
        <member name="P:Fungus.Block.State">
            <summary>
            The execution state of the Block.
            </summary>
        </member>
        <member name="P:Fungus.Block.ItemId">
            <summary>
            Unique identifier for the Block.
            </summary>
        </member>
        <member name="P:Fungus.Block.BlockName">
            <summary>
            The name of the block node as displayed in the Flowchart window.
            </summary>
        </member>
        <member name="P:Fungus.Block.Description">
            <summary>
            Description text to display under the block node
            </summary>
        </member>
        <member name="P:Fungus.Block._EventHandler">
            <summary>
            An optional Event Handler which can execute the block when an event occurs.
            Note: Using the concrete class instead of the interface here because of weird editor behaviour.
            </summary>
        </member>
        <member name="P:Fungus.Block.ActiveCommand">
            <summary>
            The currently executing command.
            </summary>
        </member>
        <member name="P:Fungus.Block.ExecutingIconTimer">
            <summary>
            Timer for fading Block execution icon.
            </summary>
        </member>
        <member name="P:Fungus.Block.CommandList">
            <summary>
            The list of commands in the sequence.
            </summary>
        </member>
        <member name="P:Fungus.Block.JumpToCommandIndex">
            <summary>
            Controls the next command to execute in the block execution coroutine.
            </summary>
        </member>
        <member name="M:Fungus.Block.GetFlowchart">
            <summary>
            Returns the parent Flowchart for this Block.
            </summary>
        </member>
        <member name="M:Fungus.Block.IsExecuting">
            <summary>
            Returns true if the Block is executing a command.
            </summary>
        </member>
        <member name="M:Fungus.Block.GetExecutionCount">
            <summary>
            Returns the number of times this Block has executed.
            </summary>
        </member>
        <member name="M:Fungus.Block.StartExecution">
            <summary>
            Start a coroutine which executes all commands in the Block. Only one running instance of each Block is permitted.
            </summary>
        </member>
        <member name="M:Fungus.Block.Execute(System.Int32,System.Action)">
            <summary>
            A coroutine method that executes all commands in the Block. Only one running instance of each Block is permitted.
            </summary>
            <param name="commandIndex">Index of command to start execution at</param>
            <param name="onComplete">Delegate function to call when execution completes</param>
        </member>
        <member name="M:Fungus.Block.Stop">
            <summary>
            Stop executing commands in this Block.
            </summary>
        </member>
        <member name="M:Fungus.Block.GetConnectedBlocks">
            <summary>
            Returns a list of all Blocks connected to this one.
            </summary>
        </member>
        <member name="M:Fungus.Block.GetPreviousActiveCommandType">
            <summary>
            Returns the type of the previously executing command.
            </summary>
            <returns>The previous active command type.</returns>
        </member>
        <member name="M:Fungus.Block.UpdateIndentLevels">
            <summary>
            Recalculate the indent levels for all commands in the list.
            </summary>
        </member>
        <member name="M:Fungus.Block.GetLabelIndex(System.String)">
            <summary>
            Returns the index of the Label command with matching key, or -1 if not found.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Fungus.CameraManager" -->
        <member name="M:Fungus.CameraManager.PanToPath(UnityEngine.Camera,Fungus.View[],System.Single,System.Action)">
            <summary>
            Moves camera smoothly through a sequence of Views over a period of time.
            </summary>
        </member>
        <member name="M:Fungus.CameraManager.CreateColorTexture(UnityEngine.Color,System.Int32,System.Int32)">
            <summary>
            Creates a flat colored texture.
            </summary>
        </member>
        <member name="P:Fungus.CameraManager.ScreenFadeTexture">
            <summary>
            Full screen texture used for screen fade effect.
            </summary>
            <value>The screen fade texture.</value>
        </member>
        <member name="M:Fungus.CameraManager.Fade(System.Single,System.Single,System.Action)">
            <summary>
            Perform a fullscreen fade over a duration.
            </summary>
        </member>
        <member name="M:Fungus.CameraManager.FadeToView(UnityEngine.Camera,Fungus.View,System.Single,System.Boolean,System.Action)">
            <summary>
            Fade out, move camera to view and then fade back in.
            </summary>
        </member>
        <member name="M:Fungus.CameraManager.Stop">
            <summary>
            Stop all camera tweening.
            </summary>
        </member>
        <member name="M:Fungus.CameraManager.PanToPosition(UnityEngine.Camera,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,System.Action)">
            <summary>
            Moves camera from current position to a target position over a period of time.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Fungus.CameraManager.StartSwipePan(UnityEngine.Camera,Fungus.View,Fungus.View,System.Single,System.Single,System.Action)" -->
        <member name="M:Fungus.CameraManager.StopSwipePan">
            <summary>
            Deactivates swipe panning mode.
            </summary>
        </member>
        <member name="T:Fungus.Character">
            <summary>
            A Character that can be used in dialogue via the Say, Conversation and Portrait commands.
            </summary>
        </member>
        <member name="P:Fungus.Character.ActiveCharacters">
            <summary>
            Gets the list of active characters.
            </summary>
        </member>
        <member name="P:Fungus.Character.NameText">
            <summary>
            Character name as displayed in Say Dialog.
            </summary>
        </member>
        <member name="P:Fungus.Character.NameColor">
            <summary>
            Color to display the character name in Say Dialog.
            </summary>
        </member>
        <member name="P:Fungus.Character.SoundEffect">
            <summary>
            Sound effect to play when this character is speaking.
            </summary>
            <value>The sound effect.</value>
        </member>
        <member name="P:Fungus.Character.Portraits">
            <summary>
            List of portrait images that can be displayed for this character.
            </summary>
        </member>
        <member name="P:Fungus.Character.PortraitsFace">
            <summary>
            Direction that portrait sprites face.
            </summary>
        </member>
        <member name="P:Fungus.Character.ProfileSprite">
            <summary>
            Currently display profile sprite for this character.
            </summary>
            <value>The profile sprite.</value>
        </member>
        <member name="P:Fungus.Character.State">
            <summary>
            Current display state of this character's portrait.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Fungus.Character.SetSayDialog">
            <summary>
            Sets the active Say dialog with a reference to a Say Dialog object in the scene. This Say Dialog will be used whenever the character speaks.
            </summary>
        </member>
        <member name="M:Fungus.Character.GetObjectName">
            <summary>
            Returns the name of the game object.
            </summary>
        </member>
        <member name="M:Fungus.Character.NameStartsWith(System.String)">
            <summary>
            Returns true if the character name starts with the specified string. Case insensitive.
            </summary>
        </member>
        <member name="M:Fungus.Character.GetPortrait(System.String)">
            <summary>
            Looks for a portrait by name on a character
            If none is found, give a warning and return a blank sprite
            </summary>
        </member>
        <member name="T:Fungus.Clickable2D">
            <summary>
            Detects mouse clicks and touches on a Game Object, and sends an event to all Flowchart event handlers in the scene.
            The Game Object must have a Collider or Collider2D component attached.
            Use in conjunction with the ObjectClicked Flowchart event handler.
            </summary>
        </member>
        <member name="P:Fungus.Clickable2D.ClickEnabled">
            <summary>
            Is object clicking enabled.
            </summary>
        </member>
        <member name="T:Fungus.CommandInfoAttribute">
            <summary>
            Attribute class for Fungus commands.
            </summary>
            
        </member>
        <member name="M:Fungus.CommandInfoAttribute.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Metadata atribute for the Command class. 
            </summary>
            <param name="category">The category to place this command in.</param>
            <param name="commandName">The display name of the command.</param>
            <param name="helpText">Help information to display in the inspector.</param>
            <param name="priority">If two command classes have the same name, the one with highest priority is listed. Negative priority removess the command from the list.</param>///
        </member>
        <member name="T:Fungus.Command">
            <summary>
            Base class for Commands. Commands can be added to Blocks to create an execution sequence.
            </summary>
        </member>
        <member name="P:Fungus.Command.ItemId">
            <summary>
            Unique identifier for this command.
            Unique for this Flowchart.
            </summary>
        </member>
        <member name="P:Fungus.Command.ErrorMessage">
            <summary>
            Error message to display in the command inspector.
            </summary>
        </member>
        <member name="P:Fungus.Command.IndentLevel">
            <summary>
            Indent depth of the current commands.
            Commands are indented inside If, While, etc. sections.
            </summary>
        </member>
        <member name="P:Fungus.Command.CommandIndex">
            <summary>
            Index of the command in the parent block's command list.
            </summary>
        </member>
        <member name="P:Fungus.Command.IsExecuting">
            <summary>
            Set to true by the parent block while the command is executing.
            </summary>
        </member>
        <member name="P:Fungus.Command.ExecutingIconTimer">
            <summary>
            Timer used to control appearance of executing icon in inspector.
            </summary>
        </member>
        <member name="P:Fungus.Command.ParentBlock">
            <summary>
            Reference to the Block object that this command belongs to.
            This reference is only populated at runtime and in the editor when the 
            block is selected.
            </summary>
        </member>
        <member name="M:Fungus.Command.GetFlowchart">
            <summary>
            Returns the Flowchart that this command belongs to.
            </summary>
        </member>
        <member name="M:Fungus.Command.Execute">
            <summary>
            Execute the command.
            </summary>
        </member>
        <member name="M:Fungus.Command.Continue">
            <summary>
            End execution of this command and continue execution at the next command.
            </summary>
        </member>
        <member name="M:Fungus.Command.Continue(System.Int32)">
            <summary>
            End execution of this command and continue execution at a specific command index.
            </summary>
            <param name="nextCommandIndex">Next command index.</param>
        </member>
        <member name="M:Fungus.Command.StopParentBlock">
            <summary>
            Stops the parent Block executing.
            </summary>
        </member>
        <member name="M:Fungus.Command.OnStopExecuting">
            <summary>
            Called when the parent block has been requested to stop executing, and
            this command is the currently executing command.
            Use this callback to terminate any asynchronous operations and 
            cleanup state so that the command is ready to execute again later on.
            </summary>
        </member>
        <member name="M:Fungus.Command.OnCommandAdded(Fungus.Block)">
            <summary>
            Called when the new command is added to a block in the editor.
            </summary>
        </member>
        <member name="M:Fungus.Command.OnCommandRemoved(Fungus.Block)">
            <summary>
            Called when the command is deleted from a block in the editor.
            </summary>
        </member>
        <member name="M:Fungus.Command.OnEnter">
            <summary>
            Called when this command starts execution.
            </summary>
        </member>
        <member name="M:Fungus.Command.OnExit">
            <summary>
            Called when this command ends execution.
            </summary>
        </member>
        <member name="M:Fungus.Command.OnReset">
            <summary>
            Called when this command is reset. This happens when the Reset command is used.
            </summary>
        </member>
        <member name="M:Fungus.Command.GetConnectedBlocks(System.Collections.Generic.List{Fungus.Block}@)">
            <summary>
            Populates a list with the Blocks that this command references.
            </summary>
        </member>
        <member name="M:Fungus.Command.HasReference(Fungus.Variable)">
            <summary>
            Returns true if this command references the variable.
            Used to highlight variables in the variable list when a command is selected.
            </summary>
        </member>
        <member name="M:Fungus.Command.GetSummary">
            <summary>
            Returns the summary text to display in the command inspector.
            </summary>
        </member>
        <member name="M:Fungus.Command.GetHelpText">
            <summary>
            Returns the help text to display for this command.
            </summary>
        </member>
        <member name="M:Fungus.Command.OpenBlock">
            <summary>
            Return true if this command opens a block of commands. Used for indenting commands.
            </summary>
        </member>
        <member name="M:Fungus.Command.CloseBlock">
            <summary>
            Return true if this command closes a block of commands. Used for indenting commands.
            </summary>
        </member>
        <member name="M:Fungus.Command.GetButtonColor">
            <summary>
            Return the color for the command background in inspector.
            </summary>
            <returns>The button color.</returns>
        </member>
        <member name="M:Fungus.Command.IsPropertyVisible(System.String)">
            <summary>
            Returns true if the specified property should be displayed in the inspector. 
            This is useful for hiding certain properties based on the value of another property.
            </summary>
        </member>
        <member name="M:Fungus.Command.IsReorderableArray(System.String)">
            <summary>
            Returns true if the specified property should be displayed as a reorderable list in the inspector.
            This only applies for array properties and has no effect for non-array properties.
            </summary>
        </member>
        <member name="M:Fungus.Command.GetFlowchartLocalizationId">
            <summary>
            Returns the localization id for the Flowchart that contains this command.
            </summary>
        </member>
        <member name="T:Fungus.CommandCopyBuffer">
            <summary>
            Temporary buffer object used when copying and pasting commands.
            </summary>
        </member>
        <member name="M:Fungus.CommandCopyBuffer.GetInstance">
            <summary>
            Returns the CommandCopyBuffer singleton instance.
            Will create a CommandCopyBuffer game object if none currently exists.
            </summary>
        </member>
        <member name="T:Fungus.CustomTag">
            <summary>
            Create custom tags for use in Say text.
            </summary>
        </member>
        <member name="P:Fungus.CustomTag.TagStartSymbol">
            <summary>
            String that defines the start of the tag.
            </summary>
        </member>
        <member name="P:Fungus.CustomTag.TagEndSymbol">
            <summary>
            String that defines the end of the tag.
            </summary>
        </member>
        <member name="P:Fungus.CustomTag.ReplaceTagStartWith">
            <summary>
            String to replace the start tag with.
            </summary>
        </member>
        <member name="P:Fungus.CustomTag.ReplaceTagEndWith">
            <summary>
            String to replace the end tag with.
            </summary>
        </member>
        <member name="T:Fungus.ClickMode">
            <summary>
            Supported modes for clicking through a Say Dialog.
            </summary>
        </member>
        <member name="F:Fungus.ClickMode.Disabled">
            <summary> Clicking disabled. </summary>
        </member>
        <member name="F:Fungus.ClickMode.ClickAnywhere">
            <summary> Click anywhere on screen to advance. </summary>
        </member>
        <member name="F:Fungus.ClickMode.ClickOnDialog">
            <summary> Click anywhere on Say Dialog to advance. </summary>
        </member>
        <member name="F:Fungus.ClickMode.ClickOnButton">
            <summary> Click on continue button to advance. </summary>
        </member>
        <member name="T:Fungus.DialogInput">
            <summary>
            Input handler for say dialogs.
            </summary>
        </member>
        <member name="M:Fungus.DialogInput.SetNextLineFlag">
            <summary>
            Trigger next line input event from script.
            </summary>
        </member>
        <member name="M:Fungus.DialogInput.SetDialogClickedFlag">
            <summary>
            Set the dialog clicked flag (usually from an Event Trigger component in the dialog UI).
            </summary>
        </member>
        <member name="M:Fungus.DialogInput.SetButtonClickedFlag">
            <summary>
            Sets the button clicked flag.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Fungus.Draggable2D" -->
        <member name="P:Fungus.Draggable2D.DragEnabled">
            <summary>
            Is object drag and drop enabled.
            </summary>
            <value><c>true</c> if drag enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Fungus.EventHandlerInfoAttribute">
            <summary>
            Attribute class for Fungus event handlers.
            </summary>
        </member>
        <member name="T:Fungus.EventHandler">
            <summary>
            A Block may have an associated Event Handler which starts executing commands when
            a specific event occurs. 
            To create a custom Event Handler, simply subclass EventHandler and call the ExecuteBlock() method
            when the event occurs. 
            Add an EventHandlerInfo attibute and your new EventHandler class will automatically appear in the
            'Execute On Event' dropdown menu when a block is selected.
            </summary>
        </member>
        <member name="P:Fungus.EventHandler.ParentBlock">
            <summary>
            The parent Block which owns this Event Handler.
            </summary>
        </member>
        <member name="M:Fungus.EventHandler.ExecuteBlock">
            <summary>
            The Event Handler should call this method when the event is detected to start executing the Block.
            </summary>
        </member>
        <member name="M:Fungus.EventHandler.GetSummary">
            <summary>
            Returns custom summary text for the event handler.
            </summary>
        </member>
        <member name="T:Fungus.Flowchart">
            <summary>
            Visual scripting controller for the Flowchart programming language.
            Flowchart objects may be edited visually using the Flowchart editor window.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.CachedFlowcharts">
            <summary>
            Cached list of flowchart objects in the scene for fast lookup.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.BroadcastFungusMessage(System.String)">
            <summary>
            Sends a message to all Flowchart objects in the current scene.
            Any block with a matching MessageReceived event handler will start executing.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.ScrollPos">
            <summary>
            Scroll position of Flowchart editor window.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.VariablesScrollPos">
            <summary>
            Scroll position of Flowchart variables window.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.VariablesExpanded">
            <summary>
            Show the variables pane.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.BlockViewHeight">
            <summary>
            Height of command block view in inspector.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.Zoom">
            <summary>
            Zoom level of Flowchart editor window.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.ScrollViewRect">
            <summary>
            Scrollable area for Flowchart editor window.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.SelectedBlock">
            <summary>
            Current actively selected block in the Flowchart editor.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.SelectedCommands">
            <summary>
            Currently selected command in the Flowchart editor.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.Variables">
            <summary>
            The list of variables that can be accessed by the Flowchart.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.Description">
            <summary>
            Description text displayed in the Flowchart editor window
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.StepPause">
            <summary>
            Slow down execution in the editor to make it easier to visualise program flow.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.ColorCommands">
            <summary>
            Use command color when displaying the command list in the inspector.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.SaveSelection">
            <summary>
            Saves the selected block and commands when saving the scene. Helps avoid version control conflicts if you've only changed the active selection.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.LocalizationId">
            <summary>
            Unique identifier for identifying this flowchart in localized string keys.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.ShowLineNumbers">
            <summary>
            Display line numbers in the command list in the Block inspector.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.LuaEnv">
            <summary>
            Lua Environment to be used by default for all Execute Lua commands in this Flowchart.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.LuaBindingName">
            <summary>
            The ExecuteLua command adds a global Lua variable with this name bound to the flowchart prior to executing.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.CenterPosition">
            <summary>
            Position in the center of all blocks in the flowchart.
            </summary>
        </member>
        <member name="P:Fungus.Flowchart.Version">
            <summary>
            Variable to track flowchart's version so components can update to new versions.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.IsActive">
            <summary>
            Returns true if the Flowchart gameobject is active.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetName">
            <summary>
            Returns the Flowchart gameobject name.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.NextItemId">
            <summary>
            Returns the next id to assign to a new flowchart item.
            Item ids increase monotically so they are guaranteed to
            be unique within a Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.CreateBlock(UnityEngine.Vector2)">
            <summary>
            Create a new block node which you can then add commands to.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.FindBlock(System.String)">
            <summary>
            Returns the named Block in the flowchart, or null if not found.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Fungus.Flowchart.HasBlock(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Fungus.Flowchart.ExecuteIfHasBlock(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Fungus.Flowchart.ExecuteBlock(System.String)" -->
        <member name="M:Fungus.Flowchart.StopBlock(System.String)">
            <summary>
            Stops an executing Block in the Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.ExecuteBlock(Fungus.Block,System.Int32,System.Action)">
            <summary>
            Execute a child block in the flowchart.
            The block must be in an idle state to be executed.
            This version provides extra options to control how the block is executed.
            Returns true if the Block started execution.            
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.StopAllBlocks">
            <summary>
            Stop all executing Blocks in this Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.SendFungusMessage(System.String)">
            <summary>
            Sends a message to this Flowchart only.
            Any block with a matching MessageReceived event handler will start executing.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetUniqueVariableKey(System.String,Fungus.Variable)">
            <summary>
            Returns a new variable key that is guaranteed not to clash with any existing variable in the list.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetUniqueBlockKey(System.String,Fungus.Block)">
            <summary>
            Returns a new Block key that is guaranteed not to clash with any existing Block in the Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetUniqueLabelKey(System.String,Fungus.Label)">
            <summary>
            Returns a new Label key that is guaranteed not to clash with any existing Label in the Block.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetVariable(System.String)">
            <summary>
            Returns the variable with the specified key, or null if the key is not found.
            You will need to cast the returned variable to the correct sub-type.
            You can then access the variable's value using the Value property. e.g.
            BooleanVariable boolVar = flowchart.GetVariable("MyBool") as BooleanVariable;
            boolVar.Value = false;
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Fungus.Flowchart.GetVariable``1(System.String)" -->
        <member name="M:Fungus.Flowchart.SetVariable``1(System.String,``0)">
            <summary>
            Register a new variable with the Flowchart at runtime. 
            The variable should be added as a component on the Flowchart game object.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.HasVariable(System.String)">
            <summary>
            Checks if a given variable exists in the flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetVariableNames">
            <summary>
            Returns the list of variable names in the Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetPublicVariables">
            <summary>
            Gets a list of all variables with public scope in this Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetBooleanVariable(System.String)">
            <summary>
            Gets the value of a boolean variable.
            Returns false if the variable key does not exist.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.SetBooleanVariable(System.String,System.Boolean)">
            <summary>
            Sets the value of a boolean variable.
            The variable must already be added to the list of variables for this Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetIntegerVariable(System.String)">
            <summary>
            Gets the value of an integer variable.
            Returns 0 if the variable key does not exist.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.SetIntegerVariable(System.String,System.Int32)">
            <summary>
            Sets the value of an integer variable.
            The variable must already be added to the list of variables for this Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetFloatVariable(System.String)">
            <summary>
            Gets the value of a float variable.
            Returns 0 if the variable key does not exist.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.SetFloatVariable(System.String,System.Single)">
            <summary>
            Sets the value of a float variable.
            The variable must already be added to the list of variables for this Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetStringVariable(System.String)">
            <summary>
            Gets the value of a string variable.
            Returns the empty string if the variable key does not exist.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.SetStringVariable(System.String,System.String)">
            <summary>
            Sets the value of a string variable.
            The variable must already be added to the list of variables for this Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetGameObjectVariable(System.String)">
            <summary>
            Gets the value of a GameObject variable.
            Returns null if the variable key does not exist.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.SetGameObjectVariable(System.String,UnityEngine.GameObject)">
            <summary>
            Sets the value of a GameObject variable.
            The variable must already be added to the list of variables for this Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetTransformVariable(System.String)">
            <summary>
            Gets the value of a Transform variable.
            Returns null if the variable key does not exist.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.SetTransformVariable(System.String,UnityEngine.Transform)">
            <summary>
            Sets the value of a Transform variable.
            The variable must already be added to the list of variables for this Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.UpdateHideFlags">
            <summary>
            Set the block objects to be hidden or visible depending on the hideComponents property.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.ClearSelectedCommands">
            <summary>
            Clears the list of selected commands.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.AddSelectedCommand(Fungus.Command)">
            <summary>
            Adds a command to the list of selected commands.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.ClearSelectedBlocks">
            <summary>
            Clears the list of selected blocks.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.AddSelectedBlock(Fungus.Block)">
            <summary>
            Adds a block to the list of selected blocks.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.Reset(System.Boolean,System.Boolean)">
            <summary>
            Reset the commands and variables in the Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.IsCommandSupported(Fungus.CommandInfoAttribute)">
            <summary>
            Override this in a Flowchart subclass to filter which commands are shown in the Add Command list.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.HasExecutingBlocks">
            <summary>
            Returns true if there are any executing blocks in this Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.GetExecutingBlocks">
            <summary>
            Returns a list of all executing blocks in this Flowchart.
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.SubstituteVariables(System.String)">
            <summary>
            Substitute variables in the input text with the format {$VarName}
            This will first match with private variables in this Flowchart, and then
            with public variables in all Flowcharts in the scene (and any component
            in the scene that implements StringSubstituter.ISubstitutionHandler).
            </summary>
        </member>
        <member name="M:Fungus.Flowchart.SubstituteStrings(System.Text.StringBuilder)">
            <summary>
            Implementation of StringSubstituter.ISubstitutionHandler which matches any public variable in the Flowchart.
            To perform full variable substitution with all substitution handlers in the scene, you should
            use the SubstituteVariables() method instead.
            </summary>
        </member>
        <member name="T:Fungus.FungusManager">
            <summary>
            Fungus manager singleton. Manages access to all Fungus singletons in a consistent manner.
            </summary>
        </member>
        <member name="M:Fungus.FungusManager.OnDestroy">
            <summary>
            When Unity quits, it destroys objects in a random order.
            In principle, a Singleton is only destroyed when application quits.
            If any script calls Instance after it have been destroyed, 
              it will create a buggy ghost object that will stay on the Editor scene
              even after stopping playing the Application. Really bad!
            So, this was made to be sure we're not creating that buggy ghost object.
            </summary>
        </member>
        <member name="P:Fungus.FungusManager.CameraManager">
            <summary>
            Gets the camera manager singleton instance.
            </summary>
        </member>
        <member name="P:Fungus.FungusManager.MusicManager">
            <summary>
            Gets the music manager singleton instance.
            </summary>
        </member>
        <member name="P:Fungus.FungusManager.EventDispatcher">
            <summary>
            Gets the event dispatcher singleton instance.
            </summary>
        </member>
        <member name="P:Fungus.FungusManager.GlobalVariables">
            <summary>
            Gets the global variable singleton instance.
            </summary>
        </member>
        <member name="P:Fungus.FungusManager.SaveManager">
            <summary>
            Gets the save manager singleton instance.
            </summary>
        </member>
        <member name="P:Fungus.FungusManager.Instance">
            <summary>
            Gets the FungusManager singleton instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Fungus.FungusState" -->
        <member name="P:Fungus.FungusState.SelectedFlowchart">
            <summary>
            The currently selected Flowchart.
            </summary>
        </member>
        <member name="T:Fungus.Localization">
            <summary>
            Multi-language localization support.
            </summary>
        </member>
        <member name="T:Fungus.Localization.TextItem">
            <summary>
            Temp storage for a single item of standard text and its localizations.
            </summary>
        </member>
        <member name="M:Fungus.Localization.Init">
            <summary>
            String subsitution can happen during the Start of another component, so we
            may need to call Init() from other methods.
            </summary>
        </member>
        <member name="M:Fungus.Localization.FindTextItems">
            <summary>
            Builds a dictionary of localizable text items in the scene.
            </summary>
        </member>
        <member name="M:Fungus.Localization.AddCSVDataItems(System.Collections.Generic.Dictionary{System.String,Fungus.Localization.TextItem},System.String)">
            <summary>
            Adds localized strings from CSV file data to a dictionary of text items in the scene.
            </summary>
        </member>
        <member name="M:Fungus.Localization.GetLocalizedString(System.String)">
            <summary>
            Looks up the specified string in the localized strings table.
            For this to work, a localization file and active language must have been set previously.
            Return null if the string is not found.            
            </summary>
        </member>
        <member name="P:Fungus.Localization.ActiveLanguage">
            <summary>
            Language to use at startup, usually defined by a two letter language code (e.g DE = German).
            </summary>
        </member>
        <member name="P:Fungus.Localization.LocalizationFile">
            <summary>
            CSV file containing localization data which can be easily edited in a spreadsheet tool.
            </summary>
        </member>
        <member name="P:Fungus.Localization.NotificationText">
            <summary>
            Stores any notification message from export / import methods.
            </summary>
        </member>
        <member name="M:Fungus.Localization.ClearLocalizeableCache">
            <summary>
            Clears the cache of localizeable objects.
            </summary>
        </member>
        <member name="M:Fungus.Localization.GetCSVData">
            <summary>
            Convert all text items and localized strings to an easy to edit CSV format.
            </summary>
        </member>
        <member name="M:Fungus.Localization.SetActiveLanguage(System.String,System.Boolean)">
            <summary>
            Scan a localization CSV file and copies the strings for the specified language code
            into the text properties of the appropriate scene objects.
            </summary>
        </member>
        <member name="M:Fungus.Localization.PopulateTextProperty(System.String,System.String)">
            <summary>
            Populates the text property of a single scene object with a new text value.
            </summary>
        </member>
        <member name="M:Fungus.Localization.GetStandardText">
            <summary>
            Returns all standard text for localizeable text in the scene using an
            easy to edit custom text format.
            </summary>
        </member>
        <member name="M:Fungus.Localization.SetStandardText(System.String)">
            <summary>
            Sets standard text on scene objects by parsing a text data file.
            </summary>
        </member>
        <member name="T:Fungus.MenuDialog">
            <summary>
            Presents multiple choice buttons to the players.
            </summary>
        </member>
        <member name="P:Fungus.MenuDialog.ActiveMenuDialog">
            <summary>
            Currently active Menu Dialog used to display Menu options
            </summary>
        </member>
        <member name="P:Fungus.MenuDialog.CachedButtons">
            <summary>
            A cached list of button objects in the menu dialog.
            </summary>
            <value>The cached buttons.</value>
        </member>
        <member name="P:Fungus.MenuDialog.CachedSlider">
            <summary>
            A cached slider object used for the timer in the menu dialog.
            </summary>
            <value>The cached slider.</value>
        </member>
        <member name="M:Fungus.MenuDialog.SetActive(System.Boolean)">
            <summary>
            Sets the active state of the Menu Dialog gameobject.
            </summary>
        </member>
        <member name="M:Fungus.MenuDialog.GetMenuDialog">
            <summary>
            Returns a menu dialog by searching for one in the scene or creating one if none exists.
            </summary>
        </member>
        <member name="M:Fungus.MenuDialog.Clear">
            <summary>
            Clear all displayed options in the Menu Dialog.
            </summary>
        </member>
        <member name="M:Fungus.MenuDialog.HideSayDialog">
            <summary>
            Hides any currently displayed Say Dialog.
            </summary>
        </member>
        <member name="M:Fungus.MenuDialog.AddOption(System.String,System.Boolean,System.Boolean,Fungus.Block)">
            <summary>
            Adds the option to the list of displayed options. Calls a Block when selected.
            Will cause the Menu dialog to become visible if it is not already visible.
            </summary>
            <returns><c>true</c>, if the option was added successfully.</returns>
            <param name="text">The option text to display on the button.</param>
            <param name="interactable">If false, the option is displayed but is not selectable.</param>
            <param name="hideOption">If true, the option is not displayed but the menu knows that option can or did exist</param>
            <param name="targetBlock">Block to execute when the option is selected.</param>
        </member>
        <member name="M:Fungus.MenuDialog.AddOption(System.String,System.Boolean,Fungus.LuaEnvironment,MoonSharp.Interpreter.Closure)">
            <summary>
            Adds the option to the list of displayed options, calls a Lua function when selected.
            Will cause the Menu dialog to become visible if it is not already visible.
            </summary>
            <returns><c>true</c>, if the option was added successfully.</returns>
        </member>
        <member name="M:Fungus.MenuDialog.AddOption(System.String,System.Boolean,System.Boolean,UnityEngine.Events.UnityAction)">
            <summary>
            Adds the option to the list of displayed options. Calls a Block when selected.
            Will cause the Menu dialog to become visible if it is not already visible.
            </summary>
            <returns><c>true</c>, if the option was added successfully.</returns>
            <param name="text">The option text to display on the button.</param>
            <param name="interactable">If false, the option is displayed but is not selectable.</param>
            <param name="hideOption">If true, the option is not displayed but the menu knows that option can or did exist</param>
            <param name="action">Action attached to the button on the menu item</param>
        </member>
        <member name="M:Fungus.MenuDialog.ShowTimer(System.Single,Fungus.Block)">
            <summary>
            Show a timer during which the player can select an option. Calls a Block when the timer expires.
            </summary>
            <param name="duration">The duration during which the player can select an option.</param>
            <param name="targetBlock">Block to execute if the player does not select an option in time.</param>
        </member>
        <member name="M:Fungus.MenuDialog.ShowTimer(System.Single,Fungus.LuaEnvironment,MoonSharp.Interpreter.Closure)">
            <summary>
            Show a timer during which the player can select an option. Calls a Lua function when the timer expires.
            </summary>
        </member>
        <member name="M:Fungus.MenuDialog.IsActive">
            <summary>
            Returns true if the Menu Dialog is currently displayed.
            </summary>
        </member>
        <member name="P:Fungus.MenuDialog.DisplayedOptionsCount">
            <summary>
            Returns the number of currently displayed options.
            </summary>
        </member>
        <member name="M:Fungus.MenuDialog.Shuffle(System.Random)">
            <summary>
            Shuffle the parent order of the cached buttons, allows for randomising button order, buttons are auto reordered when cleared
            </summary>
        </member>
        <member name="T:Fungus.MusicManager">
            <summary>
            Music manager which provides basic music and sound effect functionality.
            Music playback persists across scene loads.
            </summary>
        </member>
        <member name="M:Fungus.MusicManager.PlayMusic(UnityEngine.AudioClip,System.Boolean,System.Single,System.Single)">
            <summary>
            Plays game music using an audio clip.
            One music clip may be played at a time.
            </summary>
        </member>
        <member name="M:Fungus.MusicManager.PlaySound(UnityEngine.AudioClip,System.Single)">
            <summary>
            Plays a sound effect once, at the specified volume.
            </summary>
            <param name="soundClip">The sound effect clip to play.</param>
            <param name="volume">The volume level of the sound effect.</param>
        </member>
        <member name="M:Fungus.MusicManager.SetAudioPitch(System.Single,System.Single,System.Action)">
            <summary>
            Shifts the game music pitch to required value over a period of time.
            </summary>
            <param name="pitch">The new music pitch value.</param>
            <param name="duration">The length of time in seconds needed to complete the pitch change.</param>
            <param name="onComplete">A delegate method to call when the pitch shift has completed.</param>
        </member>
        <member name="M:Fungus.MusicManager.SetAudioVolume(System.Single,System.Single,System.Action)">
            <summary>
            Fades the game music volume to required level over a period of time.
            </summary>
            <param name="volume">The new music volume value [0..1]</param>
            <param name="duration">The length of time in seconds needed to complete the volume change.</param>
            <param name="onComplete">Delegate function to call when fade completes.</param>
        </member>
        <member name="M:Fungus.MusicManager.StopMusic">
            <summary>
            Stops playing game music.
            </summary>
        </member>
        <member name="T:Fungus.Node">
            <summary>
            Base class for Flowchart nodes.
            </summary>
        </member>
        <member name="T:Fungus.Parallax">
            <summary>
            Attach this component to a sprite object to apply a simple parallax scrolling effect.
            The horizontal and vertical parallax offset is calculated based on the distance from the camera to the position of the background sprite.
            The scale parallax is calculated based on the ratio of the camera size to the size of the background sprite. This gives a 'dolly zoom' effect.
            Accelerometer based parallax is also applied on devices that support it.
            </summary>
        </member>
        <member name="F:Fungus.Parallax.backgroundSprite">
            <summary>
            The background sprite which this sprite is layered on top of.
            The position of this sprite is used to calculate the parallax offset.
            </summary>
        </member>
        <member name="F:Fungus.Parallax.parallaxScale">
            <summary>
            Scale factor for calculating the parallax offset.
            </summary>
        </member>
        <member name="F:Fungus.Parallax.accelerometerScale">
            <summary>
            Scale factor for calculating parallax offset based on device accelerometer tilt angle.
            Set this to 0 to disable the accelerometer parallax effect.
            </summary>
        </member>
        <member name="T:Fungus.DisplayType">
            <summary>
            Types of display operations supported by portraits.
            </summary>
        </member>
        <member name="F:Fungus.DisplayType.None">
            <summary> Do nothing. </summary>
        </member>
        <member name="F:Fungus.DisplayType.Show">
            <summary> Show the portrait. </summary>
        </member>
        <member name="F:Fungus.DisplayType.Hide">
            <summary> Hide the portrait. </summary>
        </member>
        <member name="F:Fungus.DisplayType.Replace">
            <summary> Replace the existing portrait. </summary>
        </member>
        <member name="F:Fungus.DisplayType.MoveToFront">
            <summary> Move portrait to the front. </summary>
        </member>
        <member name="T:Fungus.FacingDirection">
            <summary>
            Directions that character portraits can face.
            </summary>
        </member>
        <member name="F:Fungus.FacingDirection.None">
            <summary> Unknown direction </summary>
        </member>
        <member name="F:Fungus.FacingDirection.Left">
            <summary> Facing left. </summary>
        </member>
        <member name="F:Fungus.FacingDirection.Right">
            <summary> Facing right. </summary>
        </member>
        <member name="T:Fungus.PositionOffset">
            <summary>
            Offset direction for position.
            </summary>
        </member>
        <member name="F:Fungus.PositionOffset.None">
            <summary> Unknown offset direction. </summary>
        </member>
        <member name="F:Fungus.PositionOffset.OffsetLeft">
            <summary> Offset applies to the left. </summary>
        </member>
        <member name="F:Fungus.PositionOffset.OffsetRight">
            <summary> Offset applies to the right. </summary>
        </member>
        <member name="T:Fungus.PortraitController">
            <summary>
            Controls the Portrait sprites on stage
            </summary>
        </member>
        <member name="M:Fungus.PortraitController.CleanPortraitOptions(Fungus.PortraitOptions)">
            <summary>
            Makes sure all options are set correctly so it won't break whatever command it's sent to
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Fungus.PortraitController.CreatePortraitObject(Fungus.Character,System.Single)">
            <summary>
            Creates and sets the portrait image for a character
            </summary>
            <param name="character"></param>
            <param name="fadeDuration"></param>
        </member>
        <member name="M:Fungus.PortraitController.SetRectTransform(UnityEngine.RectTransform,UnityEngine.RectTransform)">
            <summary>
            Performs a deep copy of all values from one RectTransform to another.
            </summary>
        </member>
        <member name="M:Fungus.PortraitController.RunPortraitCommand(Fungus.PortraitOptions,System.Action)">
            <summary>
            Using all portrait options available, run any portrait command.
            </summary>
            <param name="options">Portrait Options</param>
            <param name="onComplete">The function that will run once the portrait command finishes</param>
        </member>
        <member name="M:Fungus.PortraitController.MoveToFront(Fungus.Character)">
            <summary>
            Moves Character in front of other characters on stage
            </summary>
        </member>
        <member name="M:Fungus.PortraitController.MoveToFront(Fungus.PortraitOptions)">
            <summary>
            Moves Character in front of other characters on stage
            </summary>
        </member>
        <member name="M:Fungus.PortraitController.Show(Fungus.Character,System.String)">
            <summary>
            Shows character at a named position in the stage
            </summary>
            <param name="character"></param>
            <param name="position">Named position on stage</param>
        </member>
        <member name="M:Fungus.PortraitController.Show(Fungus.Character,System.String,System.String,System.String)">
            <summary>
            Shows character moving from a position to a position
            </summary>
            <param name="character"></param>
            <param name="portrait"></param>
            <param name="fromPosition">Where the character will appear</param>
            <param name="toPosition">Where the character will move to</param>
        </member>
        <member name="M:Fungus.PortraitController.Show(MoonSharp.Interpreter.Table)">
            <summary>
            From lua, you can pass an options table with named arguments
            example:
                stage.show{character=jill, portrait="happy", fromPosition="right", toPosition="left"}
            Any option available in the PortraitOptions is available from Lua
            </summary>
            <param name="optionsTable">Moonsharp Table</param>
        </member>
        <member name="M:Fungus.PortraitController.Show(Fungus.PortraitOptions)">
            <summary>
            Show portrait with the supplied portrait options
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Fungus.PortraitController.ShowPortrait(Fungus.Character,System.String)">
            <summary>
            Simple show command that shows the character with an available named portrait
            </summary>
            <param name="character">Character to show</param>
            <param name="portrait">Named portrait to show for the character, i.e. "angry", "happy", etc</param>
        </member>
        <member name="M:Fungus.PortraitController.Hide(Fungus.Character)">
            <summary>
            Simple character hide command
            </summary>
            <param name="character">Character to hide</param>
        </member>
        <member name="M:Fungus.PortraitController.Hide(Fungus.Character,System.String)">
            <summary>
            Move the character to a position then hide it
            </summary>
            <param name="character">Character to hide</param>
            <param name="toPosition">Where the character will disapear to</param>
        </member>
        <member name="M:Fungus.PortraitController.Hide(MoonSharp.Interpreter.Table)">
            <summary>
            From lua, you can pass an options table with named arguments
            example:
                stage.hide{character=jill, toPosition="left"}
            Any option available in the PortraitOptions is available from Lua
            </summary>
            <param name="optionsTable">Moonsharp Table</param>
        </member>
        <member name="M:Fungus.PortraitController.Hide(Fungus.PortraitOptions)">
            <summary>
            Hide portrait with provided options
            </summary>
        </member>
        <member name="M:Fungus.PortraitController.SetDimmed(Fungus.Character,System.Boolean)">
            <summary>
            Sets the dimmed state of a character on the stage.
            </summary>
        </member>
        <member name="T:Fungus.SaveData">
            <summary>
            This component encodes and decodes a list of game objects to be saved for each Save Point.
            It knows how to encode / decode concrete game classes like Flowchart and FlowchartData.
            To extend the save system to handle other data types, just modify or subclass this component.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Fungus.SaveData.Encode(System.Collections.Generic.List{Fungus.SaveDataItem})" -->
        <member name="M:Fungus.SaveData.Decode(System.Collections.Generic.List{Fungus.SaveDataItem})">
            <summary>
            Decodes the loaded list of SaveDataItems to restore the saved game state.
            </summary>
        </member>
        <member name="T:Fungus.SaveManager">
            <summary>
            Manages the Save History (a list of Save Points) and provides a set of operations for saving and loading games.
            
            Note WebGL and Webplayer (deprecated) save using playerprefs instead of using a json file in persistent storage
            -webgl would require additional js to force a sync of FS.syncfs
            -webplayer does not implement system io
            </summary>
        </member>
        <member name="M:Fungus.SaveManager.ExecuteBlocks(System.String)">
            <summary>
            Starts Block execution based on a Save Point Key
            The execution order is:
            1. Save Point Loaded event handlers with a matching key.
            2. First Save Point command (in any Block) with matching key. Execution starts at the following command.
            3. Any label in any block with name matching the key. Execution starts at the following command.
            </summary>
        </member>
        <member name="M:Fungus.SaveManager.ExecuteStartBlock">
            <summary>
            Starts execution at the first Save Point found in the scene with the IsStartPoint property enabled.
            </summary>
        </member>
        <member name="P:Fungus.SaveManager.StartScene">
            <summary>
            The scene that should be loaded when restarting a game.
            </summary>
        </member>
        <member name="P:Fungus.SaveManager.NumSavePoints">
            <summary>
            Returns the number of Save Points in the Save History.
            </summary>
        </member>
        <member name="P:Fungus.SaveManager.NumRewoundSavePoints">
            <summary>
            Returns the current number of rewound Save Points in the Save History.
            </summary>
        </member>
        <member name="M:Fungus.SaveManager.Save(System.String)">
            <summary>
            Writes the Save History to persistent storage.
            </summary>
        </member>
        <member name="M:Fungus.SaveManager.Load(System.String)">
            <summary>
            Loads the Save History from persistent storage and loads the latest Save Point.
            </summary>
        </member>
        <member name="M:Fungus.SaveManager.Delete(System.String)">
            <summary>
            Deletes a previously stored Save History from persistent storage.
            </summary>
        </member>
        <member name="M:Fungus.SaveManager.SaveDataExists(System.String)">
            <summary>
            Returns true if save data has previously been stored using this key.
            </summary>
        </member>
        <member name="M:Fungus.SaveManager.AddSavePoint(System.String,System.String)">
            <summary>
            Creates a new Save Point using a key and description, and adds it to the Save History.
            </summary>
        </member>
        <member name="M:Fungus.SaveManager.Rewind">
            <summary>
            Rewinds to the previous Save Point in the Save History and loads that Save Point.
            </summary>
        </member>
        <member name="M:Fungus.SaveManager.FastForward">
            <summary>
            Fast forwards to the next rewound Save Point in the Save History and loads that Save Point.
            </summary>
        </member>
        <member name="M:Fungus.SaveManager.ClearHistory">
            <summary>
            Deletes all Save Points in the Save History.
            </summary>
        </member>
        <member name="M:Fungus.SaveManager.GetDebugInfo">
            <summary>
            Returns an info string to help debug issues with the save data.
            </summary>
            <returns>The debug info.</returns>
        </member>
        <member name="T:Fungus.SaveMenu">
            <summary>
            A singleton game object which displays a simple UI for the save system.
            </summary>
        </member>
        <member name="P:Fungus.SaveMenu.SaveDataKey">
            <summary>
            Gets the string key used to store save game data in Player Prefs. 
            </summary>
        </member>
        <member name="M:Fungus.SaveMenu.ToggleSaveMenu">
            <summary>
            Toggles the expanded / collapsed state of the save menu.
            Uses a tween to fade the menu UI in and out.
            </summary>
        </member>
        <member name="M:Fungus.SaveMenu.Save">
            <summary>
            Handler function called when the Save button is pressed.
            </summary>
        </member>
        <member name="M:Fungus.SaveMenu.Load">
            <summary>
            Handler function called when the Load button is pressed.
            </summary>
        </member>
        <member name="M:Fungus.SaveMenu.Rewind">
            <summary>
            Handler function called when the Rewind button is pressed.
            </summary>
        </member>
        <member name="M:Fungus.SaveMenu.FastForward">
            <summary>
            Handler function called when the Fast Forward button is pressed.
            </summary>
        </member>
        <member name="M:Fungus.SaveMenu.Restart">
            <summary>
            Handler function called when the Restart button is pressed.
            </summary>
        </member>
        <member name="T:Fungus.SayDialog">
            <summary>
            Display story text in a visual novel style dialog box.
            </summary>
        </member>
        <member name="P:Fungus.SayDialog.ActiveSayDialog">
            <summary>
            Currently active Say Dialog used to display Say text
            </summary>
        </member>
        <member name="M:Fungus.SayDialog.GetSayDialog">
            <summary>
            Returns a SayDialog by searching for one in the scene or creating one if none exists.
            </summary>
        </member>
        <member name="M:Fungus.SayDialog.StopPortraitTweens">
            <summary>
            Stops all active portrait tweens.
            </summary>
        </member>
        <member name="M:Fungus.SayDialog.SetActive(System.Boolean)">
            <summary>
            Sets the active state of the Say Dialog gameobject.
            </summary>
        </member>
        <member name="M:Fungus.SayDialog.SetCharacter(Fungus.Character)">
            <summary>
            Sets the active speaking character.
            </summary>
            <param name="character">The active speaking character.</param>
        </member>
        <member name="M:Fungus.SayDialog.SetCharacterImage(UnityEngine.Sprite)">
            <summary>
            Sets the character image to display on the Say Dialog.
            </summary>
        </member>
        <member name="M:Fungus.SayDialog.SetCharacterName(System.String,UnityEngine.Color)">
            <summary>
            Sets the character name to display on the Say Dialog.
            Supports variable substitution e.g. John {$surname}
            </summary>
        </member>
        <member name="M:Fungus.SayDialog.Say(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,UnityEngine.AudioClip,System.Action)">
            <summary>
            Write a line of story text to the Say Dialog. Starts coroutine automatically.
            </summary>
            <param name="text">The text to display.</param>
            <param name="clearPrevious">Clear any previous text in the Say Dialog.</param>
            <param name="waitForInput">Wait for player input before continuing once text is written.</param>
            <param name="fadeWhenDone">Fade out the Say Dialog when writing and player input has finished.</param>
            <param name="stopVoiceover">Stop any existing voiceover audio before writing starts.</param>
            <param name="voiceOverClip">Voice over audio clip to play.</param>
            <param name="onComplete">Callback to execute when writing and player input have finished.</param>
        </member>
        <member name="M:Fungus.SayDialog.DoSay(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,UnityEngine.AudioClip,System.Action)">
            <summary>
            Write a line of story text to the Say Dialog. Must be started as a coroutine.
            </summary>
            <param name="text">The text to display.</param>
            <param name="clearPrevious">Clear any previous text in the Say Dialog.</param>
            <param name="waitForInput">Wait for player input before continuing once text is written.</param>
            <param name="fadeWhenDone">Fade out the Say Dialog when writing and player input has finished.</param>
            <param name="stopVoiceover">Stop any existing voiceover audio before writing starts.</param>
            <param name="voiceOverClip">Voice over audio clip to play.</param>
            <param name="onComplete">Callback to execute when writing and player input have finished.</param>
        </member>
        <member name="P:Fungus.SayDialog.FadeWhenDone">
            <summary>
            Tell the Say Dialog to fade out once writing and player input have finished.
            </summary>
        </member>
        <member name="M:Fungus.SayDialog.Stop">
            <summary>
            Stop the Say Dialog while its writing text.
            </summary>
        </member>
        <member name="M:Fungus.SayDialog.Clear">
            <summary>
            Stops writing text and clears the Say Dialog.
            </summary>
        </member>
        <member name="T:Fungus.SceneLoader">
            <summary>
            Helper component for loading a new scene.
            A fullscreen loading image is displayed while loading the new scene.
            All Rooms are destroyed and unused assets are released from memory before loading the new scene to minimize memory footprint.
            For streaming Web Player builds, the loading image will be displayed until the requested level has finished downloading.
            </summary>
        </member>
        <member name="M:Fungus.SceneLoader.LoadScene(System.String,UnityEngine.Texture2D)">
            <summary>
            Asynchronously load a new scene.
            </summary>
            <param name="_sceneToLoad">The name of the scene to load. Scenes must be added in project build settings.</param>
            <param name="_loadingTexture">Loading image to display while loading the new scene.</param>
        </member>
        <member name="T:Fungus.SelectOnEnable">
            <summary>
            Select the UI element when the gameobject is enabled.
            </summary>
        </member>
        <member name="T:Fungus.SpriteFader">
            <summary>
            Transitions a sprite from its current color to a target color.
            An offset can be applied to slide the sprite in while changing color.
            </summary>
        </member>
        <member name="M:Fungus.SpriteFader.FadeSprite(UnityEngine.SpriteRenderer,UnityEngine.Color,System.Single,UnityEngine.Vector2,System.Action)">
            <summary>
            Attaches a SpriteFader component to a sprite object to transition its color over time.
            </summary>
        </member>
        <member name="T:Fungus.Stage">
            <summary>
            Define a set of screen positions where character sprites can be displayed.
            </summary>
        </member>
        <member name="P:Fungus.Stage.ActiveStages">
            <summary>
            Gets the list of active stages.
            </summary>
        </member>
        <member name="M:Fungus.Stage.GetActiveStage">
            <summary>
            Returns the currently active stage.
            </summary>
        </member>
        <member name="P:Fungus.Stage.PortraitCanvas">
            <summary>
            Canvas object containing the stage positions.
            </summary>
        </member>
        <member name="P:Fungus.Stage.DimPortraits">
            <summary>
            Dim portraits when a character is not speaking.
            </summary>
        </member>
        <member name="P:Fungus.Stage.DimColor">
            <summary>
            Choose a dimColor.
            </summary>
        </member>
        <member name="P:Fungus.Stage.FadeDuration">
            <summary>
            Duration for fading character portraits in / out.
            </summary>
        </member>
        <member name="P:Fungus.Stage.MoveDuration">
            <summary>
            Duration for moving characters to a new position.
            </summary>
        </member>
        <member name="P:Fungus.Stage.FadeEaseType">
            <summary>
            Ease type for the fade tween.
            </summary>
        </member>
        <member name="P:Fungus.Stage.ShiftOffset">
            <summary>
            Constant offset to apply to portrait position.
            </summary>
        </member>
        <member name="P:Fungus.Stage.DefaultPosition">
            <summary>
            The position object where characters appear by default.
            </summary>
        </member>
        <member name="P:Fungus.Stage.Positions">
            <summary>
            List of stage position rect transforms in the stage.
            </summary>
        </member>
        <member name="P:Fungus.Stage.CharactersOnStage">
            <summary>
            List of currently active characters on the stage.
            </summary>
        </member>
        <member name="M:Fungus.Stage.GetPosition(System.String)">
            <summary>
            Searches the stage's named positions
            If none matches the string provided, give a warning and return a new RectTransform
            </summary>
        </member>
        <member name="T:Fungus.CompareOperator">
            <summary>
            Standard comparison operators.
            </summary>
        </member>
        <member name="F:Fungus.CompareOperator.Equals">
            <summary> == mathematical operator.</summary>
        </member>
        <member name="F:Fungus.CompareOperator.NotEquals">
            <summary> != mathematical operator.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Fungus.CompareOperator.LessThan" -->
        <member name="F:Fungus.CompareOperator.GreaterThan">
            <summary> > mathematical operator.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Fungus.CompareOperator.LessThanOrEquals" -->
        <member name="F:Fungus.CompareOperator.GreaterThanOrEquals">
            <summary> >= mathematical operator.</summary>
        </member>
        <member name="T:Fungus.SetOperator">
            <summary>
            Mathematical operations that can be performed on variables.
            </summary>
        </member>
        <member name="F:Fungus.SetOperator.Assign">
            <summary> = operator. </summary>
        </member>
        <member name="F:Fungus.SetOperator.Negate">
            <summary> =! operator. </summary>
        </member>
        <member name="F:Fungus.SetOperator.Add">
            <summary> += operator. </summary>
        </member>
        <member name="F:Fungus.SetOperator.Subtract">
            <summary> -= operator. </summary>
        </member>
        <member name="F:Fungus.SetOperator.Multiply">
            <summary> *= operator. </summary>
        </member>
        <member name="F:Fungus.SetOperator.Divide">
            <summary> /= operator. </summary>
        </member>
        <member name="T:Fungus.VariableScope">
            <summary>
            Scope types for Variables.
            </summary>
        </member>
        <member name="F:Fungus.VariableScope.Private">
            <summary> Can only be accessed by commands in the same Flowchart. </summary>
        </member>
        <member name="F:Fungus.VariableScope.Public">
            <summary> Can be accessed from any command in any Flowchart. </summary>
        </member>
        <member name="F:Fungus.VariableScope.Global">
            <summary> Creates and/or references a global variable of that name, all variables of this name and scope share the same underlying fungus variable and exist for the duration of the instance of Unity.</summary>
        </member>
        <member name="T:Fungus.VariableInfoAttribute">
            <summary>
            Attribute class for variables.
            </summary>
        </member>
        <member name="T:Fungus.VariablePropertyAttribute">
            <summary>
            Attribute class for variable properties.
            </summary>
        </member>
        <member name="T:Fungus.Variable">
            <summary>
            Abstract base class for variables.
            </summary>
        </member>
        <member name="P:Fungus.Variable.Scope">
            <summary>
            Visibility scope for the variable.
            </summary>
        </member>
        <member name="P:Fungus.Variable.Key">
            <summary>
            String identifier for the variable.
            </summary>
        </member>
        <member name="M:Fungus.Variable.OnReset">
            <summary>
            Callback to reset the variable if the Flowchart is reset.
            </summary>
        </member>
        <member name="T:Fungus.VariableBase`1">
            <summary>
            Generic concrete base class for variables.
            </summary>
        </member>
        <member name="T:Fungus.View">
            <summary>
            Defines a camera view point.
            The position and rotation are specified using the game object's transform, so this class only needs to specify the ortographic view size.
            </summary>
        </member>
        <member name="P:Fungus.View.ViewSize">
            <summary>
            Orthographic size of the camera view in world units.
            </summary>
        </member>
        <member name="P:Fungus.View.PrimaryAspectRatio">
            <summary>
            Aspect ratio of the primary view rectangle. e.g. a 4:3 aspect ratio = 1.333.
            </summary>
        </member>
        <member name="P:Fungus.View.SecondaryAspectRatio">
            <summary>
            Aspect ratio of the secondary view rectangle. e.g. a 2:1 aspect ratio = 2/1 = 2.0.
            </summary>
        </member>
        <member name="T:Fungus.WriterState">
            <summary>
            Current state of the writing process.
            </summary>
        </member>
        <member name="F:Fungus.WriterState.Invalid">
            <summary> Invalid state. </summary>
        </member>
        <member name="F:Fungus.WriterState.Start">
            <summary> Writer has started writing. </summary>
        </member>
        <member name="F:Fungus.WriterState.Pause">
            <summary> Writing has been paused. </summary>
        </member>
        <member name="F:Fungus.WriterState.Resume">
            <summary> Writing has resumed after a pause. </summary>
        </member>
        <member name="F:Fungus.WriterState.End">
            <summary> Writing has ended. </summary>
        </member>
        <member name="T:Fungus.Writer">
            <summary>
            Writes text using a typewriter effect to a UI text object.
            </summary>
        </member>
        <member name="P:Fungus.Writer.Text">
            <summary>
            Gets or sets the text property of the attached text object.
            </summary>
        </member>
        <member name="P:Fungus.Writer.IsWriting">
            <summary>
            This property is true when the writer is writing text or waiting (i.e. still processing tokens).
            </summary>
        </member>
        <member name="P:Fungus.Writer.IsWaitingForInput">
            <summary>
            This property is true when the writer is waiting for user input to continue.
            </summary>
        </member>
        <member name="P:Fungus.Writer.Paused">
            <summary>
            Pauses the writer.
            </summary>
        </member>
        <member name="M:Fungus.Writer.Stop">
            <summary>
            Stop writing text.
            </summary>
        </member>
        <member name="M:Fungus.Writer.Write(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,UnityEngine.AudioClip,System.Action)">
            <summary>
            Writes text using a typewriter effect to a UI text object.
            </summary>
            <param name="content">Text to be written</param>
            <param name="clear">If true clears the previous text.</param>
            <param name="waitForInput">Writes the text and then waits for player input before calling onComplete.</param>
            <param name="stopAudio">Stops any currently playing audioclip.</param>
            <param name="waitForVO">Wait for the Voice over to complete before proceeding</param>
            <param name="audioClip">Audio clip to play when text starts writing.</param>
            <param name="onComplete">Callback to call when writing is finished.</param>
        </member>
        <member name="M:Fungus.Writer.SetTextColor(UnityEngine.Color)">
            <summary>
            Sets the color property of the text UI object.
            </summary>
        </member>
        <member name="M:Fungus.Writer.SetTextAlpha(System.Single)">
            <summary>
            Sets the alpha component of the color property of the text UI object.
            </summary>
        </member>
        <member name="M:Fungus.Writer.HasTextObject">
            <summary>
            Returns true if there is a supported text object attached to this writer.
            </summary>
        </member>
        <member name="M:Fungus.Writer.SupportsRichText">
            <summary>
            Returns true if the text object has rich text support.
            </summary>
        </member>
        <member name="T:Fungus.AudioMode">
            <summary>
            Type of audio effect to play.
            </summary>
        </member>
        <member name="F:Fungus.AudioMode.Beeps">
            <summary> Use short beep sound effects. </summary>
        </member>
        <member name="F:Fungus.AudioMode.SoundEffect">
            <summary> Use long looping sound effect. </summary>
        </member>
        <member name="T:Fungus.WriterAudio">
            <summary>
            Manages audio effects for Dialogs.
            </summary>
        </member>
        <member name="T:Fungus.ButtonClicked">
            <summary>
            The block will execute when the user clicks on the target UI button object.
            </summary>
        </member>
        <member name="T:Fungus.DragCancelled">
            <summary>
            The block will execute when the player drags an object and releases it without dropping it on a target object.
            </summary>
        </member>
        <member name="T:Fungus.DragCompleted">
            <summary>
            The block will execute when the player drags an object and successfully drops it on a target object.
            </summary>
        </member>
        <member name="P:Fungus.DragCompleted.DraggableObject">
            <summary>
            Gets the draggable object.
            </summary>
        </member>
        <member name="M:Fungus.DragCompleted.IsOverTarget">
            <summary>
            Returns true if the draggable object is over the drag target object.
            </summary>
        </member>
        <member name="M:Fungus.DragCompleted.OnDragEntered(Fungus.Draggable2D,UnityEngine.Collider2D)">
            <summary>
            Called by the Draggable2D object when the it enters the drag target.
            </summary>
        </member>
        <member name="M:Fungus.DragCompleted.OnDragExited(Fungus.Draggable2D,UnityEngine.Collider2D)">
            <summary>
            Called by the Draggable2D object when the it exits the drag target.
            </summary>
        </member>
        <member name="M:Fungus.DragCompleted.OnDragCompleted(Fungus.Draggable2D)">
            <summary>
            Called by the Draggable2D object when the the drag ends over the drag target.
            </summary>
        </member>
        <member name="T:Fungus.DragEntered">
            <summary>
            The block will execute when the player is dragging an object which starts touching the target object.
            </summary>
        </member>
        <member name="M:Fungus.DragEntered.OnDragEntered(Fungus.Draggable2D,UnityEngine.Collider2D)">
            <summary>
            Called by the Draggable2D object when the the drag enters the drag target.
            </summary>
        </member>
        <member name="T:Fungus.DragExited">
            <summary>
            The block will execute when the player is dragging an object which stops touching the target object.
            </summary>
        </member>
        <member name="M:Fungus.DragExited.OnDragExited(Fungus.Draggable2D,UnityEngine.Collider2D)">
            <summary>
            Called by the Draggable2D object when the drag exits from the targetObject.
            </summary>
        </member>
        <member name="T:Fungus.DragStarted">
            <summary>
            The block will execute when the player starts dragging an object.
            </summary>
        </member>
        <member name="M:Fungus.DragStarted.OnDragStarted(Fungus.Draggable2D)">
            <summary>
            Called by the Draggable2D object when the drag starts.
            </summary>
        </member>
        <member name="T:Fungus.EndEdit">
            <summary>
            The block will execute when the user finishes editing the text in the input field.
            </summary>
        </member>
        <member name="T:Fungus.FlowchartEnabled">
            <summary>
            The block will execute when the Flowchart game object is enabled.
            </summary>
        </member>
        <member name="T:Fungus.GameStarted">
            <summary>
            The block will execute when the game starts playing.
            </summary>
        </member>
        <member name="T:Fungus.KeyPressType">
            <summary>
            Key press modes supported by Key Pressed event handler.
            </summary>
        </member>
        <member name="F:Fungus.KeyPressType.KeyDown">
            <summary> Execute once when the key is pressed down. </summary>
        </member>
        <member name="F:Fungus.KeyPressType.KeyUp">
            <summary> Execute once when the key is released </summary>
        </member>
        <member name="F:Fungus.KeyPressType.KeyRepeat">
            <summary> Execute once per frame when key is held down. </summary>
        </member>
        <member name="T:Fungus.KeyPressed">
            <summary>
            The block will execute when a key press event occurs.
            </summary>
        </member>
        <member name="T:Fungus.MessageReceived">
            <summary>
            The block will execute when the specified message is received from a Send Message command.
            </summary>
        </member>
        <member name="M:Fungus.MessageReceived.OnSendFungusMessage(System.String)">
            <summary>
            Called from Flowchart when a message is sent.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="T:Fungus.AnimatorState">
            <summary>
            The block will execute when the desired OnAnimator* message for the monobehaviour is received.
            </summary>
        </member>
        <member name="T:Fungus.ApplicationState">
            <summary>
            The block will execute when the desired OnApplication message for the monobehaviour is received.
            </summary>
        </member>
        <member name="T:Fungus.BasePhysicsEventHandler">
            <summary>
            Base class for all of our physics event handlers
            </summary>
        </member>
        <member name="T:Fungus.CharacterControllerCollide">
            <summary>
            The block will execute when tag filtered OnControllerColliderHit is received.
            </summary>
        </member>
        <member name="T:Fungus.Collision">
            <summary>
            The block will execute when a 3d physics collision matching some basic conditions is met 
            </summary>
        </member>
        <member name="T:Fungus.Collision2D">
            <summary>
            The block will execute when a 2d physics collision matching some basic conditions is met 
            </summary>
        </member>
        <member name="T:Fungus.Mouse">
            <summary>
            The block will execute when the desired OnMouse* message for the monobehaviour is received
            </summary>
        </member>
        <member name="T:Fungus.Particle">
            <summary>
            The block will execute when the desired OnParticle message for the monobehaviour is received.
            </summary>
        </member>
        <member name="T:Fungus.Render">
            <summary>
            The block will execute when the desired Rendering related message for the monobehaviour is received.
            </summary>
        </member>
        <member name="T:Fungus.TagFilteredEventHandler">
            <summary>
            Base class for all of our physics event handlers
            </summary>
        </member>
        <member name="T:Fungus.TransformChanged">
            <summary>
            The block will execute when the desired OnTransform related message for the monobehaviour is received.
            </summary>
        </member>
        <member name="T:Fungus.Trigger">
            <summary>
            The block will execute when a 3d physics trigger matching some basic conditions is met. 
            </summary>
        </member>
        <member name="T:Fungus.Trigger2D">
            <summary>
            The block will execute when a 2d physics trigger matching some basic conditions is met. 
            </summary>
        </member>
        <member name="T:Fungus.UpdateTick">
            <summary>
            The block will execute every chosen Update, or FixedUpdate or LateUpdate.
            </summary>
        </member>
        <member name="T:Fungus.ObjectClicked">
            <summary>
            The block will execute when the user clicks or taps on the clickable object.
            </summary>
        </member>
        <member name="M:Fungus.ObjectClicked.DoExecuteBlock(System.Int32)">
            <summary>
            Executing a block on the same frame that the object is clicked can cause
            input problems (e.g. auto completing Say Dialog text). A single frame delay 
            fixes the problem.
            </summary>
        </member>
        <member name="M:Fungus.ObjectClicked.OnObjectClicked(Fungus.Clickable2D)">
            <summary>
            Called by the Clickable2D object when it is clicked.
            </summary>
        </member>
        <member name="T:Fungus.ToggleChanged">
            <summary>
            The block will execute when the user toggles on the target UI toggle object.
            </summary>
        </member>
        <member name="T:Fungus.IDialogInputListener">
            <summary>
            Interface for listening for dialogue input events.
            </summary>
        </member>
        <member name="T:Fungus.ILocalizable">
            <summary>
            An item of localizeable text.
            </summary>
        </member>
        <member name="M:Fungus.ILocalizable.GetStandardText">
            <summary>
            Gets the standard (non-localized) text.
            </summary>
        </member>
        <member name="M:Fungus.ILocalizable.SetStandardText(System.String)">
            <summary>
            Sets the standard (non-localized) text.
            </summary>
            <param name="standardText">Standard text.</param>
        </member>
        <member name="M:Fungus.ILocalizable.GetDescription">
            <summary>
            Gets the description used to help localizers.
            </summary>
            <returns>The description.</returns>
        </member>
        <member name="M:Fungus.ILocalizable.GetStringId">
            <summary>
            Gets the unique string identifier.
            </summary>
        </member>
        <member name="T:Fungus.IUpdateable">
            <summary>
            Interface for Flowchart components which can be updated when the 
            scene loads in the editor. This is used to maintain backwards 
            compatibility with earlier versions of Fungus.
            </summary>
        </member>
        <member name="T:Fungus.IWriterListener">
            <summary>
            Implement this interface to be notified about Writer events.
            </summary>
        </member>
        <member name="M:Fungus.IWriterListener.OnInput">
            
             Called when a user input event (e.g. a click) has been handled by the Writer.
            
        </member>
        <member name="M:Fungus.IWriterListener.OnStart(UnityEngine.AudioClip)">
            <summary>
            Called when the Writer starts writing new text.
            </summary>
            <param name="audioClip">An optional audioClip sound effect can be supplied (e.g. for voiceover)</param>
        </member>
        <member name="M:Fungus.IWriterListener.OnPause">
            Called when the Writer has paused writing text (e.g. on a {wi} tag).
        </member>
        <member name="M:Fungus.IWriterListener.OnResume">
            Called when the Writer has resumed writing text.
        </member>
        <member name="M:Fungus.IWriterListener.OnEnd(System.Boolean)">
            Called when the Writer has finished writing text.
            <param name="stopAudio">Controls whether audio should be stopped when writing ends.</param>
        </member>
        <member name="M:Fungus.IWriterListener.OnGlyph">
            Called every time the Writer writes a new character glyph.
        </member>
        <member name="M:Fungus.IWriterListener.OnVoiceover(UnityEngine.AudioClip)">
            <summary>
            Called when voiceover should start.
            </summary>
        </member>
        <member name="T:Fungus.BlockSignals">
            <summary>
            Block event signalling system.
            You can use this to be notified about various events in the Block execution process.
            </summary>
        </member>
        <member name="E:Fungus.BlockSignals.OnBlockStart">
            <summary>
            BlockStart signal. Sent when the Block starts execution.
            </summary>
        </member>
        <member name="E:Fungus.BlockSignals.OnBlockEnd">
            <summary>
            BlockEnd signal. Sent when the Block ends execution.
            </summary>
        </member>
        <member name="E:Fungus.BlockSignals.OnCommandExecute">
            <summary>
            CommandExecute signal. Sent just before a Command in a Block executes.
            </summary>
        </member>
        <member name="T:Fungus.SaveManagerSignals">
            <summary>
            Save manager signalling system.
            You can use this to be notified about various events in the save game system.
            </summary>
        </member>
        <member name="E:Fungus.SaveManagerSignals.OnSavePointLoaded">
            <summary>
            SavePointLoaded signal. Sent just after a SavePoint is loaded.
            </summary>
        </member>
        <member name="E:Fungus.SaveManagerSignals.OnSavePointAdded">
            <summary>
            SavePointAdded signal. Sent when a new save point is added to the save history (typically via the Save Point command).
            </summary>
        </member>
        <member name="T:Fungus.WriterSignals">
            <summary>
            Writer event signalling system.
            You can use this to be notified about various events in the writing process.
            </summary>
        </member>
        <member name="E:Fungus.WriterSignals.OnTextTagToken">
            <summary>
            TextTagToken signal. Sent for each unique token when writing text.
            </summary>
        </member>
        <member name="E:Fungus.WriterSignals.OnWriterState">
            <summary>
            WriterState signal. Sent when the writer changes state.
            </summary>
        </member>
        <member name="E:Fungus.WriterSignals.OnWriterInput">
            <summary>
            WriterInput signal. Sent when the writer receives player input.
            </summary>
        </member>
        <member name="T:Fungus.WriterSignals.WriterGlyphHandler">
            <summary>
            WriterGlyph signal. Sent when the writer writes out a glyph.
            </summary>
        </member>
        <member name="T:Fungus.ConversationManager">
            <summary>
            Helper class to manage parsing and executing the conversation format.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Fungus.ConversationManager.Split(System.String)" -->
        <member name="M:Fungus.ConversationManager.CreateConversationItem(System.String[],System.String,Fungus.Character)">
            <summary>
            Using the string of say parameters before the ':',
            set the current character, position and portrait if provided.
            </summary>
            <returns>The conversation item.</returns>
            <param name="sayParams">The list of say parameters.</param>
            <param name="text">The text for the character to say.</param>
            <param name="currentCharacter">The currently speaking character.</param>
        </member>
        <member name="M:Fungus.ConversationManager.PopulateCharacterCache">
            <summary>
            Caches the character objects in the scene for fast lookup during conversations.
            </summary>
        </member>
        <member name="M:Fungus.ConversationManager.DoConversation(System.String)">
            <summary>
            Parse and execute a conversation string.
            </summary>
        </member>
        <member name="T:Fungus.EventDispatcher">
            <summary>
            A simple efficient event dispatcher with logging support.
            </summary>
        </member>
        <member name="M:Fungus.EventDispatcher.GetDelegateListCopy``1(``0)">
            <summary>
            Gets the delegate list copy.
            </summary>
            <remarks>
            As listener can modify the list while iterating it, it is better to iterate a copy of the delegates list instead of a reference.
            </remarks>
            <returns>A copy of the delegates list if found. Null if the dictionary does not contain a delegate list for this event.</returns>
            <param name="evt">Event instance.</param>
            <typeparam name="T">Type of the received event.</typeparam>
        </member>
        <member name="T:Fungus.EventDispatcher.TypedDelegate`1">
            <summary>
            A typed delegate which contains information about the event.
            </summary>
        </member>
        <member name="M:Fungus.EventDispatcher.AddLog(System.Action{System.String})">
            <summary>
            Adds a log callback action.
            </summary>
        </member>
        <member name="M:Fungus.EventDispatcher.RemoveLog(System.Action{System.String})">
            <summary>
            Removes a log callback action.
            </summary>
        </member>
        <member name="M:Fungus.EventDispatcher.AddListener``1(Fungus.EventDispatcher.TypedDelegate{``0})">
            <summary>
            Adds a listener for a specified event type.
            </summary>
        </member>
        <member name="M:Fungus.EventDispatcher.RemoveListener``1(Fungus.EventDispatcher.TypedDelegate{``0})">
            <summary>
            Removes a listener for a specified event type.
            </summary>
        </member>
        <member name="M:Fungus.EventDispatcher.Raise``1(``0)">
            <summary>
            Raise an event of a specified type.
            </summary>
        </member>
        <member name="M:Fungus.EventDispatcher.Raise``1">
            <summary>
            Raise an event of a specified type, creates an instance of the type automatically.
            </summary>
        </member>
        <member name="M:Fungus.EventDispatcher.UnregisterAll">
            <summary>
            Unregisters all event listeners.
            </summary>
        </member>
        <member name="T:Fungus.StringVar">
            <summary>
            Serializable container for a string variable.
            </summary>
        </member>
        <member name="T:Fungus.IntVar">
            <summary>
            Serializable container for an integer variable.
            </summary>
        </member>
        <member name="T:Fungus.FloatVar">
            <summary>
            Serializable container for a float variable.
            </summary>
        </member>
        <member name="T:Fungus.BoolVar">
            <summary>
            Serializable container for a boolean variable.
            </summary>
        </member>
        <member name="T:Fungus.FlowchartData">
            <summary>
            Serializable container for encoding the state of a Flowchart's variables.
            </summary>
        </member>
        <member name="P:Fungus.FlowchartData.FlowchartName">
            <summary>
            Gets or sets the name of the encoded Flowchart.
            </summary>
        </member>
        <member name="P:Fungus.FlowchartData.StringVars">
            <summary>
            Gets or sets the list of encoded string variables.
            </summary>
        </member>
        <member name="P:Fungus.FlowchartData.IntVars">
            <summary>
            Gets or sets the list of encoded integer variables.
            </summary>
        </member>
        <member name="P:Fungus.FlowchartData.FloatVars">
            <summary>
            Gets or sets the list of encoded float variables.
            </summary>
        </member>
        <member name="P:Fungus.FlowchartData.BoolVars">
            <summary>
            Gets or sets the list of encoded boolean variables.
            </summary>
        </member>
        <member name="M:Fungus.FlowchartData.Encode(Fungus.Flowchart)">
            <summary>
            Encodes the data in a Flowchart into a structure that can be stored by the save system.
            </summary>
        </member>
        <member name="M:Fungus.FlowchartData.Decode(Fungus.FlowchartData)">
            <summary>
            Decodes a FlowchartData object and uses it to restore the state of a Flowchart in the scene.
            </summary>
        </member>
        <member name="T:Fungus.FungusConstants">
            <summary>
            Global constants used in various parts of Fungus.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Fungus.FungusConstants.ExecutingIconFadeTime" -->
        <member name="F:Fungus.FungusConstants.CurrentVersion">
            <summary>
            The current version of the Flowchart. Used for updating components.
            </summary>
        </member>
        <member name="F:Fungus.FungusConstants.DefaultBlockName">
            <summary>
            The name of the initial block in a new flowchart.
            </summary>
        </member>
        <member name="F:Fungus.FungusConstants.DefaultChoiceBlockTint">
            <summary>
            The default choice block color.
            </summary>
        </member>
        <member name="F:Fungus.FungusConstants.DefaultEventBlockTint">
            <summary>
            The default event block color.
            </summary>
        </member>
        <member name="F:Fungus.FungusConstants.DefaultProcessBlockTint">
            <summary>
            The default process block color.
            </summary>
        </member>
        <member name="F:Fungus.FungusConstants.DefaultSaveDataKey">
            <summary>
            The default key used for storing save game data in PlayerPrefs.
            </summary>
        </member>
        <member name="T:Fungus.GlobalVariables">
            <summary>
            Storage for a collection of fungus variables that can then be accessed globally.
            </summary>
        </member>
        <member name="T:Fungus.PortraitOptions">
            <summary>
            Contains all options to run a portrait command.
            </summary>
        </member>
        <member name="T:Fungus.PortraitState">
            <summary>
            Represents the current state of a character portrait on the stage.
            </summary>
        </member>
        <member name="T:Fungus.PortraitUtil">
            <summary>
            Util functions for working with portraits.
            </summary>
        </member>
        <member name="M:Fungus.PortraitUtil.ConvertTableToPortraitOptions(MoonSharp.Interpreter.Table,Fungus.Stage)">
            <summary>
            Convert a Moonsharp table to portrait options
            If the table returns a null for any of the parameters, it should keep the defaults
            </summary>
            <param name="table">Moonsharp Table</param>
            <param name="stage">Stage</param>
            <returns></returns>
        </member>
        <member name="T:Fungus.SaveDataItem">
            <summary>
            A container for a single unity of saved data.
            The data and its associated type are stored as string properties.
            The data would typically be a JSON string representing a saved object.
            </summary>
        </member>
        <member name="P:Fungus.SaveDataItem.DataType">
            <summary>
            Gets the type of the data.
            </summary>
        </member>
        <member name="P:Fungus.SaveDataItem.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="M:Fungus.SaveDataItem.Create(System.String,System.String)">
            <summary>
            Factory method to create a new SaveDataItem.
            </summary>
        </member>
        <member name="T:Fungus.SaveHistory">
            <summary>
            The Save History is a list of previously created Save Points, sorted chronologically.
            </summary>
        </member>
        <member name="F:Fungus.SaveHistory.SaveDataVersion">
            <summary>
            Version number of current save data format.
            </summary>
        </member>
        <member name="P:Fungus.SaveHistory.NumSavePoints">
            <summary>
            Returns the number of Save Points in the Save History.
            </summary>
        </member>
        <member name="P:Fungus.SaveHistory.NumRewoundSavePoints">
            <summary>
            Returns the current number of rewound Save Points in the Save History.
            </summary>
        </member>
        <member name="M:Fungus.SaveHistory.AddSavePoint(System.String,System.String)">
            <summary>
            Creates a new Save Point using a key and description, and adds it to the Save History.
            </summary>
        </member>
        <member name="M:Fungus.SaveHistory.Rewind">
            <summary>
            Rewinds to the previous Save Point in the Save History.
            The latest Save Point is moved to a seperate list of rewound save points.
            </summary>
        </member>
        <member name="M:Fungus.SaveHistory.FastForward">
            <summary>
            Fast forwards to the next Save Point in the Save History.
            The most recently rewound Save Point is moved back to the main list of save points.
            </summary>
        </member>
        <member name="M:Fungus.SaveHistory.LoadLatestSavePoint">
            <summary>
            Loads the latest Save Point.
            </summary>
        </member>
        <member name="M:Fungus.SaveHistory.Clear">
            <summary>
            Clears all Save Points.
            </summary>
        </member>
        <member name="M:Fungus.SaveHistory.ClearRewoundSavePoints">
            <summary>
            Clears rewound Save Points only. The main Save Point list is not changed.
            </summary>
        </member>
        <member name="T:Fungus.SavePointData">
            <summary>
            Serializable container for a Save Point's data. 
            All data is stored as strings, and the only concrete game class it depends on is the SaveData component.
            </summary>
        </member>
        <member name="P:Fungus.SavePointData.SavePointKey">
            <summary>
            Gets or sets the unique key for the Save Point.
            </summary>
        </member>
        <member name="P:Fungus.SavePointData.SavePointDescription">
            <summary>
            Gets or sets the description for the Save Point.
            </summary>
        </member>
        <member name="P:Fungus.SavePointData.SceneName">
            <summary>
            Gets or sets the scene name associated with the Save Point.
            </summary>
        </member>
        <member name="P:Fungus.SavePointData.SaveDataItems">
            <summary>
            Gets the list of save data items.
            </summary>
            <value>The save data items.</value>
        </member>
        <member name="M:Fungus.SavePointData.Encode(System.String,System.String,System.String)">
            <summary>
            Encodes a new Save Point to data and converts it to JSON text format.
            </summary>
        </member>
        <member name="M:Fungus.SavePointData.Decode(System.String)">
            <summary>
            Decodes a Save Point from JSON text format and loads it.
            </summary>
        </member>
        <member name="T:Fungus.StringFormatter">
            <summary>
            Misc string formatting functions.
            </summary>
        </member>
        <member name="T:Fungus.TextTagParser">
            <summary>
            Parses a string for special Fungus text tags.
            </summary>
        </member>
        <member name="M:Fungus.TextTagParser.GetTagHelp">
            <summary>
            Returns a description of the supported tags.
            </summary>
        </member>
        <member name="M:Fungus.TextTagParser.Tokenize(System.String)">
            <summary>
            Processes a block of story text and converts it to a list of tokens.
            </summary>
        </member>
        <member name="T:Fungus.TokenType">
            <summary>
            Supported token types for use in Say / Write text.
            </summary>
        </member>
        <member name="F:Fungus.TokenType.Invalid">
            <summary> Invalid token type. </summary>
        </member>
        <member name="F:Fungus.TokenType.Words">
            <summary> A string of words. </summary>
        </member>
        <member name="F:Fungus.TokenType.BoldStart">
            <summary> b </summary>
        </member>
        <member name="F:Fungus.TokenType.BoldEnd">
            <summary> /b </summary>
        </member>
        <member name="F:Fungus.TokenType.ItalicStart">
            <summary> i </summary>
        </member>
        <member name="F:Fungus.TokenType.ItalicEnd">
            <summary> /i </summary>
        </member>
        <member name="F:Fungus.TokenType.ColorStart">
            <summary> color=red </summary>
        </member>
        <member name="F:Fungus.TokenType.ColorEnd">
            <summary> /color </summary>
        </member>
        <member name="F:Fungus.TokenType.SizeStart">
            <summary> size=20 </summary>
        </member>
        <member name="F:Fungus.TokenType.SizeEnd">
            <summary> /size </summary>
        </member>
        <member name="F:Fungus.TokenType.Wait">
            <summary> w, w=0.5 </summary>
        </member>
        <member name="F:Fungus.TokenType.WaitForInputNoClear">
            <summary> wi </summary>
        </member>
        <member name="F:Fungus.TokenType.WaitForInputAndClear">
            <summary> wc </summary>
        </member>
        <member name="F:Fungus.TokenType.WaitOnPunctuationStart">
            <summary> wp, wp=0.5 </summary>
        </member>
        <member name="F:Fungus.TokenType.WaitOnPunctuationEnd">
            <summary> /wp </summary>
        </member>
        <member name="F:Fungus.TokenType.Clear">
            <summary> c </summary>
        </member>
        <member name="F:Fungus.TokenType.SpeedStart">
            <summary> s, s=60 </summary>
        </member>
        <member name="F:Fungus.TokenType.SpeedEnd">
            <summary> /s </summary>
        </member>
        <member name="F:Fungus.TokenType.Exit">
            <summary> x </summary>
        </member>
        <member name="F:Fungus.TokenType.Message">
            <summary> m=MessageName </summary>
        </member>
        <member name="F:Fungus.TokenType.VerticalPunch">
            <summary> vpunch=0.5 </summary>
        </member>
        <member name="F:Fungus.TokenType.HorizontalPunch">
            <summary> hpunch=0.5 </summary>
        </member>
        <member name="F:Fungus.TokenType.Punch">
            <summary> punch=0.5 </summary>
        </member>
        <member name="F:Fungus.TokenType.Flash">
            <summary> flash=0.5 </summary>
        </member>
        <member name="F:Fungus.TokenType.Audio">
            <summary> audio=Sound </summary>
        </member>
        <member name="F:Fungus.TokenType.AudioLoop">
            <summary> audioloop=Sound </summary>
        </member>
        <member name="F:Fungus.TokenType.AudioPause">
            <summary> audiopause=Sound </summary>
        </member>
        <member name="F:Fungus.TokenType.AudioStop">
            <summary> audiostop=Sound </summary>
        </member>
        <member name="F:Fungus.TokenType.WaitForVoiceOver">
            <summary> wvo </summary>
        </member>
        <member name="T:Fungus.TextTagToken">
            <summary>
            Represents a token of story text. The text is broken into a list of tokens.
            </summary>
        </member>
        <member name="F:Fungus.TextTagToken.type">
            <summary>
            The type of the token.
            </summary>
        </member>
        <member name="F:Fungus.TextTagToken.paramList">
            <summary>
            List of comma separated parameters.
            </summary>
        </member>
        <member name="T:Fungus.AnimatorVariable">
            <summary>
            Animator variable type.
            </summary>
        </member>
        <member name="T:Fungus.AnimatorData">
            <summary>
            Container for an Animator variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.AudioSourceVariable">
            <summary>
            AudioSource variable type.
            </summary>
        </member>
        <member name="T:Fungus.AudioSourceData">
            <summary>
            Container for an AudioSource variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.BooleanVariable">
            <summary>
            Boolean variable type.
            </summary>
        </member>
        <member name="T:Fungus.BooleanData">
            <summary>
            Container for a Boolean variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.ColorVariable">
            <summary>
            Color variable type.
            </summary>
        </member>
        <member name="T:Fungus.ColorData">
            <summary>
            Container for a Color variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.FloatVariable">
            <summary>
            Float variable type.
            </summary>
        </member>
        <member name="T:Fungus.FloatData">
            <summary>
            Container for an float variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.GameObjectVariable">
            <summary>
            GameObject variable type.
            </summary>
        </member>
        <member name="T:Fungus.GameObjectData">
            <summary>
            Container for a GameObject variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.IntegerVariable">
            <summary>
            Integer variable type.
            </summary>
        </member>
        <member name="T:Fungus.IntegerData">
            <summary>
            Container for an integer variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.MaterialVariable">
            <summary>
            Material variable type.
            </summary>
        </member>
        <member name="T:Fungus.MaterialData">
            <summary>
            Container for a Material variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.ObjectVariable">
            <summary>
            Object variable type.
            </summary>
        </member>
        <member name="T:Fungus.ObjectData">
            <summary>
            Container for an Object variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.Rigidbody2DVariable">
            <summary>
            Rigidbody2D variable type.
            </summary>
        </member>
        <member name="T:Fungus.Rigidbody2DData">
            <summary>
            Container for a Rigidbody2D variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.SpriteVariable">
            <summary>
            Sprite variable type.
            </summary>
        </member>
        <member name="T:Fungus.SpriteData">
            <summary>
            Container for a Sprite variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.StringVariable">
            <summary>
            String variable type.
            </summary>
        </member>
        <member name="T:Fungus.StringData">
            <summary>
            Container for a string variable reference or constant value.
            Appears as a single line property in the inspector.
            For a multi-line property, use StringDataMulti.
            </summary>
        </member>
        <member name="T:Fungus.StringDataMulti">
            <summary>
            Container for a string variable reference or constant value.
            Appears as a multi-line property in the inspector.
            For a single-line property, use StringData.
            </summary>
        </member>
        <member name="T:Fungus.TextureVariable">
            <summary>
            Texture variable type.
            </summary>
        </member>
        <member name="T:Fungus.TextureData">
            <summary>
            Container for a Texture variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.TransformVariable">
            <summary>
            Transform variable type.
            </summary>
        </member>
        <member name="T:Fungus.TransformData">
            <summary>
            Container for a Transform variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.Vector2Variable">
            <summary>
            Vector2 variable type.
            </summary>
        </member>
        <member name="T:Fungus.Vector2Data">
            <summary>
            Container for a Vector2 variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.Vector3Variable">
            <summary>
            Vector3 variable type.
            </summary>
        </member>
        <member name="T:Fungus.Vector3Data">
            <summary>
            Container for a Vector3 variable reference or constant value.
            </summary>
        </member>
        <member name="T:Fungus.ExecuteHandler">
            <summary>
            Executes an LuaScript component in the same gameobject when a condition occurs.
            </summary>
        </member>
        <member name="P:Fungus.ExecuteHandler.ExecuteAfterTime">
            <summary>
            Execute after a period of time.
            </summary>
        </member>
        <member name="P:Fungus.ExecuteHandler.RepeatExecuteTime">
            <summary>
            Repeat execution after a period of time.
            </summary>
        </member>
        <member name="P:Fungus.ExecuteHandler.RepeatEveryTime">
            <summary>
            Repeat forever.
            </summary>
        </member>
        <member name="P:Fungus.ExecuteHandler.ExecuteAfterFrames">
            <summary>
            Execute after a number of frames have elapsed.
            </summary>
        </member>
        <member name="P:Fungus.ExecuteHandler.RepeatExecuteFrame">
            <summary>
            Repeat execution after a number of frames have elapsed.
            </summary>
        </member>
        <member name="P:Fungus.ExecuteHandler.RepeatEveryFrame">
            <summary>
            Execute on every frame.
            </summary>
        </member>
        <member name="P:Fungus.ExecuteHandler.ExecuteMethods">
            <summary>
            The bitmask for the currently selected execution methods.
            </summary>
        </member>
        <member name="M:Fungus.ExecuteHandler.IsExecuteMethodSelected(Fungus.ExecuteMethod)">
            <summary>
            Returns true if the specified execute method option has been enabled.
            </summary>
        </member>
        <member name="M:Fungus.ExecuteHandler.Execute">
            <summary>
            Execute the Lua script immediately.
            This is the function to call if you want to trigger execution from an external script.
            </summary>
        </member>
        <member name="T:Fungus.InfoText">
            <summary>
            Displays information text at the top left of the screen.
            </summary>
        </member>
        <member name="T:Fungus.BoundObject">
            <summary>
            Represents a single Unity object (+ optional component) bound to a string key.
            </summary>
        </member>
        <member name="T:Fungus.LuaBindingsBase">
            <summary>
            Base class for a component which registers Lua Bindings.
            When the Lua Environment initialises, it finds all components in the scene that inherit
            from LuaBindingsBase and calls them to add their bindings.
            </summary>
        </member>
        <member name="M:Fungus.LuaBindingsBase.AddBindings(Fungus.LuaEnvironment)">
            <summary>
            Adds the required bindings to the Lua environment.
            </summary>
        </member>
        <member name="P:Fungus.LuaBindingsBase.BoundObjects">
            <summary>
            Returns a list of the object that will be bound to the Lua environment.
            </summary>
        </member>
        <member name="T:Fungus.LuaBindings">
            <summary>
            Component which manages a list of bound objects to be accessed in Lua scripts.
            </summary>
        </member>
        <member name="M:Fungus.LuaBindings.AddBindings(Fungus.LuaEnvironment)">
            <summary>
            Add all declared bindings to the globals table.
            </summary>
        </member>
        <member name="P:Fungus.LuaBindings.BoundObjects">
            <summary>
            The list of objects to be bound to Lua.
            </summary>
        </member>
        <member name="T:Fungus.LuaEnvironment">
            <summary>
            Wrapper for a MoonSharp Lua Script instance.
            A debug server is started automatically when running in the Unity Editor. Use VS Code to debug Lua scripts.
            </summary>
        </member>
        <member name="F:Fungus.LuaEnvironment.interpreter">
            <summary>
            The MoonSharp interpreter instance.
            </summary>
        </member>
        <member name="F:Fungus.LuaEnvironment.initialised">
            <summary>
            Flag used to avoid startup dependency issues.
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironment.OnDestroy">
            <summary>
            Detach the MoonSharp script from the debugger.
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironment.InitLuaScriptFiles">
            <summary>
            Register all Lua files in the project so they can be accessed at runtime.
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironment.RunLuaCoroutine(MoonSharp.Interpreter.Closure,System.Action{MoonSharp.Interpreter.DynValue})">
            <summary>
            A Unity coroutine method which updates a Lua coroutine each frame.
            <param name="closure">A MoonSharp closure object representing a function.</param>
            <param name="onComplete">A delegate method that is called when the coroutine completes. Includes return parameter.</param>
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironment.RunUnityCoroutineImpl(System.Collections.IEnumerator)">
            <summary>
            Starts a standard Unity coroutine.
            The coroutine is managed by the LuaEnvironment monobehavior, so you can call StopAllCoroutines to
            stop all active coroutines later.
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironment.LogException(System.String,System.String)">
            <summary>
            Writes a MoonSharp exception to the debug log in a helpful format.
            </summary>
            <param name="decoratedMessage">Decorated message from a MoonSharp exception</param>
            <param name="debugInfo">Debug info, usually the Lua script that was running.</param>
        </member>
        <member name="P:Fungus.LuaEnvironment.DebugServer">
            <summary>
            Instance of VS Code debug server when debugging option is enabled.
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironment.GetLua">
            <summary>
            Returns the first Lua Environment found in the scene, or creates one if none exists.
            This is a slow operation, call it once at startup and cache the returned value.
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironment.RegisterType(System.String,System.Boolean)">
            <summary>
            Register a type given it's assembly qualified name.
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironment.RunUnityCoroutine(System.Collections.IEnumerator)">
            <summary>
            Start a Unity coroutine from a Lua call.
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironment.InitEnvironment">
            <summary>
            Initialise the Lua interpreter so we can start running Lua code.
            </summary>
        </member>
        <member name="P:Fungus.LuaEnvironment.Interpreter">
            <summary>
            The MoonSharp interpreter instance used to run Lua code.
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironment.LoadLuaFunction(System.String,System.String)">
            <summary>
            Loads and compiles a string containing Lua script, returning a closure (Lua function) which can be executed later.
            <param name="luaString">The Lua code to be run.</param>
            <param name="friendlyName">A descriptive name to be used in error reports.</param>
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironment.RunLuaFunction(MoonSharp.Interpreter.Closure,System.Boolean,System.Action{MoonSharp.Interpreter.DynValue})">
            <summary>
            Load and run a previously compiled Lua script. May be run as a coroutine.
            <param name="fn">A previously compiled Lua function.</param>
            <param name="runAsCoroutine">Run the Lua code as a coroutine to support asynchronous operations.</param>
            <param name="onComplete">Method to callback when the Lua code finishes exection. Supports return parameters.</param>
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironment.DoLuaString(System.String,System.String,System.Boolean,System.Action{MoonSharp.Interpreter.DynValue})">
            <summary>
            Load and run a string containing Lua script. May be run as a coroutine.
            <param name="luaString">The Lua code to be run.</param>
            <param name="friendlyName">A descriptive name to be used in error reports.</param>
            <param name="runAsCoroutine">Run the Lua code as a coroutine to support asynchronous operations.</param>
            <param name="onComplete">Method to callback when the Lua code finishes exection. Supports return parameters.</param>
            </summary>
        </member>
        <member name="T:Fungus.LuaEnvironmentInitializer">
            <summary>
            Helper class used to extend the initialization behavior of LuaEnvironment.
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironmentInitializer.Initialize">
            <summary>
            Called when the LuaEnvironment is initializing.
            </summary>
        </member>
        <member name="M:Fungus.LuaEnvironmentInitializer.PreprocessScript(System.String)">
            <summary>
            Applies transformations to the input script prior to execution.
            </summary>
        </member>
        <member name="T:Fungus.LuaScript">
            <summary>
            Executes Lua script defined in a string property or in an external file.
            </summary>
        </member>
        <member name="F:Fungus.LuaScript.luaEnvironment">
            <summary>
            The Lua Environment to use when executing Lua script.
            </summary>
        </member>
        <member name="F:Fungus.LuaScript.luaFile">
            <summary>
            Text file containing Lua script to be executed.
            </summary>
        </member>
        <member name="F:Fungus.LuaScript.luaScript">
            <summary>
            Lua script to execute.
            </summary>
        </member>
        <member name="F:Fungus.LuaScript.runAsCoroutine">
            <summary>
            Run the script as a Lua coroutine so execution can be yielded for asynchronous operations.
            </summary>
        </member>
        <member name="M:Fungus.LuaScript.InitLuaScript">
            <summary>
            Initialises the Lua environment and compiles the Lua string for execution later on.
            </summary>
        </member>
        <member name="M:Fungus.LuaScript.GetLuaString">
            <summary>
            Returns the Lua string to be executed. 
            This is the contents of the Lua script appended to the contents of the Lua file.
            </summary>
            <returns>The lua string.</returns>
        </member>
        <member name="M:Fungus.LuaScript.OnExecute">
            <summary>
            Execute the Lua script.
            This is the function to call if you want to trigger execution from an external script.
            </summary>
        </member>
        <member name="T:Fungus.LuaStore">
            <summary>
            Wrapper for a prime Lua table that persists across scene loads. 
            This is useful for transferring values from one scene to another. One one LuaStore component may exist 
            in a scene at a time.
            </summary>
        </member>
        <member name="M:Fungus.LuaStore.Init">
            <summary>
            Initialize the LuaStore component.
            This component behaves somewhat like a singleton in that only one instance
            is permitted in the application which persists until shutdown.
            </summary>
        </member>
        <member name="P:Fungus.LuaStore.PrimeTable">
            <summary>
            A Lua table that can be shared between multiple LuaEnvironments.
            </summary>
        </member>
        <member name="T:Fungus.FungusModuleOptions">
            <summary>
            Options for using the Lua FungusModule.
            </summary>
        </member>
        <member name="T:Fungus.LuaUtils">
            <summary>
            A collection of utilites to use in Lua for common Unity / Fungus tasks.
            </summary>
        </member>
        <member name="F:Fungus.LuaUtils.stringTables">
            <summary>
            Lua script file which defines the global string table used for localisation.
            </summary>
        </member>
        <member name="F:Fungus.LuaUtils.registerTypes">
            <summary>
            JSON text files listing the c# types that can be accessed from Lua.
            </summary>
        </member>
        <member name="F:Fungus.LuaUtils.initialised">
            <summary>
            Flag used to avoid startup dependency issues.
            </summary>
        </member>
        <member name="F:Fungus.LuaUtils.stringTable">
            <summary>
            Cached reference to the string table (if loaded).
            </summary>
        </member>
        <member name="P:Fungus.LuaUtils.luaEnvironment">
            <summary>
            Cached reference to the Lua Environment component.
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.InitTypes">
            <summary>
            Registers all listed c# types for interop with Lua.
            You can also register types directly in the Awake method of any 
            monobehavior in your scene using UserData.RegisterType().
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.InitBindings">
            <summary>
            Binds all gameobjects and components defined in LuaBindings components to LuaEnvironments.
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.InitFungusModule">
            <summary>
            Register some commonly used Unity classes and objects for Lua interop.
            To register more class objects externally to this class, register them in the Awake method of any 
            monobehavior in your scene.
            </summary>
        </member>
        <member name="P:Fungus.LuaUtils.ActiveLanguage">
            <summary>
            The currently selected language in the string table. Affects variable substitution.
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.GetString(System.String)">
            <summary>
            Returns a string from the string table for this key.
            The string returned depends on the active language.
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.SubstituteStrings(System.Text.StringBuilder)">
            <summary>
            Implementation of StringSubstituter.ISubstitutionHandler
            Substitutes specially formatted tokens in the text with global variables and string table values.
            The string table value used depends on the currently loaded string table and active language.
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.Substitute(System.String)">
            <summary>
            Performs string substitution on the input string, replacing tokens of the form {$VarName} with 
            matching variables, localised strings, etc. in the scene.
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.Find(System.String)">
            <summary>
            Find a game object by name and returns it.
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.FindWithTag(System.String)">
            <summary>
            Returns one active GameObject tagged tag. Returns null if no GameObject was found.
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.FindGameObjectsWithTag(System.String)">
            <summary>
            Returns a list of active GameObjects tagged tag. Returns empty array if no GameObject was found.
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.Instantiate(UnityEngine.GameObject)">
            <summary>
            Create a copy of a GameObject.
            Can be used to instantiate prefabs.
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.Destroy(UnityEngine.GameObject)">
            <summary>
            Destroys an instance of a GameObject.
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.Spawn(System.String)">
            <summary>
            Spawns an instance of a named prefab resource.
            The prefab must exist in a Resources folder in the project.
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.DoConversation(System.String)">
            <summary>
            Use the conversation manager to play out a conversation
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.SetSayDialog(Fungus.SayDialog)">
            <summary>
            Sync the active say dialog with what Lua thinks the SayDialog should be
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.GetSayDialog">
            <summary>
            Returns the current say dialog.
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.SetMenuDialog(Fungus.MenuDialog)">
            <summary>
            Sync the active menu dialog with what Lua things the MenuDialog should be
            </summary>
        </member>
        <member name="M:Fungus.LuaUtils.GetMenuDialog">
            <summary>
            Returns the current menu dialog
            </summary>
        </member>
        <member name="P:Fungus.IExecuteHandlerConfigurator.UpdateExecuteStartOnFrame">
            <summary>
            If the assertion is evaluated in Update, after how many frame should the evaluation start. Defult is 1 (first frame)
            </summary>
        </member>
        <member name="P:Fungus.IExecuteHandlerConfigurator.UpdateExecuteRepeatFrequency">
            <summary>
            If the assertion is evaluated in Update and UpdateExecuteRepeat is true, how many frame should pass between evaluations
            </summary>
        </member>
        <member name="P:Fungus.IExecuteHandlerConfigurator.UpdateExecuteRepeat">
            <summary>
            If the assertion is evaluated in Update, should the evaluation be repeated after UpdateExecuteRepeatFrequency frames
            </summary>
        </member>
        <member name="P:Fungus.IExecuteHandlerConfigurator.TimeExecuteStartAfter">
            <summary>
            If the assertion is evaluated after a period of time, after how many seconds the first evaluation should be done
            </summary>
        </member>
        <member name="P:Fungus.IExecuteHandlerConfigurator.TimeExecuteRepeatFrequency">
            <summary>
            If the assertion is evaluated after a period of time and TimeExecuteRepeat is true, after how many seconds should the next evaluation happen
            </summary>
        </member>
        <member name="P:Fungus.IExecuteHandlerConfigurator.TimeExecuteRepeat">
            <summary>
            If the assertion is evaluated after a period, should the evaluation happen again after TimeExecuteRepeatFrequency seconds
            </summary>
        </member>
        <member name="P:Fungus.IExecuteHandlerConfigurator.Component">
            <summary>
            Returns the ExecuteHandler component.
            </summary>
        </member>
        <member name="T:Fungus.IStringSubstituter">
            <summary>
            Replaces special tokens in a string with substituted values (typically variables or localisation strings).
            </summary>
        </member>
        <member name="P:Fungus.IStringSubstituter._StringBuilder">
            <summary>
            The internal StringBuilder object used to perform string substitution.
            This is exposed publicly to allow for optimized string manipulation in client code.
            </summary>
        </member>
        <member name="M:Fungus.IStringSubstituter.SubstituteStrings(System.String)">
            <summary>
            Returns a new string that has been processed by all substitution handlers in the scene.
            </summary>
        </member>
        <member name="M:Fungus.IStringSubstituter.SubstituteStrings(System.Text.StringBuilder)">
            <summary>
            Returns a new string that has been processed by all substitution handlers in the scene.
            </summary>
        </member>
        <member name="T:Fungus.ISubstitutionHandler">
            <summary>
            Interface for components that support substituting strings.
            </summary>
        </member>
        <member name="M:Fungus.ISubstitutionHandler.SubstituteStrings(System.Text.StringBuilder)">
            <summary>
            Modifies a StringBuilder so that tokens are replaced by subsituted values.
            It's up to clients how to implement substitution but the convention looks like:
            "Hi {$VarName}" => "Hi John" where VarName == "John"
            </summary>
            <returns>True if the input was modified</returns>
        </member>
        <member name="T:Fungus.FungusPrefs">
            <summary>
            Wrapper class for PlayerPrefs that adds the concept of multiple save slots.
            Save slots allow you to store multiple player save profiles.
            </summary>
        </member>
        <member name="M:Fungus.FungusPrefs.DeleteAll">
            <summary>
            Deletes all saved values for all slots.
            </summary>
        </member>
        <member name="M:Fungus.FungusPrefs.DeleteKey(System.Int32,System.String)">
            <summary>
            Removes key and its value from this save slot.
            </summary>
        </member>
        <member name="M:Fungus.FungusPrefs.GetFloat(System.Int32,System.String,System.Single)">
            <summary>
            Returns the float value associated with this key in this save slot, it it exists.
            </summary>
        </member>
        <member name="M:Fungus.FungusPrefs.GetInt(System.Int32,System.String,System.Int32)">
            <summary>
            Returns the int value associated with this key in this save slot, it it exists.
            </summary>
        </member>
        <member name="M:Fungus.FungusPrefs.GetString(System.Int32,System.String,System.String)">
            <summary>
            Returns the string value associated with this key in this save slot, it it exists.
            </summary>
        </member>
        <member name="M:Fungus.FungusPrefs.HasKey(System.Int32,System.String)">
            <summary>
            Returns true if the key exists in this save slot.
            </summary>
        </member>
        <member name="M:Fungus.FungusPrefs.Save">
            <summary>
            Writes all modified prefences to disk.
            </summary>
        </member>
        <member name="M:Fungus.FungusPrefs.SetFloat(System.Int32,System.String,System.Single)">
            <summary>
            Sets the value of the preference identified by key for this save slot.
            </summary>
        </member>
        <member name="M:Fungus.FungusPrefs.SetInt(System.Int32,System.String,System.Int32)">
            <summary>
            Sets the value of the preference identified by key for this save slot.
            </summary>
        </member>
        <member name="M:Fungus.FungusPrefs.SetString(System.Int32,System.String,System.String)">
            <summary>
            Sets the value of the preference identified by key for this save slot.
            </summary>
        </member>
        <member name="M:Fungus.FungusPrefs.GetSlotKey(System.Int32,System.String)">
            <summary>
            Returns the combined key used to identify a key within a save slot.
            </summary>
        </member>
        <member name="T:Fungus.LuaScriptLoader">
            <summary>
            Custom file loader for MoonSharp that loads in all Lua scripts in the project.
            Scripts must be placed in a Resources/Lua directory.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Fungus.LuaScriptLoader.ResolveModuleName(System.String,System.String[])" -->
        <!-- Badly formed XML comment ignored for member "T:Fungus.PODTypeFactory" -->
        <member name="M:Fungus.PODTypeFactory.color(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a new Color object.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:Fungus.PODTypeFactory.vector2(System.Single,System.Single)">
            <summary>
            Returns a new Vector2 object.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Fungus.PODTypeFactory.vector3(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new Vector3 object.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
        </member>
        <member name="M:Fungus.PODTypeFactory.vector4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a new Vector4 object.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
            <param name="w">The w coordinate.</param>
        </member>
        <member name="M:Fungus.PODTypeFactory.quaternion(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new Quaternion object representing a rotation.
            </summary>
            <param name="x">The x rotation in degrees.</param>
            <param name="y">The y rotation in degrees.</param>
            <param name="z">The z rotation in degrees.</param>
        </member>
        <member name="M:Fungus.PODTypeFactory.rect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a new Rect object.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">The rectangle width.</param>
            <param name="height">The rectangle height.</param>
        </member>
        <member name="T:Fungus.StringSubstituter">
            <summary>
            Replaces special tokens in a string with substituted values (typically variables or localisation strings).
            </summary>
        </member>
        <member name="F:Fungus.StringSubstituter.stringBuilder">
            <summary>
            The StringBuilder instance used to substitute strings optimally.
            </summary>
        </member>
        <member name="M:Fungus.StringSubstituter.#ctor(System.Int32)">
            <summary>
            Constructor which caches all components in the scene that implement ISubstitutionHandler.
            <param name="recursionDepth">Number of levels of recursively embedded keys to resolve.</param>
            </summary>
        </member>
        <member name="M:Fungus.JSONObject.Create(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a JSONObject by parsing string data
            </summary>
            <param name="val">The string to be parsed</param>
            <param name="maxDepth">The maximum depth for the parser to search.  Set this to to 1 for the first level, 
            2 for the first 2 levels, etc.  It defaults to -2 because -1 is the depth value that is parsed (see below)</param>
            <param name="storeExcessLevels">Whether to store levels beyond maxDepth in baked JSONObjects</param>
            <param name="strict">Whether to be strict in the parsing. For example, non-strict parsing will successfully 
            parse "a string" into a string-type </param>
            <returns></returns>
        </member>
        <member name="M:Fungus.JSONObject.Copy">
            <summary>
            Copy a JSONObject. This could probably work better
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fungus.JSONObject.MergeRecur(Fungus.JSONObject,Fungus.JSONObject)">
            <summary>
            Merge object right into left recursively
            </summary>
            <param name="left">The left (base) object</param>
            <param name="right">The right (new) object</param>
        </member>
        <member name="T:Fungus.Task">
            A Task object represents a coroutine.  Tasks can be started, paused, and stopped.
            It is an error to attempt to start a task that has been stopped or which has
            naturally terminated.
        </member>
        <member name="P:Fungus.Task.Running">
            Returns true if and only if the coroutine is running.  Paused tasks
            are considered to be running.
        </member>
        <member name="P:Fungus.Task.Paused">
            Returns true if and only if the coroutine is currently paused.
        </member>
        <member name="T:Fungus.Task.FinishedHandler">
            Delegate for termination subscribers.  manual is true if and only if
            the coroutine was stopped with an explicit call to Stop().
        </member>
        <member name="E:Fungus.Task.Finished">
            Termination event.  Triggered when the coroutine completes execution.
        </member>
        <member name="M:Fungus.Task.#ctor(System.Collections.IEnumerator,System.Boolean)">
             Creates a new Task object for the given coroutine.
            
             If autoStart is true (default) the task is automatically started
             upon construction.
        </member>
        <member name="M:Fungus.Task.Start">
            Begins execution of the coroutine
        </member>
        <member name="M:Fungus.Task.Stop">
            Discontinues execution of the coroutine at its next yield.
        </member>
        <member name="T:Fungus.iTween">
            <summary>
            <para>Version: 2.0.46</para>	 
            <para>Author: Bob Berkebile (http://pixelplacement.com)</para>
            <para>Support: http://itween.pixelplacement.com</para>
            </summary>
        </member>
        <member name="T:Fungus.iTween.EaseType">
            <summary>
            The type of easing to use based on Robert Penner's open source easing equations (http://www.robertpenner.com/easing_terms_of_use.html).
            </summary>
        </member>
        <member name="T:Fungus.iTween.LoopType">
            <summary>
            The type of loop (if any) to use.  
            </summary>
        </member>
        <member name="F:Fungus.iTween.LoopType.none">
            <summary>
            Do not loop.
            </summary>
        </member>
        <member name="F:Fungus.iTween.LoopType.loop">
            <summary>
            Rewind and replay.
            </summary>
        </member>
        <member name="F:Fungus.iTween.LoopType.pingPong">
            <summary>
            Ping pong the animation back and forth.
            </summary>
        </member>
        <member name="T:Fungus.iTween.NamedValueColor">
            <summary>
            Many shaders use more than one color. Use can have iTween's Color methods operate on them by name.   
            </summary>
        </member>
        <member name="F:Fungus.iTween.NamedValueColor._Color">
            <summary>
            The main color of a material. Used by default and not required for Color methods to work in iTween.
            </summary>
        </member>
        <member name="F:Fungus.iTween.NamedValueColor._SpecColor">
            <summary>
            The specular color of a material (used in specular/glossy/vertexlit shaders).
            </summary>
        </member>
        <member name="F:Fungus.iTween.NamedValueColor._Emission">
            <summary>
            The emissive color of a material (used in vertexlit shaders).
            </summary>
        </member>
        <member name="F:Fungus.iTween.NamedValueColor._ReflectColor">
            <summary>
            The reflection color of the material (used in reflective shaders).
            </summary>
        </member>
        <member name="T:Fungus.iTween.Defaults">
            <summary>
            A collection of baseline presets that iTween needs and utilizes if certain parameters are not provided. 
            </summary>
        </member>
        <member name="M:Fungus.iTween.Init(UnityEngine.GameObject)">
            <summary>
            Sets up a GameObject to avoid hiccups when an initial iTween is added. It's advisable to run this on every object you intend to run iTween on in its Start or Awake.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target to be initialized for iTween.
            </param>
        </member>
        <member name="M:Fungus.iTween.CameraFadeFrom(System.Single,System.Single)">
            <summary>
            Instantly changes the amount(transparency) of a camera fade and then returns it back over time with MINIMUM customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.CameraFadeFrom(System.Collections.Hashtable)">
            <summary>
            Instantly changes the amount(transparency) of a camera fade and then returns it back over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.CameraFadeTo(System.Single,System.Single)">
            <summary>
            Changes the amount(transparency) of a camera fade over time with MINIMUM customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.CameraFadeTo(System.Collections.Hashtable)">
            <summary>
            Changes the amount(transparency) of a camera fade over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.ValueTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Returns a value to an 'oncallback' method interpolated between the supplied 'from' and 'to' values for application as desired.  Requires an 'onupdate' callback that accepts the same type as the supplied 'from' and 'to' properties.
            </summary>
            <param name="from">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> or <see cref="T:UnityEngine.Vector3"/> or <see cref="T:UnityEngine.Vector2"/> or <see cref="T:UnityEngine.Color"/> or <see cref="T:UnityEngine.Rect"/> for the starting value.
            </param> 
            <param name="to">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> or <see cref="T:UnityEngine.Vector3"/> or <see cref="T:UnityEngine.Vector2"/> or <see cref="T:UnityEngine.Color"/> or <see cref="T:UnityEngine.Rect"/> for the ending value.
            </param> 
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed (only works with Vector2, Vector3, and Floats)
            </param>	
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.FadeFrom(UnityEngine.GameObject,System.Single,System.Single)">
            <summary>
            Changes a GameObject's alpha value instantly then returns it to the provided alpha over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorFrom and using the "a" parameter. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="alpha">
            A <see cref="T:System.Single"/> for the final alpha value of the animation.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.FadeFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's alpha value instantly then returns it to the provided alpha over time with FULL customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorFrom and using the "a" parameter.
            </summary>
            <param name="alpha">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the initial alpha value of the animation.
            </param>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the initial alpha value of the animation.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.FadeTo(UnityEngine.GameObject,System.Single,System.Single)">
            <summary>
            Changes a GameObject's alpha value over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorTo and using the "a" parameter.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="alpha">
            A <see cref="T:System.Single"/> for the final alpha value of the animation.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.FadeTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's alpha value over time with FULL customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorTo and using the "a" parameter.
            </summary>
            <param name="alpha">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the final alpha value of the animation.
            </param>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the final alpha value of the animation.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.ColorFrom(UnityEngine.GameObject,UnityEngine.Color,System.Single)">
            <summary>
            Changes a GameObject's color values instantly then returns them to the provided properties over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.ColorFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's color values instantly then returns them to the provided properties over time with FULL customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation.
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="r">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color red.
            </param>
            <param name="g">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="b">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="a">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the alpha.
            </param> 
            <param name="namedcolorvalue">
            A <see cref="!:NamedColorValue"/> or <see cref="T:System.String"/> for the individual setting of the alpha.
            </param> 
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.ColorTo(UnityEngine.GameObject,UnityEngine.Color,System.Single)">
            <summary>
            Changes a GameObject's color values over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, they will become the target of the animation.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.ColorTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's color values over time with FULL customization options.  If a GUIText or GUITexture component is attached, they will become the target of the animation.
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="r">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color red.
            </param>
            <param name="g">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="b">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="a">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the alpha.
            </param> 
            <param name="namedcolorvalue">
            A <see cref="!:NamedColorValue"/> or <see cref="T:System.String"/> for the individual setting of the alpha.
            </param> 
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.AudioFrom(UnityEngine.GameObject,System.Single,System.Single,System.Single)">
            <summary>
            Instantly changes an AudioSource's volume and pitch then returns it to it's starting volume and pitch over time with MINIMUM customization options. Default AudioSource attached to GameObject will be used (if one exists) if not supplied.
            </summary>
            <param name="target"> 
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation which holds the AudioSource to be changed.
            </param>
            <param name="volume"> for the target level of volume.
            A <see cref="T:System.Single"/>
            </param>
            <param name="pitch"> for the target pitch.
            A <see cref="T:System.Single"/>
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.AudioFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes an AudioSource's volume and pitch then returns it to it's starting volume and pitch over time with FULL customization options. Default AudioSource attached to GameObject will be used (if one exists) if not supplied. 
            </summary>
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource"/> for which AudioSource to use.
            </param> 
            <param name="volume">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.AudioTo(UnityEngine.GameObject,System.Single,System.Single,System.Single)">
            <summary>
            Fades volume and pitch of an AudioSource with MINIMUM customization options.  Default AudioSource attached to GameObject will be used (if one exists) if not supplied. 
            </summary>
            <param name="target"> 
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation which holds the AudioSource to be changed.
            </param>
            <param name="volume"> for the target level of volume.
            A <see cref="T:System.Single"/>
            </param>
            <param name="pitch"> for the target pitch.
            A <see cref="T:System.Single"/>
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.AudioTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Fades volume and pitch of an AudioSource with FULL customization options.  Default AudioSource attached to GameObject will be used (if one exists) if not supplied. 
            </summary>
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource"/> for which AudioSource to use.
            </param> 
            <param name="volume">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.Stab(UnityEngine.GameObject,UnityEngine.AudioClip,System.Single)">
            <summary>
            Plays an AudioClip once based on supplied volume and pitch and following any delay with MINIMUM customization options. AudioSource is optional as iTween will provide one.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation which holds the AudioSource to be utilized.
            </param>
            <param name="audioclip">
            A <see cref="T:UnityEngine.AudioClip"/> for a reference to the AudioClip to be played.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> for the time in seconds the action will wait before beginning.
            </param>
        </member>
        <member name="M:Fungus.iTween.Stab(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Plays an AudioClip once based on supplied volume and pitch and following any delay with FULL customization options. AudioSource is optional as iTween will provide one.
            </summary>
            <param name="audioclip">
            A <see cref="T:UnityEngine.AudioClip"/> for a reference to the AudioClip to be played.
            </param> 
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource"/> for which AudioSource to use
            </param> 
            <param name="volume">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target pitch.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the action will wait before beginning.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.LookFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly rotates a GameObject to look at the supplied Vector3 then returns it to it's starting rotation over time with MINIMUM customization options. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> to be the Vector3 that the target will look towards.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.LookFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly rotates a GameObject to look at a supplied Transform or Vector3 then returns it to it's starting rotation over time with FULL customization options. 
            </summary>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a target the GameObject will look at.
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.LookTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Rotates a GameObject to look at the supplied Vector3 over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> to be the Vector3 that the target will look towards.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.LookTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Rotates a GameObject to look at a supplied Transform or Vector3 over time with FULL customization options.
            </summary>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a target the GameObject will look at.
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.MoveTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Changes a GameObject's position over time to a supplied destination with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="position">
            A <see cref="T:UnityEngine.Vector3"/> for the destination Vector3.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.MoveTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's position over time to a supplied destination with FULL customization options.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a point in space the GameObject will animate to.
            </param>
            <param name="path">
            A <see cref="!:Transform[]"/> or <see cref="!:Vector3[]"/> for a list of points to draw a Catmull-Rom through for a curved animation path.
            </param>
            <param name="movetopath">
            A <see cref="T:System.Boolean"/> for whether to automatically generate a curve from the GameObject's current position to the beginning of the path. True by default.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="lookahead">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how much of a percentage to look ahead on a path to influence how strict "orientopath" is.
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.MoveFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly changes a GameObject's position to a supplied destination then returns it to it's starting position over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="position">
            A <see cref="T:UnityEngine.Vector3"/> for the destination Vector3.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.MoveFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes a GameObject's position to a supplied destination then returns it to it's starting position over time with FULL customization options.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a point in space the GameObject will animate to.
            </param>
            <param name="path">
            A <see cref="!:Transform[]"/> or <see cref="!:Vector3[]"/> for a list of points to draw a Catmull-Rom through for a curved animation path.
            </param>
            <param name="movetopath">
            A <see cref="T:System.Boolean"/> for whether to automatically generate a curve from the GameObject's current position to the beginning of the path. True by default.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="lookahead">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how much of a percentage to look ahead on a path to influence how strict "orientopath" is.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.MoveAdd(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Translates a GameObject's position over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of change in position to move the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.MoveAdd(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Translates a GameObject's position over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of change in position to move the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> or <see cref="T:System.String"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.MoveBy(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Adds the supplied coordinates to a GameObject's postion with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of change in position to move the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.MoveBy(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Adds the supplied coordinates to a GameObject's position with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of change in position to move the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> or <see cref="T:System.String"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.ScaleTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Changes a GameObject's scale over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="scale">
            A <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.ScaleTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="scale">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.ScaleFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly changes a GameObject's scale then returns it to it's starting scale over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="scale">
            A <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.ScaleFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes a GameObject's scale then returns it to it's starting scale over time with FULL customization options.
            </summary>
            <param name="scale">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.ScaleAdd(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Adds to a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of scale to be added to the GameObject's current scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.ScaleAdd(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Adds to a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount to be added to the GameObject's current scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.ScaleBy(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Multiplies a GameObject's scale over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of scale to be multiplied by the GameObject's current scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.ScaleBy(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Multiplies a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount to be multiplied to the GameObject's current scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.RotateTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Rotates a GameObject to the supplied Euler angles in degrees over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="rotation">
            A <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.RotateTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Rotates a GameObject to the supplied Euler angles in degrees over time with FULL customization options.
            </summary>
            <param name="rotation">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.RotateFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly changes a GameObject's Euler angles in degrees then returns it to it's starting rotation over time (if allowed) with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="rotation">
            A <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate from.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.RotateFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes a GameObject's Euler angles in degrees then returns it to it's starting rotation over time (if allowed) with FULL customization options.
            </summary>
            <param name="rotation">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.RotateAdd(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Adds supplied Euler angles in degrees to a GameObject's rotation over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of Euler angles in degrees to add to the current rotation of the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.RotateAdd(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Adds supplied Euler angles in degrees to a GameObject's rotation over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of Euler angles in degrees to add to the current rotation of the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> or <see cref="T:System.String"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.RotateBy(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Multiplies supplied values by 360 and rotates a GameObject by calculated amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount to be multiplied by 360 to rotate the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.RotateBy(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Multiplies supplied values by 360 and rotates a GameObject by calculated amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount to be multiplied by 360 to rotate the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> or <see cref="T:System.String"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:Fungus.iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.ShakePosition(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Randomly shakes a GameObject's position by a diminishing amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.ShakePosition(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Randomly shakes a GameObject's position by a diminishing amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>  
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with shakes)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.ShakeScale(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Randomly shakes a GameObject's scale by a diminishing amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.ShakeScale(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Randomly shakes a GameObject's scale by a diminishing amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with shakes)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.ShakeRotation(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Randomly shakes a GameObject's rotation by a diminishing amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.ShakeRotation(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Randomly shakes a GameObject's rotation by a diminishing amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param> 
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with shakes)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.PunchPosition(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a jolt of force to a GameObject's position and wobbles it back to its initial position with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of the punch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.PunchPosition(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Applies a jolt of force to a GameObject's position and wobbles it back to its initial position with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param> 
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget".
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>   
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with punches)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.PunchRotation(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a jolt of force to a GameObject's rotation and wobbles it back to its initial rotation with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of the punch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.PunchRotation(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Applies a jolt of force to a GameObject's rotation and wobbles it back to its initial rotation with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param> 
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param> 
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with punches)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:Fungus.iTween.PunchScale(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a jolt of force to a GameObject's scale and wobbles it back to its initial scale with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of the punch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.PunchScale(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Applies a jolt of force to a GameObject's scale and wobbles it back to its initial scale with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param> 
            <param name="looptype">
            A <see cref="T:Fungus.iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with punches)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Fungus.iTween.RectUpdate(UnityEngine.Rect,UnityEngine.Rect,System.Single)" -->
        <member name="M:Fungus.iTween.Vector3Update(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Returns a Vector3 that is eased between a current and target value by the supplied speed.
            </summary>
            <returns>
            A <see cref="T:UnityEngine.Vector3"/>
            </returns>
            <param name='currentValue'>
            A <see cref="T:UnityEngine.Vector3"/> the starting or initial value
            </param>
            <param name='targetValue'>
            A <see cref="T:UnityEngine.Vector3"/> the target value that the current value will be eased to.
            </param>
            <param name='speed'>
            A <see cref="T:System.Single"/> to be used as rate of speed (larger number equals faster animation)
            </param>
        </member>
        <member name="M:Fungus.iTween.Vector2Update(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns a Vector2 that is eased between a current and target value by the supplied speed.
            </summary>
            <returns>
            A <see cref="T:UnityEngine.Vector2"/>
            </returns>
            <param name='currentValue'>
            A <see cref="T:UnityEngine.Vector2"/> the starting or initial value
            </param>
            <param name='targetValue'>
            A <see cref="T:UnityEngine.Vector2"/> the target value that the current value will be eased to.
            </param>
            <param name='speed'>
            A <see cref="T:System.Single"/> to be used as rate of speed (larger number equals faster animation)
            </param>
        </member>
        <member name="M:Fungus.iTween.FloatUpdate(System.Single,System.Single,System.Single)">
            <summary>
            Returns a float that is eased between a current and target value by the supplied speed.
            </summary>
            <returns>
            A <see cref="T:System.Single"/>
            </returns>
            <param name='currentValue'>
            A <see cref="T:System.Single"/> the starting or initial value
            </param>
            <param name='targetValue'>
            A <see cref="T:System.Single"/> the target value that the current value will be eased to.
            </param>
            <param name='speed'>
            A <see cref="T:System.Single"/> to be used as rate of speed (larger number equals faster animation)
            </param>
        </member>
        <member name="M:Fungus.iTween.FadeUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to FadeTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="alpha">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the final alpha value of the animation.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.FadeUpdate(UnityEngine.GameObject,System.Single,System.Single)">
            <summary>
            Similar to FadeTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="alpha">
            A <see cref="T:System.Single"/> for the final alpha value of the animation.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.ColorUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to ColorTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="r">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color red.
            </param>
            <param name="g">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="b">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="a">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the alpha.
            </param> 
            <param name="namedcolorvalue">
            A <see cref="!:NamedColorValue"/> or <see cref="T:System.String"/> for the individual setting of the alpha.
            </param> 
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.ColorUpdate(UnityEngine.GameObject,UnityEngine.Color,System.Single)">
            <summary>
            Similar to ColorTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.AudioUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to AudioTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource"/> for which AudioSource to use.
            </param> 
            <param name="volume">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.AudioUpdate(UnityEngine.GameObject,System.Single,System.Single,System.Single)">
            <summary>
            Similar to AudioTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="volume">
            A <see cref="T:System.Single"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.RotateUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to RotateTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="rotation">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param> 
        </member>
        <member name="M:Fungus.iTween.RotateUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to RotateTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="rotation">
            A <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.ScaleUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to ScaleTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options.  Does not utilize an EaseType. 
            </summary>
            <param name="scale">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param> 
        </member>
        <member name="M:Fungus.iTween.ScaleUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to ScaleTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options.  Does not utilize an EaseType.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="scale">
            A <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.MoveUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to MoveTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a point in space the GameObject will animate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param> 
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
        </member>
        <member name="M:Fungus.iTween.MoveUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to MoveTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="position">
            A <see cref="T:UnityEngine.Vector3"/> for a point in space the GameObject will animate to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.LookUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to LookTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a target the GameObject will look at.
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param> 
        </member>
        <member name="M:Fungus.iTween.LookUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to LookTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> for a target the GameObject will look at.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:Fungus.iTween.PathLength(UnityEngine.Transform[])">
            <summary>
            Returns the length of a curved path drawn through the provided array of Transforms.
            </summary>
            <returns>
            A <see cref="T:System.Single"/>
            </returns>
            <param name='path'>
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.PathLength(UnityEngine.Vector3[])">
            <summary>
            Returns the length of a curved path drawn through the provided array of Vector3s.
            </summary>
            <returns>
            The length.
            </returns>
            <param name='path'>
            A <see cref="!:Vector3[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.CameraTexture(UnityEngine.Color)">
            <summary>
            Creates and returns a full-screen Texture2D for use with CameraFade.
            </summary>
            <returns>
            Texture2D
            </returns>
            <param name='color'>
            Color
            </param>
        </member>
        <member name="M:Fungus.iTween.PutOnPath(UnityEngine.GameObject,UnityEngine.Vector3[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/>
            </param>
            <param name="path">
            A <see cref="!:Vector3[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.PutOnPath(UnityEngine.Transform,UnityEngine.Vector3[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.Transform"/>
            </param>
            <param name="path">
            A <see cref="!:Vector3[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.PutOnPath(UnityEngine.GameObject,UnityEngine.Transform[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/>
            </param>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.PutOnPath(UnityEngine.Transform,UnityEngine.Transform[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.Transform"/>
            </param>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.PointOnPath(UnityEngine.Transform[],System.Single)">
            <summary>
            Returns a Vector3 position on a path at the provided percentage  
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
            <returns>
            A <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:Fungus.iTween.DrawLine(UnityEngine.Vector3[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Vector3s.
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.DrawLine(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Vector3s.
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:Fungus.iTween.DrawLine(UnityEngine.Transform[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Transforms.
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.DrawLine(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Transforms.
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:Fungus.iTween.DrawLineGizmos(UnityEngine.Vector3[])">
            <summary>
            Draws a line through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.DrawLineGizmos(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:Fungus.iTween.DrawLineGizmos(UnityEngine.Transform[])">
            <summary>
            Draws a line through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.DrawLineGizmos(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:Fungus.iTween.DrawLineHandles(UnityEngine.Vector3[])">
            <summary>
            Draws a line through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.DrawLineHandles(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:Fungus.iTween.DrawLineHandles(UnityEngine.Transform[])">
            <summary>
            Draws a line through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.DrawLineHandles(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:Fungus.iTween.PointOnPath(UnityEngine.Vector3[],System.Single)">
            <summary>
            Returns a Vector3 position on a path at the provided percentage  
            </summary>
            <param name="path">
            A <see cref="!:Vector3[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
            <returns>
            A <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:Fungus.iTween.DrawPath(UnityEngine.Vector3[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Vector3s.
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.DrawPath(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Vector3s.
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:Fungus.iTween.DrawPath(UnityEngine.Transform[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Transforms.
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.DrawPath(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Transforms.
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:Fungus.iTween.DrawPathGizmos(UnityEngine.Vector3[])">
            <summary>
            Draws a curved path through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.DrawPathGizmos(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:Fungus.iTween.DrawPathGizmos(UnityEngine.Transform[])">
            <summary>
            Draws a curved path through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.DrawPathGizmos(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:Fungus.iTween.DrawPathHandles(UnityEngine.Vector3[])">
            <summary>
            Draws a curved path through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.DrawPathHandles(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:Fungus.iTween.DrawPathHandles(UnityEngine.Transform[])">
            <summary>
            Draws a curved path through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.DrawPathHandles(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:Fungus.iTween.CameraFadeDepth(System.Int32)">
            <summary>
            Changes a camera fade's texture.
            </summary>
            <param name="depth">
            A <see cref="T:System.Int32"/>
            </param>
        </member>
        <member name="M:Fungus.iTween.CameraFadeDestroy">
            <summary>
            Removes and destroyes a camera fade.
            </summary>
        </member>
        <member name="M:Fungus.iTween.Resume(UnityEngine.GameObject)">
            <summary>
            Resume all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:Fungus.iTween.Resume(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Resume all iTweens on a GameObject including its children.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Fungus.iTween.Resume(UnityEngine.GameObject,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Fungus.iTween.Resume(UnityEngine.GameObject,System.String,System.Boolean)" -->
        <member name="M:Fungus.iTween.Resume">
            <summary>
            Resume all iTweens in scene.
            </summary>
        </member>
        <member name="M:Fungus.iTween.Resume(System.String)">
            <summary>
            Resume all iTweens in scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to resume.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param> 
        </member>
        <member name="M:Fungus.iTween.Pause(UnityEngine.GameObject)">
            <summary>
            Pause all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:Fungus.iTween.Pause(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Pause all iTweens on a GameObject including its children.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Fungus.iTween.Pause(UnityEngine.GameObject,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Fungus.iTween.Pause(UnityEngine.GameObject,System.String,System.Boolean)" -->
        <member name="M:Fungus.iTween.Pause">
            <summary>
            Pause all iTweens in scene.
            </summary>
        </member>
        <member name="M:Fungus.iTween.Pause(System.String)">
            <summary>
            Pause all iTweens in scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to pause.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param> 
        </member>
        <member name="M:Fungus.iTween.Count">
            <summary>
            Count all iTweens in current scene.
            </summary>
        </member>
        <member name="M:Fungus.iTween.Count(System.String)">
            <summary>
            Count all iTweens in current scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to stop.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param> 
        </member>
        <member name="M:Fungus.iTween.Count(UnityEngine.GameObject)">
            <summary>
            Count all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:Fungus.iTween.Count(UnityEngine.GameObject,System.String)">
            <summary>
            Count all iTweens on a GameObject of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to count.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param>  
        </member>
        <member name="M:Fungus.iTween.Stop">
            <summary>
            Stop and destroy all Tweens in current scene.
            </summary>
        </member>
        <member name="M:Fungus.iTween.Stop(System.String)">
            <summary>
            Stop and destroy all iTweens in current scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to stop.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param> 
        </member>
        <member name="M:Fungus.iTween.StopByName(System.String)">
            <summary>
            Stop and destroy all iTweens in current scene of a particular name.
            </summary>
            <param name="name">
            The <see cref="T:System.String"/> name of iTween you would like to stop.
            </param> 
        </member>
        <member name="M:Fungus.iTween.Stop(UnityEngine.GameObject)">
            <summary>
            Stop and destroy all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:Fungus.iTween.Stop(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Stop and destroy all iTweens on a GameObject including its children.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Fungus.iTween.Stop(UnityEngine.GameObject,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Fungus.iTween.StopByName(UnityEngine.GameObject,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Fungus.iTween.Stop(UnityEngine.GameObject,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Fungus.iTween.StopByName(UnityEngine.GameObject,System.String,System.Boolean)" -->
        <member name="M:Fungus.iTween.Hash(System.Object[])">
            <summary>
            Universal interface to help in the creation of Hashtables.  Especially useful for C# users.
            </summary>
            <param name="args">
            A <see cref="!:System.Object[]"/> of alternating name value pairs.  For example "time",1,"delay",2...
            </param>
            <returns>
            A <see cref="T:System.Collections.Hashtable"/>
            </returns>
        </member>
        <member name="T:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer">
            <summary>
            Class implementing a debugger allowing attaching from a Visual Studio Code debugging session.
            </summary>
        </member>
        <member name="M:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer" /> class.
            </summary>
            <param name="port">The port on which the debugger listens. It's recommended to use 41912.</param>
        </member>
        <member name="M:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer.#ctor(MoonSharp.Interpreter.Script,System.Int32,System.Func{MoonSharp.Interpreter.Debugging.SourceCode,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer" /> class with a default script.
            Note that for this specific script, it will NOT attach the debugger to the script.
            </summary>
            <param name="script">The script object to debug.</param>
            <param name="port">The port on which the debugger listens. It's recommended to use 41912 unless you are going to keep more than one script object around.</param>
            <param name="sourceFinder">A function which gets in input a source code and returns the path to
            source file to use. It can return null and in that case (or if the file cannot be found)
            a temporary file will be generated on the fly.</param>
        </member>
        <member name="M:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer.AttachToScript(MoonSharp.Interpreter.Script,System.String,System.Func{MoonSharp.Interpreter.Debugging.SourceCode,System.String})">
            <summary>
            Attaches the specified script to the debugger
            </summary>
            <param name="script">The script.</param>
            <param name="name">The name of the script.</param>
            <param name="sourceFinder">A function which gets in input a source code and returns the path to
            source file to use. It can return null and in that case (or if the file cannot be found)
            a temporary file will be generated on the fly.</param>
            <exception cref="T:System.ArgumentException">If the script has already been attached to this debugger.</exception>
        </member>
        <member name="M:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer.GetAttachedDebuggersByIdAndName">
            <summary>
            Gets a list of the attached debuggers by id and name
            </summary>
        </member>
        <member name="P:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer.CurrentId">
            <summary>
            Gets or sets the current script by ID (see GetAttachedDebuggersByIdAndName). 
            New vscode connections will attach to this debugger ID. Changing the current ID does NOT disconnect
            connected clients.
            </summary>
        </member>
        <member name="P:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer.Current">
            <summary>
            Gets or sets the current script. New vscode connections will attach to this script. Changing the current script does NOT disconnect
            connected clients.
            </summary>
        </member>
        <member name="M:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer.Detach(MoonSharp.Interpreter.Script)">
            <summary>
            Detaches the specified script. The debugger attached to that script will get disconnected.
            </summary>
            <param name="script">The script.</param>
            <exception cref="T:System.ArgumentException">Thrown if the script cannot be found.</exception>
        </member>
        <member name="P:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer.Logger">
            <summary>
            Gets or sets a delegate which will be called when logging messages are generated
            </summary>
        </member>
        <member name="M:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer.GetDebugger">
            <summary>
            Gets the debugger object. Obsolete, use the new interface using the Attach method instead.
            </summary>
        </member>
        <member name="M:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer.Dispose">
            <summary>
            Stops listening
            </summary>
            <exception cref="T:System.InvalidOperationException">Cannot stop; server was not started.</exception>
        </member>
        <member name="M:MoonSharp.VsCodeDebugger.MoonSharpVsCodeDebugServer.Start">
            <summary>
            Starts listening on the localhost for incoming connections.
            </summary>
        </member>
        <member name="M:MoonSharp.VsCodeDebugger.SDK.Utilities.MakeRelativePath(System.String,System.String)">
            converts the given absPath into a path that is relative to the given dirPath.
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.BasicModule">
            <summary>
            Class implementing basic Lua functions (print, type, tostring, etc) as a MoonSharp module.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.Bit32Module">
            <summary>
            Class implementing bit32 Lua functions 
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.CoroutineModule">
            <summary>
            Class implementing coroutine Lua functions 
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.DebugModule">
            <summary>
            Class implementing debug Lua functions. Support for the debug module is partial. 
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.DynamicModule">
            <summary>
            Class implementing dynamic expression evaluations at runtime (a MoonSharp addition).
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.ErrorHandlingModule">
            <summary>
            Class implementing error handling Lua functions (pcall and xpcall)
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.IO.FileUserData">
            <summary>
            Abstract class implementing a file Lua userdata. Methods are meant to be called by Lua code.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.IO.FileUserDataBase">
            <summary>
            Abstract class implementing a file Lua userdata. Methods are meant to be called by Lua code.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.IO.StandardIOFileUserDataBase">
            <summary>
            Abstract class implementing an unclosable file Lua userdata. Methods are meant to be called by Lua code.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.IO.StreamFileUserDataBase">
            <summary>
            Abstract class implementing a file Lua userdata. Methods are meant to be called by Lua code.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.IO.NamespaceDoc">
            <summary>
            Namespace containing userdata classes for the 'io' module
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.IoModule">
            <summary>
            Class implementing io Lua functions. Proper support requires a compatible IPlatformAccessor
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.LoadModule">
            <summary>
            Class implementing loading Lua functions like 'require', 'load', etc.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.MathModule">
            <summary>
            Class implementing math Lua functions 
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.MetaTableModule">
            <summary>
            Class implementing metatable related Lua functions (xxxmetatable and rawxxx).
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.OsSystemModule">
            <summary>
            Class implementing system related Lua functions from the 'os' module.
            Proper support requires a compatible IPlatformAccessor
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.OsTimeModule">
            <summary>
            Class implementing time related Lua functions from the 'os' module.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.StringModule">
            <summary>
            Class implementing string Lua functions 
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.TableIteratorsModule">
            <summary>
            Class implementing table Lua iterators (pairs, ipairs, next)
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.TableModule">
            <summary>
            Class implementing table Lua functions 
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.TableModule_Globals">
            <summary>
            Class exposing table.unpack and table.pack in the global namespace (to work around the most common Lua 5.1 compatibility issue).
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreLib.NamespaceDoc">
            <summary>
            Namespace containing the implementation of the Lua standard library, as MoonSharp modules.
            There's seldom the need to access these classes directly.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Extension_Methods">
            <summary>
            Extension methods used in the whole project.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Extension_Methods.GetOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Gets a value from the dictionary or returns the default value
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Extension_Methods.GetOrCreate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets a value from the dictionary or creates it
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="creator">A function which will create the value if it doesn't exist.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.DataStructs.FastStack`1">
            <summary>
            A preallocated, non-resizable, stack
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MoonSharp.Interpreter.DataStructs.FastStackDynamic`1">
            <summary>
            A non preallocated, non_fixed size stack
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2">
            <summary>
            An index to accelerate operations on a LinkedList<typeparamref name="TValue"/> using a single key of type <typeparamref name="TKey"/>
            More than one LinkedListIndex can index the same linked list, but every node in the linked list must be indexed by one and only one
            LinkedListIndex object.
            </summary>
            <typeparam name="TKey">The type of the key. Must implement Equals and GetHashCode appropriately.</typeparam>
            <typeparam name="TValue">The type of the values contained in the linked list.</typeparam>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2.#ctor(System.Collections.Generic.LinkedList{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2"/> class.
            </summary>
            <param name="linkedList">The linked list to be indexed.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2.Find(`0)">
            <summary>
            Finds the node indexed by the specified key, or null.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2.Set(`0,`1)">
            <summary>
            Updates or creates a new node in the linked list, indexed by the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The previous value of the element</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2.Add(`0,`1)">
            <summary>
            Creates a new node in the linked list, indexed by the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2.Remove(`0)">
            <summary>
            Removes the specified key from the index, and the node indexed by the key from the linked list.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2.ContainsKey(`0)">
            <summary>
            Determines whether the index contains the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.LinkedListIndex`2.Clear">
            <summary>
            Clears this instance (removes all elements)
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.DataStructs.MultiDictionary`2">
            <summary>
            A Dictionary where multiple values can be associated to the same key
            </summary>
            <typeparam name="K">The key type</typeparam>
            <typeparam name="V">The value type</typeparam>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.MultiDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.DataStructs.MultiDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.MultiDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.DataStructs.MultiDictionary`2"/> class.
            </summary>
            <param name="eqComparer">The equality comparer to use in the underlying dictionary.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.MultiDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key. Returns true if this is the first value for a given key
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.MultiDictionary`2.Find(`0)">
            <summary>
            Finds all the values associated with the specified key. 
            An empty collection is returned if not found.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.MultiDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether this contains the specified key 
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.DataStructs.MultiDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.MultiDictionary`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.MultiDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key and all its associated values from the multidictionary
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.MultiDictionary`2.RemoveValue(`0,`1)">
            <summary>
            Removes the value. Returns true if the removed value was the last of a given key
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.DataStructs.ReferenceEqualityComparer">
            <summary>
            Implementation of IEqualityComparer enforcing reference equality
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.DataStructs.Slice`1">
            <summary>
            Provides facility to create a "sliced" view over an existing IList<typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the items contained in the collection</typeparam>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.DataStructs.Slice`1"/> class.
            </summary>
            <param name="list">The list to apply the Slice view on</param>
            <param name="from">From which index</param>
            <param name="length">The length of the slice</param>
            <param name="reversed">if set to <c>true</c> the view is in reversed order.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.DataStructs.Slice`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.DataStructs.Slice`1.From">
            <summary>
            Gets the index from which the slice starts
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DataStructs.Slice`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:MoonSharp.Interpreter.DataStructs.Slice`1.Reversed">
            <summary>
            Gets a value indicating whether this <see cref="T:MoonSharp.Interpreter.DataStructs.Slice`1"/> operates in a reversed direction.
            </summary>
            <value>
              <c>true</c> if this <see cref="T:MoonSharp.Interpreter.DataStructs.Slice`1"/> operates in a reversed direction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.CalcRealIndex(System.Int32)">
            <summary>
            Calculates the real index in the underlying collection
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.ToArray">
            <summary>
            Converts to an array.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.ToList">
            <summary>
            Converts to an list.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <exception cref="T:System.InvalidOperationException">Slices are readonly</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.InvalidOperationException">Slices are readonly</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.InvalidOperationException">Slices are readonly</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.InvalidOperationException">Slices are readonly</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.DataStructs.Slice`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DataStructs.Slice`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">Slices are readonly</exception>
        </member>
        <member name="T:MoonSharp.Interpreter.CallbackArguments">
            <summary>
            This class is a container for arguments received by a CallbackFunction
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.#ctor(System.Collections.Generic.IList{MoonSharp.Interpreter.DynValue},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.CallbackArguments" /> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="isMethodCall">if set to <c>true</c> [is method call].</param>
        </member>
        <member name="P:MoonSharp.Interpreter.CallbackArguments.Count">
            <summary>
            Gets the count of arguments
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.CallbackArguments.IsMethodCall">
            <summary>
            Gets or sets a value indicating whether this is a method call.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.CallbackArguments.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MoonSharp.Interpreter.DynValue"/> at the specified index, or Void if not found 
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.RawGet(System.Int32,System.Boolean)">
            <summary>
            Gets the <see cref="T:MoonSharp.Interpreter.DynValue" /> at the specified index, or null.
            </summary>
            <param name="index">The index.</param>
            <param name="translateVoids">if set to <c>true</c> all voids are translated to nils.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.GetArray(System.Int32)">
            <summary>
            Converts the arguments to an array
            </summary>
            <param name="skip">The number of elements to skip (default= 0).</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.AsType(System.Int32,System.String,MoonSharp.Interpreter.DataType,System.Boolean)">
            <summary>
            Gets the specified argument as as an argument of the specified type. If not possible,
            an exception is raised.
            </summary>
            <param name="argNum">The argument number.</param>
            <param name="funcName">Name of the function.</param>
            <param name="type">The type desired.</param>
            <param name="allowNil">if set to <c>true</c> nil values are allowed.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.AsUserData``1(System.Int32,System.String,System.Boolean)">
            <summary>
            Gets the specified argument as as an argument of the specified user data type. If not possible,
            an exception is raised.
            </summary>
            <typeparam name="T">The desired userdata type</typeparam>
            <param name="argNum">The argument number.</param>
            <param name="funcName">Name of the function.</param>
            <param name="allowNil">if set to <c>true</c> nil values are allowed.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.AsInt(System.Int32,System.String)">
            <summary>
            Gets the specified argument as an integer
            </summary>
            <param name="argNum">The argument number.</param>
            <param name="funcName">Name of the function.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.AsLong(System.Int32,System.String)">
            <summary>
            Gets the specified argument as a long integer
            </summary>
            <param name="argNum">The argument number.</param>
            <param name="funcName">Name of the function.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.AsStringUsingMeta(MoonSharp.Interpreter.ScriptExecutionContext,System.Int32,System.String)">
            <summary>
            Gets the specified argument as a string, calling the __tostring metamethod if needed, in a NON
            yield-compatible way.
            </summary>
            <param name="executionContext">The execution context.</param>
            <param name="argNum">The argument number.</param>
            <param name="funcName">Name of the function.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">'tostring' must return a string to '{0}'</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackArguments.SkipMethodCall">
            <summary>
            Returns a copy of CallbackArguments where the first ("self") argument is skipped if this was a method call,
            otherwise returns itself.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.CallbackFunction">
            <summary>
            This class wraps a CLR function 
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.CallbackFunction.Name">
            <summary>
            Gets the name of the function
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.CallbackFunction.ClrCallback">
            <summary>
            Gets the call back.
            </summary>
            <value>
            The call back.
            </value>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackFunction.#ctor(System.Func{MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments,MoonSharp.Interpreter.DynValue},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.CallbackFunction" /> class.
            </summary>
            <param name="callBack">The callback function to be called.</param>
            <param name="name">The callback name, used in stacktraces, debugger, etc..</param>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackFunction.Invoke(MoonSharp.Interpreter.ScriptExecutionContext,System.Collections.Generic.IList{MoonSharp.Interpreter.DynValue},System.Boolean)">
            <summary>
            Invokes the callback function
            </summary>
            <param name="executionContext">The execution context.</param>
            <param name="args">The arguments.</param>
            <param name="isMethodCall">if set to <c>true</c> this is a method call.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.CallbackFunction.DefaultAccessMode">
            <summary>
            Gets or sets the default access mode used when marshalling delegates
            </summary>
            <value>
            The default access mode. Default, HideMembers and BackgroundOptimized are NOT supported.
            </value>
            <exception cref="T:System.ArgumentException">Default, HideMembers and BackgroundOptimized are NOT supported.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackFunction.FromDelegate(MoonSharp.Interpreter.Script,System.Delegate,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Creates a CallbackFunction from a delegate.
            </summary>
            <param name="script">The script.</param>
            <param name="del">The delegate.</param>
            <param name="accessMode">The access mode.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackFunction.FromMethodInfo(MoonSharp.Interpreter.Script,System.Reflection.MethodInfo,System.Object,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Creates a CallbackFunction from a MethodInfo relative to a function.
            </summary>
            <param name="script">The script.</param>
            <param name="mi">The MethodInfo object.</param>
            <param name="obj">The object to which the function applies, or null for static methods.</param>
            <param name="accessMode">The access mode.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The method is not static.</exception>
        </member>
        <member name="P:MoonSharp.Interpreter.CallbackFunction.AdditionalData">
            <summary>
            Gets or sets an object used as additional data to the callback function (available in the execution context).
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.CallbackFunction.CheckCallbackSignature(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Checks the callback signature of a method is compatible for callbacks
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Closure">
            <summary>
            A class representing a script function
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Closure.UpvaluesType">
            <summary>
            Type of closure based on upvalues
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Closure.UpvaluesType.None">
            <summary>
            The closure has no upvalues (thus, technically, it's a function and not a closure!)
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Closure.UpvaluesType.Environment">
            <summary>
            The closure has _ENV as its only upvalue
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Closure.UpvaluesType.Closure">
            <summary>
            The closure is a "real" closure, with multiple upvalues
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Closure.EntryPointByteCodeLocation">
            <summary>
            Gets the entry point location in bytecode .
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Closure.OwnerScript">
            <summary>
            Gets the script owning this function
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Closure.emptyClosure">
            <summary>
            Shortcut for an empty closure
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Closure.ClosureContext">
            <summary>
            The current closure context
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.#ctor(MoonSharp.Interpreter.Script,System.Int32,MoonSharp.Interpreter.SymbolRef[],System.Collections.Generic.IEnumerable{MoonSharp.Interpreter.DynValue})">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Closure"/> class.
            </summary>
            <param name="script">The script.</param>
            <param name="idx">The index.</param>
            <param name="symbols">The symbols.</param>
            <param name="resolvedLocals">The resolved locals.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.Call">
            <summary>
            Calls this function with the specified args
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.Call(System.Object[])">
            <summary>
            Calls this function with the specified args
            </summary>
            <param name="args">The arguments to pass to the function.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.Call(MoonSharp.Interpreter.DynValue[])">
            <summary>
            Calls this function with the specified args
            </summary>
            <param name="args">The arguments to pass to the function.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.GetDelegate">
            <summary>
            Gets a delegate wrapping calls to this scripted function
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.GetDelegate``1">
            <summary>
            Gets a delegate wrapping calls to this scripted function
            </summary>
            <typeparam name="T">The type of return value of the delegate.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.GetUpvaluesCount">
            <summary>
            Gets the number of upvalues in this closure
            </summary>
            <returns>The number of upvalues in this closure</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.GetUpvalueName(System.Int32)">
            <summary>
            Gets the name of the specified upvalue.
            </summary>
            <param name="idx">The index of the upvalue.</param>
            <returns>The upvalue name</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.GetUpvalue(System.Int32)">
            <summary>
            Gets the value of an upvalue. To set the value, use GetUpvalue(idx).Assign(...);
            </summary>
            <param name="idx">The index of the upvalue.</param>
            <returns>The value of an upvalue </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Closure.GetUpvaluesType">
            <summary>
            Gets the type of the upvalues contained in this closure
            </summary>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Coroutine">
            <summary>
            A class representing a script coroutine
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Coroutine.CoroutineType">
            <summary>
            Possible types of coroutine
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Coroutine.CoroutineType.Coroutine">
            <summary>
            A valid coroutine
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Coroutine.CoroutineType.ClrCallback">
            <summary>
            A CLR callback assigned to a coroutine. 
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Coroutine.CoroutineType.ClrCallbackDead">
            <summary>
            A CLR callback assigned to a coroutine and already executed.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Coroutine.Type">
            <summary>
            Gets the type of coroutine
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Coroutine.AsTypedEnumerable">
            <summary>
            Gets this coroutine as a typed enumerable which can be looped over for resuming.
            Returns its result as DynValue(s)
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Only non-CLR coroutines can be resumed with this overload of the Resume method. Use the overload accepting a ScriptExecutionContext instead</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Coroutine.AsEnumerable">
            <summary>
            Gets this coroutine as a typed enumerable which can be looped over for resuming.
            Returns its result as System.Object. Only the first element of tuples is returned.
            Only non-CLR coroutines can be resumed with this method. Use an overload of the Resume method accepting a ScriptExecutionContext instead.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Only non-CLR coroutines can be resumed with this overload of the Resume method. Use the overload accepting a ScriptExecutionContext instead</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Coroutine.AsEnumerable``1">
            <summary>
            Gets this coroutine as a typed enumerable which can be looped over for resuming.
            Returns its result as the specified type. Only the first element of tuples is returned.
            Only non-CLR coroutines can be resumed with this method. Use an overload of the Resume method accepting a ScriptExecutionContext instead.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Only non-CLR coroutines can be resumed with this overload of the Resume method. Use the overload accepting a ScriptExecutionContext instead</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Coroutine.AsUnityCoroutine">
            <summary>
            The purpose of this method is to convert a MoonSharp/Lua coroutine to a Unity3D coroutine.
            This loops over the coroutine, discarding returned values, and returning null for each invocation.
            This means however that the coroutine will be invoked each frame.
            Only non-CLR coroutines can be resumed with this method. Use an overload of the Resume method accepting a ScriptExecutionContext instead.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Only non-CLR coroutines can be resumed with this overload of the Resume method. Use the overload accepting a ScriptExecutionContext instead</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Coroutine.Resume(MoonSharp.Interpreter.DynValue[])">
            <summary>
            Resumes the coroutine.
            Only non-CLR coroutines can be resumed with this overload of the Resume method. Use the overload accepting a ScriptExecutionContext instead.
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Only non-CLR coroutines can be resumed with this overload of the Resume method. Use the overload accepting a ScriptExecutionContext instead</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Coroutine.Resume(MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.DynValue[])">
            <summary>
            Resumes the coroutine.
            </summary>
            <param name="context">The ScriptExecutionContext.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Coroutine.Resume">
            <summary>
            Resumes the coroutine.
            Only non-CLR coroutines can be resumed with this overload of the Resume method. Use the overload accepting a ScriptExecutionContext instead.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Only non-CLR coroutines can be resumed with this overload of the Resume method. Use the overload accepting a ScriptExecutionContext instead</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Coroutine.Resume(MoonSharp.Interpreter.ScriptExecutionContext)">
            <summary>
            Resumes the coroutine.
            </summary>
            <param name="context">The ScriptExecutionContext.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Coroutine.Resume(System.Object[])">
            <summary>
            Resumes the coroutine.
            Only non-CLR coroutines can be resumed with this overload of the Resume method. Use the overload accepting a ScriptExecutionContext instead.
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Only non-CLR coroutines can be resumed with this overload of the Resume method. Use the overload accepting a ScriptExecutionContext instead.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Coroutine.Resume(MoonSharp.Interpreter.ScriptExecutionContext,System.Object[])">
            <summary>
            Resumes the coroutine
            </summary>
            <param name="context">The ScriptExecutionContext.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Coroutine.State">
            <summary>
            Gets the coroutine state.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Coroutine.GetStackTrace(System.Int32,MoonSharp.Interpreter.Debugging.SourceRef)">
            <summary>
            Gets the coroutine stack trace for debug purposes
            </summary>
            <param name="skip">The skip.</param>
            <param name="entrySourceRef">The entry source reference.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Coroutine.OwnerScript">
            <summary>
            Gets the script owning this resource.
            </summary>
            <value>
            The script owning this resource.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:MoonSharp.Interpreter.Coroutine.AutoYieldCounter">
            <summary>
            Gets or sets the automatic yield counter.
            </summary>
            <value>
            The automatic yield counter.
            </value>
        </member>
        <member name="T:MoonSharp.Interpreter.CoroutineState">
            <summary>
            State of coroutines
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoroutineState.Main">
            <summary>
            This is the main coroutine
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoroutineState.NotStarted">
            <summary>
            Coroutine has not started yet
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoroutineState.Suspended">
            <summary>
            Coroutine is suspended
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoroutineState.ForceSuspended">
            <summary>
            Coroutine has been forcefully suspended (i.e. auto-yielded)
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoroutineState.Running">
            <summary>
            Coroutine is running
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoroutineState.Dead">
            <summary>
            Coroutine has terminated
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.DataType">
            <summary>
            Enumeration of possible data types in MoonSharp
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Nil">
            <summary>
            A nil value, as in Lua
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Void">
            <summary>
            A place holder for no value
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Boolean">
            <summary>
            A Lua boolean
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Number">
            <summary>
            A Lua number
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.String">
            <summary>
            A Lua string
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Function">
            <summary>
            A Lua function
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Table">
            <summary>
            A Lua table
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Tuple">
            <summary>
            A set of multiple values
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.UserData">
            <summary>
            A userdata reference - that is a wrapped CLR object
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.Thread">
            <summary>
            A coroutine handle
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.ClrFunction">
            <summary>
            A callback function
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.TailCallRequest">
            <summary>
            A request to execute a tail call
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DataType.YieldRequest">
            <summary>
            A request to coroutine.yield
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.LuaTypeExtensions">
            <summary>
            Extension methods to DataType
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.LuaTypeExtensions.CanHaveTypeMetatables(MoonSharp.Interpreter.DataType)">
            <summary>
            Determines whether this data type can have type metatables.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.LuaTypeExtensions.ToErrorTypeString(MoonSharp.Interpreter.DataType)">
            <summary>
            Converts the DataType to the string returned by the "type(...)" Lua function
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">The DataType is not a Lua type</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.LuaTypeExtensions.ToLuaDebuggerString(MoonSharp.Interpreter.DataType)">
            <summary>
            Converts the DataType to the string returned by the "type(...)" Lua function, with additional values
            to support debuggers
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">The DataType is not a Lua type</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.LuaTypeExtensions.ToLuaTypeString(MoonSharp.Interpreter.DataType)">
            <summary>
            Converts the DataType to the string returned by the "type(...)" Lua function
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">The DataType is not a Lua type</exception>
        </member>
        <member name="T:MoonSharp.Interpreter.DynValue">
            <summary>
            A class representing a value in a Lua/MoonSharp script.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.ReferenceID">
            <summary>
            Gets a unique reference identifier. This is guaranteed to be unique only for dynvalues created in a single thread as it's not thread-safe.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Type">
            <summary>
            Gets the type of the value.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Function">
            <summary>
            Gets the function (valid only if the <see cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <see cref="F:MoonSharp.Interpreter.DataType.Function"/>)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Number">
            <summary>
            Gets the numeric value (valid only if the <see cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <see cref="F:MoonSharp.Interpreter.DataType.Number"/>)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Tuple">
            <summary>
            Gets the values in the tuple (valid only if the <see cref="P:MoonSharp.Interpreter.DynValue.Type"/> is Tuple).
            This field is currently also used to hold arguments in values whose <see cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <see cref="F:MoonSharp.Interpreter.DataType.TailCallRequest"/>.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Coroutine">
            <summary>
            Gets the coroutine handle. (valid only if the <see cref="P:MoonSharp.Interpreter.DynValue.Type"/> is Thread).
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Table">
            <summary>
            Gets the table (valid only if the <see cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <see cref="F:MoonSharp.Interpreter.DataType.Table"/>)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Boolean">
            <summary>
            Gets the boolean value (valid only if the <see cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <see cref="F:MoonSharp.Interpreter.DataType.Boolean"/>)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.String">
            <summary>
            Gets the string value (valid only if the <see cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <see cref="F:MoonSharp.Interpreter.DataType.String"/>)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Callback">
            <summary>
            Gets the CLR callback (valid only if the <see cref="P:MoonSharp.Interpreter.DynValue.Type"/> is <see cref="F:MoonSharp.Interpreter.DataType.ClrFunction"/>)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.TailCallData">
            <summary>
            Gets the tail call data.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.YieldRequest">
            <summary>
            Gets the yield request data.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.UserData">
            <summary>
            Gets the tail call data.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.ReadOnly">
            <summary>
            Returns true if this instance is write protected.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewNil">
            <summary>
            Creates a new writable value initialized to Nil.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewBoolean(System.Boolean)">
            <summary>
            Creates a new writable value initialized to the specified boolean.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewNumber(System.Double)">
            <summary>
            Creates a new writable value initialized to the specified number.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewString(System.String)">
            <summary>
            Creates a new writable value initialized to the specified string.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewString(System.Text.StringBuilder)">
            <summary>
            Creates a new writable value initialized to the specified StringBuilder.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewString(System.String,System.Object[])">
            <summary>
            Creates a new writable value initialized to the specified string using String.Format like syntax
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewCoroutine(MoonSharp.Interpreter.Coroutine)">
            <summary>
            Creates a new writable value initialized to the specified coroutine.
            Internal use only, for external use, see Script.CoroutineCreate
            </summary>
            <param name="coroutine">The coroutine object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewClosure(MoonSharp.Interpreter.Closure)">
            <summary>
            Creates a new writable value initialized to the specified closure (function).
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewCallback(System.Func{MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments,MoonSharp.Interpreter.DynValue},System.String)">
            <summary>
            Creates a new writable value initialized to the specified CLR callback.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewCallback(MoonSharp.Interpreter.CallbackFunction)">
            <summary>
            Creates a new writable value initialized to the specified CLR callback.
            See also CallbackFunction.FromDelegate and CallbackFunction.FromMethodInfo factory methods.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewTable(MoonSharp.Interpreter.Table)">
            <summary>
            Creates a new writable value initialized to the specified table.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewPrimeTable">
            <summary>
            Creates a new writable value initialized to an empty prime table (a 
            prime table is a table made only of numbers, strings, booleans and other
            prime tables).
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewTable(MoonSharp.Interpreter.Script)">
            <summary>
            Creates a new writable value initialized to an empty table.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewTable(MoonSharp.Interpreter.Script,MoonSharp.Interpreter.DynValue[])">
            <summary>
            Creates a new writable value initialized to with array contents.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewTailCallReq(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue[])">
            <summary>
            Creates a new request for a tail call. This is the preferred way to execute Lua/MoonSharp code from a callback,
            although it's not always possible to use it. When a function (callback or script closure) returns a
            TailCallRequest, the bytecode processor immediately executes the function contained in the request.
            By executing script in this way, a callback function ensures it's not on the stack anymore and thus a number
            of functionality (state savings, coroutines, etc) keeps working at full power.
            </summary>
            <param name="tailFn">The function to be called.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewTailCallReq(MoonSharp.Interpreter.TailCallData)">
            <summary>
            Creates a new request for a tail call. This is the preferred way to execute Lua/MoonSharp code from a callback,
            although it's not always possible to use it. When a function (callback or script closure) returns a
            TailCallRequest, the bytecode processor immediately executes the function contained in the request.
            By executing script in this way, a callback function ensures it's not on the stack anymore and thus a number
            of functionality (state savings, coroutines, etc) keeps working at full power.
            </summary>
            <param name="tailCallData">The data for the tail call.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewYieldReq(MoonSharp.Interpreter.DynValue[])">
            <summary>
            Creates a new request for a yield of the current coroutine.
            </summary>
            <param name="args">The yield argumenst.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewForcedYieldReq">
            <summary>
            Creates a new request for a yield of the current coroutine.
            </summary>
            <param name="args">The yield argumenst.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewTuple(MoonSharp.Interpreter.DynValue[])">
            <summary>
            Creates a new tuple initialized to the specified values.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewTupleNested(MoonSharp.Interpreter.DynValue[])">
            <summary>
            Creates a new tuple initialized to the specified values - which can be potentially other tuples
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.NewUserData(MoonSharp.Interpreter.UserData)">
            <summary>
            Creates a new userdata value
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.AsReadOnly">
            <summary>
            Returns this value as readonly - eventually cloning it in the process if it isn't readonly to start with.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.Clone(System.Boolean)">
            <summary>
            Clones this instance, overriding the "readonly" status.
            </summary>
            <param name="readOnly">if set to <c>true</c> the new instance is set as readonly, or writeable otherwise.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.CloneAsWritable">
            <summary>
            Clones this instance, returning a writable copy.
            </summary>
            <exception cref="T:System.ArgumentException">Can't clone Symbol values</exception>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Void">
            <summary>
            A preinitialized, readonly instance, equaling Void
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.Nil">
            <summary>
            A preinitialized, readonly instance, equaling Nil
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.True">
            <summary>
            A preinitialized, readonly instance, equaling True
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.DynValue.False">
            <summary>
            A preinitialized, readonly instance, equaling False
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.ToPrintString">
            <summary>
            Returns a string which is what it's expected to be output by the print function applied to this value.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.ToDebugPrintString">
            <summary>
            Returns a string which is what it's expected to be output by debuggers.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.CastToString">
            <summary>
            Casts this DynValue to string, using coercion if the type is number.
            </summary>
            <returns>The string representation, or null if not number, not string.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.CastToNumber">
            <summary>
            Casts this DynValue to a double, using coercion if the type is string.
            </summary>
            <returns>The string representation, or null if not number, not string or non-convertible-string.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.CastToBool">
            <summary>
            Casts this DynValue to a bool
            </summary>
            <returns>False if value is false or nil, true otherwise.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.GetAsPrivateResource">
            <summary>
            Returns this DynValue as an instance of <see cref="T:MoonSharp.Interpreter.IScriptPrivateResource"/>, if possible,
            null otherwise
            </summary>
            <returns>False if value is false or nil, true otherwise.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.ToScalar">
            <summary>
            Converts a tuple to a scalar value. If it's already a scalar value, this function returns "this".
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.Assign(MoonSharp.Interpreter.DynValue)">
            <summary>
            Performs an assignment, overwriting the value with the specified one.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">If the value is readonly.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.GetLength">
            <summary>
            Gets the length of a string or table value.
            </summary>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">Value is not a table or string.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.IsNil">
            <summary>
            Determines whether this instance is nil or void
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.IsNotNil">
            <summary>
            Determines whether this instance is not nil or void
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.IsVoid">
            <summary>
            Determines whether this instance is void
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.IsNotVoid">
            <summary>
            Determines whether this instance is not void
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.IsNilOrNan">
            <summary>
            Determines whether is nil, void or NaN (and thus unsuitable for using as a table key).
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.AssignNumber(System.Double)">
            <summary>
            Changes the numeric value of a number DynValue.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.FromObject(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Creates a new DynValue from a CLR object
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.ToObject">
            <summary>
            Converts this MoonSharp DynValue to a CLR object.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.ToObject(System.Type)">
            <summary>
            Converts this MoonSharp DynValue to a CLR object of the specified type.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.ToObject``1">
            <summary>
            Converts this MoonSharp DynValue to a CLR object of the specified type.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.CheckType(System.String,MoonSharp.Interpreter.DataType,System.Int32,MoonSharp.Interpreter.TypeValidationFlags)">
            <summary>
            Checks the type of this value corresponds to the desired type. A propert ScriptRuntimeException is thrown
            if the value is not of the specified type or - considering the TypeValidationFlags - is not convertible
            to the specified type.
            </summary>
            <param name="funcName">Name of the function requesting the value, for error message purposes.</param>
            <param name="desiredType">The desired data type.</param>
            <param name="argNum">The argument number, for error message purposes.</param>
            <param name="flags">The TypeValidationFlags.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">Thrown
            if the value is not of the specified type or - considering the TypeValidationFlags - is not convertible
            to the specified type.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.DynValue.CheckUserDataType``1(System.String,System.Int32,MoonSharp.Interpreter.TypeValidationFlags)">
            <summary>
            Checks if the type is a specific userdata type, and returns it or throws.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="funcName">Name of the function.</param>
            <param name="argNum">The argument number.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.IScriptPrivateResource">
            <summary>
            Common interface for all resources which are uniquely bound to a script.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.IScriptPrivateResource.OwnerScript">
            <summary>
            Gets the script owning this resource.
            </summary>
            <value>
            The script owning this resource.
            </value>
        </member>
        <member name="T:MoonSharp.Interpreter.RefIdObject">
            <summary>
            A base class for many MoonSharp objects. 
            Helds a ReferenceID property which gets a different value for every object instance, for debugging
            purposes. Note that the ID is not assigned in a thread safe manner for speed reason, so the IDs
            are guaranteed to be unique only if everything is running on one thread at a time.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.RefIdObject.ReferenceID">
            <summary>
            Gets the reference identifier.
            </summary>
            <value>
            The reference identifier.
            </value>
        </member>
        <member name="M:MoonSharp.Interpreter.RefIdObject.FormatTypeString(System.String)">
            <summary>
            Formats a string with a type name and a ref-id
            </summary>
            <param name="typeString">The type name.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.ScriptFunctionDelegate">
            <summary>
            A Delegate type which can wrap a script function
            </summary>
            <param name="args">The arguments.</param>
            <returns>The return value of the script function</returns>
        </member>
        <member name="T:MoonSharp.Interpreter.ScriptFunctionDelegate`1">
            <summary>
            A Delegate type which can wrap a script function with a generic typed return value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args">The arguments.</param>
            <returns>The return value of the script function</returns>
        </member>
        <member name="T:MoonSharp.Interpreter.SymbolRef">
            <summary>
            This class stores a possible l-value (that is a potential target of an assignment)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.SymbolRef.Type">
            <summary>
            Gets the type of this symbol reference
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.SymbolRef.Index">
            <summary>
            Gets the index of this symbol in its scope context
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.SymbolRef.Name">
            <summary>
            Gets the name of this symbol
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.SymbolRef.Environment">
            <summary>
            Gets the environment this symbol refers to (for global symbols only)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.SymbolRef.DefaultEnv">
            <summary>
            Gets the default _ENV.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.SymbolRef.Global(System.String,MoonSharp.Interpreter.SymbolRef)">
            <summary>
            Creates a new symbol reference pointing to a global var
            </summary>
            <param name="name">The name.</param>
            <param name="envSymbol">The _ENV symbol.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.SymbolRef.Local(System.String,System.Int32)">
            <summary>
            Creates a new symbol reference pointing to a local var
            </summary>
            <param name="name">The name.</param>
            <param name="index">The index of the var in local scope.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.SymbolRef.Upvalue(System.String,System.Int32)">
            <summary>
            Creates a new symbol reference pointing to an upvalue var
            </summary>
            <param name="name">The name.</param>
            <param name="index">The index of the var in closure scope.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.SymbolRef.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.SymbolRef.WriteBinary(System.IO.BinaryWriter)">
            <summary>
            Writes this instance to a binary stream
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.SymbolRef.ReadBinary(System.IO.BinaryReader)">
            <summary>
            Reads a symbolref from a binary stream 
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.SymbolRefType">
            <summary>
            Enumeration of the types of SymbolRef
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.SymbolRefType.Local">
            <summary>
            The symbol ref of a local variable
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.SymbolRefType.Upvalue">
            <summary>
            The symbol ref of an upvalue variable
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.SymbolRefType.Global">
            <summary>
            The symbol ref of a global variable
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.SymbolRefType.DefaultEnv">
            <summary>
            The symbol ref of the global environment
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Table">
            <summary>
            A class representing a Lua table.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.#ctor(MoonSharp.Interpreter.Script)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Table"/> class.
            </summary>
            <param name="owner">The owner script.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.#ctor(MoonSharp.Interpreter.Script,MoonSharp.Interpreter.DynValue[])">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Table"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="arrayValues">The values for the "array-like" part of the table.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.OwnerScript">
            <summary>
            Gets the script owning this resource.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Clear">
            <summary>
            Removes all items from the Table.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.GetIntegralKey(System.Double)">
            <summary>
            Gets the integral key from a double.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.Item(System.Object[])">
            <summary>
            Gets or sets the 
            <see cref="T:System.Object" /> with the specified key(s).
            This will marshall CLR and MoonSharp objects in the best possible way.
            Multiple keys can be used to access subtables.
            </summary>
            <value>
            The <see cref="T:System.Object" />.
            </value>
            <param name="keys">The keys to access the table and subtables</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key(s).
            This will marshall CLR and MoonSharp objects in the best possible way.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Append(MoonSharp.Interpreter.DynValue)">
            <summary>
            Append the value to the table using the next available integer index.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Set(System.String,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value associated to the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Set(System.Int32,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value associated to the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Set(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value associated to the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Set(System.Object,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Set(System.Object[],MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value associated with the specified keys.
            Multiple keys can be used to access subtables.
            </summary>
            <param name="key">The keys.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Get(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Get(System.Int32)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Get(MoonSharp.Interpreter.DynValue)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Get(System.Object)">
            <summary>
            Gets the value associated with the specified key.
            (expressed as a <see cref="T:System.Object"/>).
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Get(System.Object[])">
            <summary>
            Gets the value associated with the specified keys (expressed as an 
            array of <see cref="T:System.Object"/>).
            This will marshall CLR and MoonSharp objects in the best possible way.
            Multiple keys can be used to access subtables.
            </summary>
            <param name="keys">The keys to access the table and subtables</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.RawGet(System.String)">
            <summary>
            Gets the value associated with the specified key,
            without bringing to Nil the non-existant values.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.RawGet(System.Int32)">
            <summary>
            Gets the value associated with the specified key,
            without bringing to Nil the non-existant values.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.RawGet(MoonSharp.Interpreter.DynValue)">
            <summary>
            Gets the value associated with the specified key,
            without bringing to Nil the non-existant values.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.RawGet(System.Object)">
            <summary>
            Gets the value associated with the specified key,
            without bringing to Nil the non-existant values.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.RawGet(System.Object[])">
            <summary>
            Gets the value associated with the specified keys (expressed as an
            array of <see cref="T:System.Object"/>).
            This will marshall CLR and MoonSharp objects in the best possible way.
            Multiple keys can be used to access subtables.
            </summary>
            <param name="keys">The keys to access the table and subtables</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Remove(System.String)">
            <summary>
            Remove the value associated with the specified key from the table.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if values was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Remove(System.Int32)">
            <summary>
            Remove the value associated with the specified key from the table.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if values was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Remove(MoonSharp.Interpreter.DynValue)">
            <summary>
            Remove the value associated with the specified key from the table.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if values was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Remove(System.Object)">
            <summary>
            Remove the value associated with the specified key from the table.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if values was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.Remove(System.Object[])">
            <summary>
            Remove the value associated with the specified keys from the table.
            Multiple keys can be used to access subtables.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if values was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.CollectDeadKeys">
            <summary>
            Collects the dead keys. This frees up memory but invalidates pending iterators.
            It's called automatically internally when the semantics of Lua tables allow, but can be forced
            externally if it's known that no iterators are pending.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Table.NextKey(MoonSharp.Interpreter.DynValue)">
            <summary>
            Returns the next pair from a value
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.Length">
            <summary>
            Gets the length of the "array part".
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.MetaTable">
            <summary>
            Gets the meta-table associated with this instance.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.Pairs">
            <summary>
            Enumerates the key/value pairs.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.Keys">
            <summary>
            Enumerates the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Table.Values">
            <summary>
            Enumerates the values
            </summary>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.TablePair">
            <summary>
            A class representing a key/value pair for Table use
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.TablePair.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.TablePair.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.TablePair.#ctor(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.TablePair"/> struct.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The value.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.TablePair.Nil">
            <summary>
            Gets the nil pair
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.TailCallData">
            <summary>
            Class used to support "tail" continuations - a way for C# / Lua interaction which supports 
            coroutine yielding (at the expense of a LOT of added complexity in calling code).
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.TailCallData.Function">
            <summary>
            Gets or sets the function to call
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.TailCallData.Args">
            <summary>
            Gets or sets the arguments to the function
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.TailCallData.Continuation">
            <summary>
            Gets or sets the callback to be used as a continuation.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.TailCallData.ErrorHandler">
            <summary>
            Gets or sets the callback to be used in case of errors.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.TailCallData.ErrorHandlerBeforeUnwind">
            <summary>
            Gets or sets the error handler to be called before stack unwinding
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.TypeValidationFlags">
            <summary>
            Flags to alter the way the DynValue.CheckType and other related functions operate on data types for
            validation.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.TypeValidationFlags.None">
            <summary>
            No type validation specific behaviour
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.TypeValidationFlags.AllowNil">
            <summary>
            Nil and Void values are allowed (and returned by the call)
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.TypeValidationFlags.AutoConvert">
            <summary>
            Simple autoconversions are attempted: 
            1) Numbers are convertible to strings
            2) Strings are convertible to numbers if they contain a number
            3) Everything is convertible to boolean (with void and nil converting to 'false', everything else converting to 'true')
            Note: if both AutoConvert and AllowNil are specified, nils will NOT be converted to false booleans.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.TypeValidationFlags.Default">
            <summary>
            The default : Autoconverting values, no nils.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.UserData">
            <summary>
            Class exposing C# objects as Lua userdata.
            For efficiency, a global registry of types is maintained, instead of a per-script one.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.UserData.UserValue">
            <summary>
            Gets or sets the "uservalue". See debug.getuservalue and debug.setuservalue.
            http://www.lua.org/manual/5.2/manual.html#pdf-debug.setuservalue
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.UserData.Object">
            <summary>
            Gets the object associated to this userdata (null for statics)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.UserData.Descriptor">
            <summary>
            Gets the type descriptor of this userdata
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.RegisterType``1(MoonSharp.Interpreter.InteropAccessMode,System.String)">
            <summary>
            Registers a type for userdata interop
            </summary>
            <typeparam name="T">The type to be registered</typeparam>
            <param name="accessMode">The access mode (optional).</param>
            <param name="friendlyName">Friendly name for the type (optional)</param>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.RegisterType(System.Type,MoonSharp.Interpreter.InteropAccessMode,System.String)">
            <summary>
            Registers a type for userdata interop
            </summary>
            <param name="type">The type to be registered</param>
            <param name="accessMode">The access mode (optional).</param>
            <param name="friendlyName">Friendly name for the type (optional)</param>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.RegisterProxyType(MoonSharp.Interpreter.Interop.IProxyFactory,MoonSharp.Interpreter.InteropAccessMode,System.String)">
            <summary>
            Registers a proxy type.
            </summary>
            <param name="proxyFactory">The proxy factory.</param>
            <param name="accessMode">The access mode.</param>
            <param name="friendlyName">A friendly name for the descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.RegisterProxyType``2(System.Func{``1,``0},MoonSharp.Interpreter.InteropAccessMode,System.String)">
            <summary>
            Registers a proxy type using a delegate.
            </summary>
            <typeparam name="TProxy">The type of the proxy.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="wrapDelegate">A delegate creating a proxy object from a target object.</param>
            <param name="accessMode">The access mode.</param>
            <param name="friendlyName">A friendly name for the descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.RegisterType``1(MoonSharp.Interpreter.Interop.IUserDataDescriptor)">
            <summary>
            Registers a type with a custom userdata descriptor
            </summary>
            <typeparam name="T">The type to be registered</typeparam>
            <param name="customDescriptor">The custom descriptor.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.RegisterType(System.Type,MoonSharp.Interpreter.Interop.IUserDataDescriptor)">
            <summary>
            Registers a type with a custom userdata descriptor
            </summary>
            <param name="type">The type to be registered</param>
            <param name="customDescriptor">The custom descriptor.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.RegisterType(MoonSharp.Interpreter.Interop.IUserDataDescriptor)">
            <summary>
            Registers a type with a custom userdata descriptor
            </summary>
            <param name="customDescriptor">The custom descriptor.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.RegisterAssembly(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Registers all types marked with a MoonSharpUserDataAttribute that ar contained in an assembly.
            </summary>
            <param name="asm">The assembly.</param>
            <param name="includeExtensionTypes">if set to <c>true</c> extension types are registered to the appropriate registry.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.IsTypeRegistered(System.Type)">
            <summary>
            Determines whether the specified type is registered. Note that this should be used only to check if a descriptor
            has been registered EXACTLY. For many types a descriptor can still be created, for example through the descriptor
            of a base type or implemented interfaces.
            </summary>
            <param name="t">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.IsTypeRegistered``1">
            <summary>
            Determines whether the specified type is registered. Note that this should be used only to check if a descriptor
            has been registered EXACTLY. For many types a descriptor can still be created, for example through the descriptor
            of a base type or implemented interfaces.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.UnregisterType``1">
            <summary>
            Unregisters a type. 
            WARNING: unregistering types at runtime is a dangerous practice and may cause unwanted errors.
            Use this only for testing purposes or to re-register the same type in a slightly different way.
            Additionally, it's a good practice to discard all previous loaded scripts after calling this method.
            </summary>
            <typeparam name="T">The type to be unregistered</typeparam>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.UnregisterType(System.Type)">
            <summary>
            Unregisters a type.
            WARNING: unregistering types at runtime is a dangerous practice and may cause unwanted errors.
            Use this only for testing purposes or to re-register the same type in a slightly different way.
            Additionally, it's a good practice to discard all previous loaded scripts after calling this method.
            </summary>
            <param name="t">The The type to be unregistered</param>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.Create(System.Object,MoonSharp.Interpreter.Interop.IUserDataDescriptor)">
            <summary>
            Creates a userdata DynValue from the specified object, using a specific descriptor
            </summary>
            <param name="o">The object</param>
            <param name="descr">The descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.Create(System.Object)">
            <summary>
            Creates a userdata DynValue from the specified object
            </summary>
            <param name="o">The object</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.CreateStatic(MoonSharp.Interpreter.Interop.IUserDataDescriptor)">
            <summary>
            Creates a static userdata DynValue from the specified IUserDataDescriptor
            </summary>
            <param name="descr">The IUserDataDescriptor</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.CreateStatic(System.Type)">
            <summary>
            Creates a static userdata DynValue from the specified Type
            </summary>
            <param name="t">The type</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.CreateStatic``1">
            <summary>
            Creates a static userdata DynValue from the specified Type
            </summary>
            <typeparam name="T">The Type</typeparam>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.UserData.RegistrationPolicy">
            <summary>
            Gets or sets the registration policy to be used in the whole application
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.UserData.DefaultAccessMode">
            <summary>
            Gets or sets the default access mode to be used in the whole application
            </summary>
            <value>
            The default access mode.
            </value>
            <exception cref="T:System.ArgumentException">InteropAccessMode is InteropAccessMode.Default</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.RegisterExtensionType(System.Type,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Registers an extension Type (that is a type containing extension methods)
            </summary>
            <param name="type">The type.</param>
            <param name="mode">The InteropAccessMode.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.GetExtensionMethodsByNameAndType(System.String,System.Type)">
            <summary>
            Gets all the extension methods which can match a given name and extending a given Type
            </summary>
            <param name="name">The name.</param>
            <param name="extendedType">The extended type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.GetExtensionMethodsChangeVersion">
            <summary>
            Gets a number which gets incremented everytime the extension methods registry changes.
            Use this to invalidate caches based on extension methods
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.GetDescriptorForType``1(System.Boolean)">
            <summary>
            Gets the best possible type descriptor for a specified CLR type.
            </summary>
            <typeparam name="T">The CLR type for which the descriptor is desired.</typeparam>
            <param name="searchInterfaces">if set to <c>true</c> interfaces are used in the search.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.GetDescriptorForType(System.Type,System.Boolean)">
            <summary>
            Gets the best possible type descriptor for a specified CLR type.
            </summary>
            <param name="type">The CLR type for which the descriptor is desired.</param>
            <param name="searchInterfaces">if set to <c>true</c> interfaces are used in the search.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.GetDescriptorForObject(System.Object)">
            <summary>
            Gets the best possible type descriptor for a specified CLR object.
            </summary>
            <param name="o">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.GetDescriptionOfRegisteredTypes(System.Boolean)">
            <summary>
            Gets a table with the description of registered types.
            </summary>
            <param name="useHistoricalData">if set to true, it will also include the last found descriptor of all unregistered types.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.UserData.GetRegisteredTypes(System.Boolean)">
            <summary>
            Gets all the registered types.
            </summary>
            <param name="useHistoricalData">if set to true, it will also include the last found descriptor of all unregistered types.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.WellKnownSymbols">
            <summary>
            Constants of well known "symbols" in the MoonSharp grammar
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.WellKnownSymbols.VARARGS">
            <summary>
            The variadic argument symbol ("...")
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.WellKnownSymbols.ENV">
            <summary>
            The environment symbol ("_ENV")
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.YieldRequest">
            <summary>
            Class wrapping a request to yield a coroutine
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.YieldRequest.ReturnValues">
            <summary>
            The return values of the coroutine
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.YieldRequest.Forced">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MoonSharp.Interpreter.YieldRequest"/> is a forced yield.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Debugging.DebuggerAction">
            <summary>
            Wrapper for a debugger initiated action 
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType">
            <summary>
            Type of the action
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.ByteCodeStepIn">
            <summary>
            Step-in at the bytecode level
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.ByteCodeStepOver">
            <summary>
            Step-over at the bytecode level
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.ByteCodeStepOut">
            <summary>
            Step-out at the bytecode level
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.StepIn">
            <summary>
            Step-in at the source level
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.StepOver">
            <summary>
            Step-over at the source level
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.StepOut">
            <summary>
            Step-out at the source level
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.Run">
            <summary>
            Continue execution "freely"
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.ToggleBreakpoint">
            <summary>
            Toggles breakpoint 
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.SetBreakpoint">
            <summary>
            Sets a breakpoint
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.ClearBreakpoint">
            <summary>
            Clears a breakpoint
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.ResetBreakpoints">
            <summary>
            Reset all breakpoints
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.Refresh">
            <summary>
            Refresh the data
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.HardRefresh">
            <summary>
            Hard refresh of data
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerAction.ActionType.None">
            <summary>
            No action
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.DebuggerAction.Action">
            <summary>
            The type of action
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.DebuggerAction.TimeStampUTC">
            <summary>
            Gets the time stamp UTC of this action
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.DebuggerAction.SourceID">
            <summary>
            Gets or sets the source identifier this action refers to. <see cref="M:MoonSharp.Interpreter.Script.GetSourceCode(System.Int32)"/>
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.DebuggerAction.SourceLine">
            <summary>
            Gets or sets the source line this action refers to.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.DebuggerAction.SourceCol">
            <summary>
            Gets or sets the source column this action refers to.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.DebuggerAction.Lines">
            <summary>
            Gets or sets the lines. This is used for the ResetBreakpoints and sets line-based bps only.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.DebuggerAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Debugging.DebuggerAction"/> class.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.DebuggerAction.Age">
            <summary>
            Gets the age of this debugger action
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.DebuggerAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Debugging.DebuggerCaps">
            <summary>
            Enumeration of capabilities for a debugger
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerCaps.CanDebugSourceCode">
            <summary>
            Flag set if the debugger can debug source code
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerCaps.CanDebugByteCode">
            <summary>
            Flag set if the can debug VM bytecode
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.DebuggerCaps.HasLineBasedBreakpoints">
            <summary>
            Flag set if the debugger uses breakpoints based on lines instead of tokens
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Debugging.DebugService">
            <summary>
            Class providing services specific to debugger implementations.
            </summary>
            <seealso cref="T:MoonSharp.Interpreter.IScriptPrivateResource" />
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.DebugService.OwnerScript">
            <summary>
            Gets the script owning this resource.
            </summary>
            <value>
            The script owning this resource.
            </value>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.DebugService.ResetBreakPoints(MoonSharp.Interpreter.Debugging.SourceCode,System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Resets the break points for a given file. Supports only line-based breakpoints.
            </summary>
            <param name="src">The source.</param>
            <param name="lines">The lines.</param>
            <returns>The lines for which breakpoints have been set</returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Debugging.IDebugger">
            <summary>
            Interface for debuggers to implement, in order to provide debugging facilities to Scripts.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.GetDebuggerCaps">
            <summary>
            Gets the debugger caps.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.SetDebugService(MoonSharp.Interpreter.Debugging.DebugService)">
            <summary>
            Sets the debug service for this debugger
            </summary>
            <param name="debugService">The debug service.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.SetSourceCode(MoonSharp.Interpreter.Debugging.SourceCode)">
            <summary>
            Called by the script engine  when a source code is added or changed.
            </summary>
            <param name="sourceCode">The source code object.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.SetByteCode(System.String[])">
            <summary>
            Called by the script engine  when the bytecode changes.
            </summary>
            <param name="byteCode">The bytecode source</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.IsPauseRequested">
            <summary>
            Called by the script engine at execution time to check if a break has 
            been requested. Should return pretty fast as it's called A LOT.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.SignalRuntimeException(MoonSharp.Interpreter.ScriptRuntimeException)">
            <summary>
            Called by the script engine when a runtime error occurs. 
            The debugger can return true to signal the engine that it wants to break 
            into the source of the error. If it does so, it should also return true 
            to subsequent calls to IsPauseRequested().
            </summary>
            <param name="ex">The runtime exception.</param>
            <returns>True if this error should break execution.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.GetAction(System.Int32,MoonSharp.Interpreter.Debugging.SourceRef)">
            <summary>
            Called by the script engine to get what action to do next.
            </summary>
            <param name="ip">The instruction pointer in bytecode.</param>
            <param name="sourceref">The source reference.</param>
            <returns>T</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.SignalExecutionEnded">
            <summary>
            Called by the script engine when the execution ends.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.Update(MoonSharp.Interpreter.Debugging.WatchType,System.Collections.Generic.IEnumerable{MoonSharp.Interpreter.Debugging.WatchItem})">
            <summary>
            Called by the script engine to update watches of a given type. Note 
            that this method is not called only for watches in the strictest term, 
            but also for the stack, etc.
            </summary>
            <param name="watchType">Type of the watch.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.GetWatchItems">
            <summary>
            Called by the script engine to get which expressions are active 
            watches in the debugger.
            </summary>
            <returns>A list of watches</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.IDebugger.RefreshBreakpoints(System.Collections.Generic.IEnumerable{MoonSharp.Interpreter.Debugging.SourceRef})">
            <summary>
            Called by the script engine to refresh the breakpoint list.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Debugging.SourceCode">
            <summary>
            Class representing the source code of a given script
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.SourceCode.Name">
            <summary>
            Gets the name of the source code
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.SourceCode.Code">
            <summary>
            Gets the source code as a string
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.SourceCode.Lines">
            <summary>
            Gets the source code lines.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.SourceCode.OwnerScript">
            <summary>
            Gets the script owning this resource.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.SourceCode.SourceID">
            <summary>
            Gets the source identifier inside a script
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.SourceCode.GetCodeSnippet(MoonSharp.Interpreter.Debugging.SourceRef)">
            <summary>
            Gets the code snippet represented by a source ref
            </summary>
            <param name="sourceCodeRef">The source code reference.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Debugging.SourceRef">
            <summary>
            Class representing a reference to source code interval
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.SourceRef.IsClrLocation">
            <summary>
            Gets a value indicating whether this location is inside CLR .
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.SourceRef.SourceIdx">
            <summary>
            Gets the index of the source.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.SourceRef.FromChar">
            <summary>
            Gets from which column the source code ref starts
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.SourceRef.ToChar">
            <summary>
            Gets to which column the source code ref ends
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.SourceRef.FromLine">
            <summary>
            Gets from which line the source code ref starts
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.SourceRef.ToLine">
            <summary>
            Gets to which line the source code ref ends
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.SourceRef.IsStepStop">
            <summary>
            Gets a value indicating whether this instance is a stop "step" in source mode
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.SourceRef.Breakpoint">
            <summary>
            Gets a value indicating whether this instance is a breakpoint
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.SourceRef.CannotBreakpoint">
            <summary>
            Gets a value indicating whether this instance cannot be set as a breakpoint
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.SourceRef.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.SourceRef.IncludesLocation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets whether the source ref includes the specified location
            </summary>
            <param name="sourceIdx">Index of the source.</param>
            <param name="line">The line.</param>
            <param name="col">The column.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.SourceRef.SetNoBreakPoint">
            <summary>
            Sets the CannotBreakpoint flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.SourceRef.FormatLocation(MoonSharp.Interpreter.Script,System.Boolean)">
            <summary>
            Formats the location according to script preferences
            </summary>
            <param name="script">The script.</param>
            <param name="forceClassicFormat">if set to <c>true</c> the classic Lua format is forced.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Debugging.WatchItem">
            <summary>
            A watch item for the debugger to consume.
            Most properties make or not sense depending on the WatchType.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.WatchItem.Address">
            <summary>
            Gets or sets the address of the item
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.WatchItem.BasePtr">
            <summary>
            Gets or sets the base pointer (base value of v-stack at entering the function).
            Valid only for call-stack items
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.WatchItem.RetAddress">
            <summary>
            Gets or sets the return address.
            Valid only for call-stack items
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.WatchItem.Name">
            <summary>
            Gets or sets the name of the item
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.WatchItem.Value">
            <summary>
            Gets or sets the value of the item
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.WatchItem.LValue">
            <summary>
            Gets or sets the symbol reference of the item 
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.WatchItem.IsError">
            <summary>
            Gets or sets a value indicating whether this instance is generating an error.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Debugging.WatchItem.Location">
            <summary>
            Gets or sets the source location this item refers to.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Debugging.WatchItem.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Debugging.WatchType">
            <summary>
            Enumeration of the possible watch types
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.WatchType.Watches">
            <summary>
            A real variable watch
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.WatchType.VStack">
            <summary>
            The status of the v-stack
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.WatchType.CallStack">
            <summary>
            The call stack
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.WatchType.Coroutines">
            <summary>
            The list of coroutines
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.WatchType.Locals">
            <summary>
            Topmost local variables
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.WatchType.Threads">
            <summary>
            The list of currently active coroutines
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Debugging.WatchType.MaxValue">
            <summary>
            The maximum value of this enum
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Debugging.NamespaceDoc">
            <summary>
            Namespace containing classes used to support debuggers
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Diagnostics.PerformanceCounter">
            <summary>
            Enumeration of the possible performance counters
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Diagnostics.PerformanceCounter.AstCreation">
            <summary>
            Measures the time spent parsing the source creating the AST
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Diagnostics.PerformanceCounter.Compilation">
            <summary>
            Measures the time spent converting ASTs in bytecode
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Diagnostics.PerformanceCounter.Execution">
            <summary>
            Measures the time spent in executing scripts
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Diagnostics.PerformanceCounter.AdaptersCompilation">
            <summary>
            Measures the on the fly creation/compilation of functions in userdata descriptors
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Diagnostics.PerformanceCounter.LastValue">
            <summary>
            Sentinel value to get the enum size
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Diagnostics.PerformanceCounters.GlobalPerformanceStopwatch">
            <summary>
            This class is not *really* IDisposable.. it's just use to have a RAII like pattern.
            You are free to reuse this instance after calling Dispose.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Diagnostics.PerformanceCounters.PerformanceStopwatch">
            <summary>
            This class is not *really* IDisposable.. it's just use to have a RAII like pattern.
            You are free to reuse this instance after calling Dispose.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Diagnostics.PerformanceCounterType">
            <summary>
            Enumeration of unit of measures of the performance counters
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Diagnostics.PerformanceCounterType.MemoryBytes">
            <summary>
            The performance counter is specified in bytes (of memory)
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Diagnostics.PerformanceCounterType.TimeMilliseconds">
            <summary>
            The performance counter is specified in milliseconds
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Diagnostics.PerformanceResult">
            <summary>
            The result of a performance counter
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Diagnostics.PerformanceResult.Name">
            <summary>
            Gets the name of the performance counter which generated this result.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Diagnostics.PerformanceResult.Counter">
            <summary>
            Gets the quantity monitored - see Type to understand what this field contains
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Diagnostics.PerformanceResult.Instances">
            <summary>
            Gets the number of instances which led to the specified counter being incremented - e.g. the times a specific
            code is executed, or object instanced
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Diagnostics.PerformanceResult.Global">
            <summary>
            Gets a value indicating whether this <see cref="T:MoonSharp.Interpreter.Diagnostics.PerformanceResult"/> is global or relative to the resource
            for which it's called.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Diagnostics.PerformanceResult.Type">
            <summary>
            Gets the unit of measure of the Counter field.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Diagnostics.PerformanceResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Diagnostics.PerformanceResult.PerformanceCounterTypeToString(MoonSharp.Interpreter.Diagnostics.PerformanceCounterType)">
            <summary>
            Converts a PerformanceCounterType to a string.
            </summary>
            <param name="Type">The type.</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Diagnostics.PerformanceStatistics">
            <summary>
            A single object of this type exists for every script and gives access to performance statistics.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Diagnostics.PerformanceStatistics.Enabled">
            <summary>
            Gets or sets a value indicating whether this collection of performance stats is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MoonSharp.Interpreter.Diagnostics.PerformanceStatistics.GetPerformanceCounterResult(MoonSharp.Interpreter.Diagnostics.PerformanceCounter)">
            <summary>
            Gets the result of the specified performance counter .
            </summary>
            <param name="pc">The PerformanceCounter.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Diagnostics.PerformanceStatistics.StartStopwatch(MoonSharp.Interpreter.Diagnostics.PerformanceCounter)">
            <summary>
            Starts a stopwatch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Diagnostics.PerformanceStatistics.StartGlobalStopwatch(MoonSharp.Interpreter.Diagnostics.PerformanceCounter)">
            <summary>
            Starts a stopwatch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Diagnostics.PerformanceStatistics.GetPerformanceLog">
            <summary>
            Gets a string with a complete performance log.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Diagnostics.NamespaceDoc">
            <summary>
            Namespace containing classes used to support self diagnostics (e.g. performance counters)
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.DynamicExpressionException">
            <summary>
            Exception thrown when a dynamic expression is invalid
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynamicExpressionException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.DynamicExpressionException"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.DynamicExpressionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.DynamicExpressionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:MoonSharp.Interpreter.InternalErrorException">
            <summary>
            Exception thrown when an inconsistent state is reached in the interpreter
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.InterpreterException">
            <summary>
            Base type of all exceptions thrown in MoonSharp
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.InterpreterException.#ctor(System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.InterpreterException"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.InterpreterException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.InterpreterException"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.InterpreterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.InterpreterException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.InterpreterException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.InterpreterException"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.InterpreterException.InstructionPtr">
            <summary>
            Gets the instruction pointer of the execution (if it makes sense)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.InterpreterException.CallStack">
            <summary>
            Gets the interpreter call stack.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.InterpreterException.DecoratedMessage">
            <summary>
            Gets the decorated message (error message plus error location in script) if possible.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.InterpreterException.DoNotDecorateMessage">
            <summary>
            Gets or sets a value indicating whether the message should not be decorated
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.InterpreterException.Rethrow">
            <summary>
            Rethrows this instance if 
            </summary>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.ScriptRuntimeException">
            <summary>
            Exception for all runtime errors. In addition to constructors, it offers a lot of static methods
            generating more "standard" Lua errors.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.ScriptRuntimeException"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.#ctor(MoonSharp.Interpreter.ScriptRuntimeException)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.ScriptRuntimeException"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.ScriptRuntimeException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.ScriptRuntimeException"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.ArithmeticOnNonNumber(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            an arithmetic operation was attempted on non-numbers
            </summary>
            <param name="l">The left operand.</param>
            <param name="r">The right operand (or null).</param>
            <returns>The exception to be raised.</returns>
            <exception cref="T:MoonSharp.Interpreter.InternalErrorException">If both are numbers</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.ConcatOnNonString(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a concat operation was attempted on non-strings
            </summary>
            <param name="l">The left operand.</param>
            <param name="r">The right operand.</param>
            <returns>The exception to be raised.</returns>
            <exception cref="T:MoonSharp.Interpreter.InternalErrorException">If both are numbers or strings</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.LenOnInvalidType(MoonSharp.Interpreter.DynValue)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a len operator was applied on an invalid operand
            </summary>
            <param name="r">The operand.</param>
            <returns>The exception to be raised.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.CompareInvalidType(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a comparison operator was applied on an invalid combination of operand types
            </summary>
            <param name="l">The left operand.</param>
            <param name="r">The right operand.</param>
            <returns>The exception to be raised.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.BadArgument(System.Int32,System.String,System.String)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a function was called with a bad argument
            </summary>
            <param name="argNum">The argument number (0-based).</param>
            <param name="funcName">Name of the function generating this error.</param>
            <param name="message">The error message.</param>
            <returns>The exception to be raised.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.BadArgumentUserData(System.Int32,System.String,System.Type,System.Object,System.Boolean)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a function was called with a bad userdata argument
            </summary>
            <param name="argNum">The argument number (0-based).</param>
            <param name="funcName">Name of the function generating this error.</param>
            <param name="expected">The expected System.Type.</param>
            <param name="got">The object which was used.</param>
            <param name="allowNil">True if nils were allowed in this call.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.BadArgument(System.Int32,System.String,MoonSharp.Interpreter.DataType,MoonSharp.Interpreter.DataType,System.Boolean)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a function was called with a bad argument
            </summary>
            <param name="argNum">The argument number (0-based).</param>
            <param name="funcName">Name of the function generating this error.</param>
            <param name="expected">The expected data type.</param>
            <param name="got">The data type received.</param>
            <param name="allowNil">True if nils were allowed in this call.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.BadArgument(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a function was called with a bad argument
            </summary>
            <param name="argNum">The argument number (0-based).</param>
            <param name="funcName">Name of the function generating this error.</param>
            <param name="expected">The expected type description.</param>
            <param name="got">The description of the type received.</param>
            <param name="allowNil">True if nils were allowed in this call.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.BadArgumentNoValue(System.Int32,System.String,MoonSharp.Interpreter.DataType)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a function was called with no value when a value was required.
            
            This function creates a message like "bad argument #xxx to 'yyy' (zzz expected, got no value)"
            while <see cref="M:MoonSharp.Interpreter.ScriptRuntimeException.BadArgumentValueExpected(System.Int32,System.String)" /> creates a message like "bad argument #xxx to 'yyy' (value expected)"
            </summary>
            <param name="argNum">The argument number (0-based).</param>
            <param name="funcName">Name of the function generating this error.</param>
            <param name="expected">The expected data type.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.BadArgumentIndexOutOfRange(System.String,System.Int32)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            an out of range index was specified
            </summary>
            <param name="argNum">The argument number (0-based).</param>
            <param name="funcName">Name of the function generating this error.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.BadArgumentNoNegativeNumbers(System.Int32,System.String)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a function was called with a negative number when a positive one was expected.
            </summary>
            <param name="argNum">The argument number (0-based).</param>
            <param name="funcName">Name of the function generating this error.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.BadArgumentValueExpected(System.Int32,System.String)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a function was called with no value when a value was required.
            This function creates a message like "bad argument #xxx to 'yyy' (value expected)"
            while <see cref="M:MoonSharp.Interpreter.ScriptRuntimeException.BadArgumentNoValue(System.Int32,System.String,MoonSharp.Interpreter.DataType)" /> creates a message like "bad argument #xxx to 'yyy' (zzz expected, got no value)"
            </summary>
            <param name="argNum">The argument number (0-based).</param>
            <param name="funcName">Name of the function generating this error.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.IndexType(MoonSharp.Interpreter.DynValue)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            an invalid attempt to index the specified object was made
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.LoopInIndex">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a loop was detected when performing __index over metatables.
            </summary>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.LoopInNewIndex">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a loop was detected when performing __newindex over metatables.
            </summary>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.LoopInCall">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a loop was detected when performing __call over metatables.
            </summary>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.TableIndexIsNil">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a table indexing operation used nil as the key.
            </summary>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.TableIndexIsNaN">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a table indexing operation used a NaN as the key.
            </summary>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.ConvertToNumberFailed(System.Int32)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a conversion to number failed.
            </summary>
            <param name="stage">
            Selects the correct error message:
            0 - "value must be a number"
            1 - "'for' initial value must be a number"
            2 - "'for' step must be a number"
            3 - "'for' limit must be a number"
            </param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.ConvertObjectFailed(System.Object)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a conversion of a CLR type to a Lua type has failed.
            </summary>
            <param name="obj">The object which could not be converted.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.ConvertObjectFailed(MoonSharp.Interpreter.DataType)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a conversion of a Lua type to a CLR type has failed.
            </summary>
            <param name="t">The Lua type.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.ConvertObjectFailed(MoonSharp.Interpreter.DataType,System.Type)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a constrained conversion of a Lua type to a CLR type has failed.
            </summary>
            <param name="t">The Lua type.</param>
            <param name="t2">The expected CLR type.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.UserDataArgumentTypeMismatch(MoonSharp.Interpreter.DataType,System.Type)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            a userdata of a specific CLR type was expected and a non-userdata type was passed.
            </summary>
            <param name="t">The Lua type.</param>
            <param name="clrType">The expected CLR type.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.UserDataMissingField(System.String,System.String)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            an attempt to index an invalid member of a userdata was done.
            </summary>
            <param name="typename">The name of the userdata type.</param>
            <param name="fieldname">The field name.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.CannotResumeNotSuspended(MoonSharp.Interpreter.CoroutineState)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            an attempt resume a coroutine in an invalid state was done.
            </summary>
            <param name="state">The state of the coroutine.</param>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.CannotYield">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            an attempt to yield across a CLR boundary was made.
            </summary>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.CannotYieldMain">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            an attempt to yield from the main coroutine was made.
            </summary>
            <returns>
            The exception to be raised.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.AttemptToCallNonFunc(MoonSharp.Interpreter.DataType,System.String)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            an attempt to call a non-function was made
            </summary>
            <param name="type">The lua non-function data type.</param>
            <param name="debugText">The debug text to aid location (appears as "near 'xxx'").</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.AccessInstanceMemberOnStatics(MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            an attempt to access a non-static member from a static userdata was made
            </summary>
            <param name="desc">The member descriptor.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.AccessInstanceMemberOnStatics(MoonSharp.Interpreter.Interop.IUserDataDescriptor,MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor)">
            <summary>
            Creates a ScriptRuntimeException with a predefined error message specifying that
            an attempt to access a non-static member from a static userdata was made
            </summary>
            <param name="typeDescr">The type descriptor.</param>
            <param name="desc">The member descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptRuntimeException.Rethrow">
            <summary>
            Rethrows this instance if 
            </summary>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.SyntaxErrorException">
            <summary>
            Exception for all parsing/lexing errors. 
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.SyntaxErrorException.IsPrematureStreamTermination">
            <summary>
            Gets or sets a value indicating whether this exception was caused by premature stream termination (that is, unexpected EOF).
            This can be used in REPL interfaces to tell between unrecoverable errors and those which can be recovered by extra input.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.SyntaxErrorException.Rethrow">
            <summary>
            Rethrows this instance if 
            </summary>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.DynamicExpression">
            <summary>
            Represents a dynamic expression in the script
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.DynamicExpression.ExpressionCode">
            <summary>
            The code which generated this expression
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.DynamicExpression.Evaluate(MoonSharp.Interpreter.ScriptExecutionContext)">
            <summary>
            Evaluates the expression
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynamicExpression.FindSymbol(MoonSharp.Interpreter.ScriptExecutionContext)">
            <summary>
            Finds a symbol in the expression
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.DynamicExpression.OwnerScript">
            <summary>
            Gets the script owning this resource.
            </summary>
            <value>
            The script owning this resource.
            </value>
        </member>
        <member name="M:MoonSharp.Interpreter.DynamicExpression.IsConstant">
            <summary>
            Determines whether this instance is a constant expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynamicExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.DynamicExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Execution.ClosureContext">
            <summary>
            The scope of a closure (container of upvalues)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Execution.ClosureContext.Symbols">
            <summary>
            Gets the symbols.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.ScriptExecutionContext">
            <summary>
            Class giving access to details of the environment where the script is executing
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptExecutionContext.IsDynamicExecution">
            <summary>
            Gets a value indicating whether this instance is running a dynamic execution.
            Under a dynamic execution, most methods of ScriptExecutionContext are not reliable as the
            processing engine of the script is not "really" running or is not available.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptExecutionContext.CallingLocation">
            <summary>
            Gets the location of the code calling back 
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptExecutionContext.AdditionalData">
            <summary>
            Gets or sets the additional data associated to this CLR function call.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptExecutionContext.GetMetatable(MoonSharp.Interpreter.DynValue)">
            <summary>
            Gets the metatable associated with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptExecutionContext.GetMetamethod(MoonSharp.Interpreter.DynValue,System.String)">
            <summary>
            Gets the specified metamethod associated with the given value.
            </summary>
            <param name="value">The value.</param>
            <param name="metamethod">The metamethod name.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptExecutionContext.GetMetamethodTailCall(MoonSharp.Interpreter.DynValue,System.String,MoonSharp.Interpreter.DynValue[])">
            <summary>
            prepares a tail call request for the specified metamethod, or null if no metamethod is found.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptExecutionContext.GetBinaryMetamethod(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue,System.String)">
            <summary>
            Gets the metamethod to be used for a binary operation using op1 and op2.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptExecutionContext.GetScript">
            <summary>
            Gets the script object associated with this request
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptExecutionContext.GetCallingCoroutine">
            <summary>
            Gets the coroutine which is performing the call
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptExecutionContext.EmulateClassicCall(MoonSharp.Interpreter.CallbackArguments,System.String,System.Func{MoonSharp.Interpreter.Interop.LuaStateInterop.LuaState,System.Int32})">
            <summary>
            Calls a callback function implemented in "classic way". 
            Useful to port C code from Lua, or C# code from UniLua and KopiLua.
            Lua : http://www.lua.org/
            UniLua : http://github.com/xebecnan/UniLua
            KopiLua : http://github.com/NLua/KopiLua
            </summary>
            <param name="args">The arguments.</param>
            <param name="functionName">Name of the function - for error messages.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptExecutionContext.Call(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue[])">
            <summary>
            Calls the specified function, supporting most cases. The called function must not yield.
            </summary>
            <param name="func">The function; it must be a Function or ClrFunction or have a call metamethod defined.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">If the function yields, returns a tail call request with continuations/handlers or, of course, if it encounters errors.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptExecutionContext.EvaluateSymbol(MoonSharp.Interpreter.SymbolRef)">
            <summary>
            Tries to get the reference of a symbol in the current execution state
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptExecutionContext.EvaluateSymbolByName(System.String)">
            <summary>
            Tries to get the value of a symbol in the current execution state
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptExecutionContext.FindSymbolByName(System.String)">
            <summary>
            Finds a symbol by name in the current execution state
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptExecutionContext.CurrentGlobalEnv">
            <summary>
            Gets the current global env, or null if not found.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.ScriptExecutionContext.PerformMessageDecorationBeforeUnwind(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.ScriptRuntimeException)">
            <summary>
            Performs a message decoration before unwinding after an error. To be used in the implementation of xpcall like functions.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptExecutionContext.OwnerScript">
            <summary>
            Gets the script owning this resource.
            </summary>
            <value>
            The script owning this resource.
            </value>
        </member>
        <member name="T:MoonSharp.Interpreter.MoonSharpHiddenAttribute">
            <summary>
            Forces a class member visibility to scripts. Can be used to hide public members. Equivalent to MoonSharpVisible(false).
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.MoonSharpHideMemberAttribute">
            <summary>
            Lists a userdata member not to be exposed to scripts referencing it by name.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.MoonSharpHideMemberAttribute.MemberName">
            <summary>
            Gets the name of the member to be hidden.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.MoonSharpHideMemberAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.MoonSharpHideMemberAttribute"/> class.
            </summary>
            <param name="memberName">Name of the member to hide.</param>
        </member>
        <member name="T:MoonSharp.Interpreter.MoonSharpPropertyAttribute">
            <summary>
            Marks a property as a configruation property
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.MoonSharpPropertyAttribute.Name">
            <summary>
            The metamethod name (like '__div', '__ipairs', etc.)
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.MoonSharpPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.MoonSharpPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.MoonSharpPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.MoonSharpPropertyAttribute"/> class.
            </summary>
            <param name="name">The name for this property</param>
        </member>
        <member name="T:MoonSharp.Interpreter.MoonSharpUserDataAttribute">
            <summary>
            Marks a type of automatic registration as userdata (which happens only if UserData.RegisterAssembly is called).
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.MoonSharpUserDataAttribute.AccessMode">
            <summary>
            The interop access mode
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.MoonSharpUserDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.MoonSharpUserDataAttribute"/> class.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.MoonSharpUserDataMetamethodAttribute">
            <summary>
            Marks a method as the handler of metamethods of a userdata type
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.MoonSharpUserDataMetamethodAttribute.Name">
            <summary>
            The metamethod name (like '__div', '__ipairs', etc.)
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.MoonSharpUserDataMetamethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.MoonSharpUserDataMetamethodAttribute"/> class.
            </summary>
            <param name="name">The metamethod name (like '__div', '__ipairs', etc.)</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.MoonSharpVisibleAttribute">
            <summary>
            Forces a class member visibility to scripts. Can be used to hide public members or to expose non-public ones.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.MoonSharpVisibleAttribute.Visible">
            <summary>
            Gets a value indicating whether this <see cref="T:MoonSharp.Interpreter.Interop.MoonSharpVisibleAttribute"/> is set to "visible".
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.MoonSharpVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.MoonSharpVisibleAttribute"/> class.
            </summary>
            <param name="visible">if set to true the member will be exposed to scripts, if false the member will be hidden.</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor">
            <summary>
            An abstract user data descriptor which accepts members described by <see cref="T:MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor"/> objects and
            correctly dispatches to them.
            Metamethods are also by default dispatched to operator overloads and other similar methods - see
            <see cref="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.MetaIndex(MoonSharp.Interpreter.Script,System.Object,System.String)"/> .
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.SPECIALNAME_INDEXER_GET">
            <summary>
            The special name used by CLR for indexer getters
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.SPECIALNAME_INDEXER_SET">
            <summary>
            The special name used by CLR for indexer setters
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.SPECIALNAME_CAST_EXPLICIT">
            <summary>
            The special name used by CLR for explicit cast conversions
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.SPECIALNAME_CAST_IMPLICIT">
            <summary>
            The special name used by CLR for implicit cast conversions
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.Name">
            <summary>
            Gets the name of the descriptor (usually, the name of the type described).
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.Type">
            <summary>
            Gets the type this descriptor refers to
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.FriendlyName">
            <summary>
            Gets a human readable friendly name of the descriptor
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.StandardUserDataDescriptor" /> class.
            </summary>
            <param name="type">The type this descriptor refers to.</param>
            <param name="friendlyName">A friendly name for the type, or null.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.AddMetaMember(System.String,MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor)">
            <summary>
            Adds a member to the meta-members list.
            </summary>
            <param name="name">The name of the metamethod.</param>
            <param name="desc">The desc.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if a name conflict is detected and one of the conflicting members does not support overloads.
            </exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.AddDynValue(System.String,MoonSharp.Interpreter.DynValue)">
            <summary>
            Adds a DynValue as a member
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.AddMember(System.String,MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor)">
            <summary>
            Adds a property to the member list
            </summary>
            <param name="name">The name.</param>
            <param name="desc">The descriptor.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if a name conflict is detected and one of the conflicting members does not support overloads.
            </exception>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.MemberNames">
            <summary>
            Gets the member names.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.Members">
            <summary>
            Gets the members.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.FindMember(System.String)">
            <summary>
            Finds the member with a given name. If not found, null is returned.
            </summary>
            <param name="memberName">Name of the member.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.RemoveMember(System.String)">
            <summary>
            Removes the member with a given name. In case of overloaded functions, all overloads are removed.
            </summary>
            <param name="memberName">Name of the member.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.MetaMemberNames">
            <summary>
            Gets the meta member names.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.MetaMembers">
            <summary>
            Gets the meta members.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.FindMetaMember(System.String)">
            <summary>
            Finds the meta member with a given name. If not found, null is returned.
            </summary>
            <param name="memberName">Name of the member.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.RemoveMetaMember(System.String)">
            <summary>
            Removes the meta member with a given name. In case of overloaded functions, all overloads are removed.
            </summary>
            <param name="memberName">Name of the member.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.Index(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <summary>
            Performs an "index" "get" operation. This tries to resolve minor variations of member names.
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="index">The index.</param>
            <param name="isDirectIndexing">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.TryIndexOnExtMethod(MoonSharp.Interpreter.Script,System.Object,System.String)">
            <summary>
            Tries to perform an indexing operation by checking newly added extension methods for the given indexName.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="indexName">Member name to be indexed.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.HasMember(System.String)">
            <summary>
            Determines whether the descriptor contains the specified member (by exact name)
            </summary>
            <param name="exactName">Name of the member.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.HasMetaMember(System.String)">
            <summary>
            Determines whether the descriptor contains the specified member in the meta list (by exact name)
            </summary>
            <param name="exactName">Name of the meta-member.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.TryIndex(MoonSharp.Interpreter.Script,System.Object,System.String)">
            <summary>
            Tries to perform an indexing operation by checking methods and properties for the given indexName
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="indexName">Member name to be indexed.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.SetIndex(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <summary>
            Performs an "index" "set" operation. This tries to resolve minor variations of member names.
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="index">The index.</param>
            <param name="value">The value to be set</param>
            <param name="isDirectIndexing">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.TrySetIndex(MoonSharp.Interpreter.Script,System.Object,System.String,MoonSharp.Interpreter.DynValue)">
            <summary>
            Tries to perform an indexing "set" operation by checking methods and properties for the given indexName
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="indexName">Member name to be indexed.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.Camelify(System.String)">
            <summary>
            Converts the specified name from underscore_case to camelCase.
            Just a wrapper over the <see cref="T:MoonSharp.Interpreter.Interop.DescriptorHelpers"/> method with the same name,
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.UpperFirstLetter(System.String)">
            <summary>
            Converts the specified name to one with an uppercase first letter (something to Something).
            Just a wrapper over the <see cref="T:MoonSharp.Interpreter.Interop.DescriptorHelpers"/> method with the same name,
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.AsString(System.Object)">
            <summary>
            Converts this userdata to string
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.ExecuteIndexer(MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor,MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue)">
            <summary>
            Executes the specified indexer method.
            </summary>
            <param name="mdesc">The method descriptor</param>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="index">The indexer parameter</param>
            <param name="value">The dynvalue to set on a setter, or null.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.MetaIndex(MoonSharp.Interpreter.Script,System.Object,System.String)">
            <summary>
            Gets a "meta" operation on this userdata. If a descriptor does not support this functionality,
            it should return "null" (not a nil). 
            See <see cref="M:MoonSharp.Interpreter.Interop.IUserDataDescriptor.MetaIndex(MoonSharp.Interpreter.Script,System.Object,System.String)" /> for further details.
            
            If a method exists marked with <see cref="T:MoonSharp.Interpreter.MoonSharpUserDataMetamethodAttribute" /> for the specific
            metamethod requested, that method is returned.
            
            If the above fails, the following dispatching occur:
            
            __add, __sub, __mul, __div, __mod and __unm are dispatched to C# operator overloads (if they exist)
            __eq is dispatched to System.Object.Equals.
            __lt and __le are dispatched IComparable.Compare, if the type implements IComparable or IComparable{object}
            __len is dispatched to Length and Count properties, if those exist.
            __iterator is handled if the object implements IEnumerable or IEnumerator.
            __tonumber is dispatched to implicit or explicit conversion operators to standard numeric types.
            __tobool is dispatched to an implicit or explicit conversion operator to bool. If that fails, operator true is used.
            
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="metaname">The name of the metamember.</param>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor.IsTypeCompatible(System.Type,System.Object)">
            <summary>
            Determines whether the specified object is compatible with the specified type.
            Unless a very specific behaviour is needed, the correct implementation is a 
            simple " return type.IsInstanceOfType(obj); "
            </summary>
            <param name="type">The type.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor">
            <summary>
            Base interface to describe access to members of a given type.
            While it's not infrastructural to implement custom type descriptors, it's needed for 
            classes extending <see cref="T:MoonSharp.Interpreter.Interop.BasicDescriptors.DispatchingUserDataDescriptor"/>.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor.IsStatic">
            <summary>
            Gets a value indicating whether the described member is static.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor.Name">
            <summary>
            Gets the name of the member
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor.MemberAccess">
            <summary>
            Gets the types of access supported by this member
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor.GetValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets the value of this member as a <see cref="T:MoonSharp.Interpreter.DynValue"/> to be exposed to scripts.
            Implementors should raise exceptions if the value cannot be read or if access to an
            instance member through a static userdata is attempted.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object owning this member, or null if static.</param>
            <returns>The value of this member as a <see cref="T:MoonSharp.Interpreter.DynValue"/>.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor.SetValue(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value of this member from a <see cref="T:MoonSharp.Interpreter.DynValue"/>.
            Implementors should raise exceptions if the value cannot be read or if access to an
            instance member through a static userdata is attempted.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object owning this member, or null if static.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptor">
            <summary>
            Extension methods for <see cref="T:MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor" /> and <see cref="T:MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptorAccess"/> .
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptor.HasAllFlags(MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptorAccess,MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptorAccess)">
            <summary>
            Determines whether the specified MemberDescriptorAccess has ALL the specified flags.
            </summary>
            <param name="access">The access.</param>
            <param name="flag">The flag.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptor.CanRead(MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor)">
            <summary>
            Determines whether this instance can be read
            </summary>
            <param name="desc">The descriptor instance.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptor.CanWrite(MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor)">
            <summary>
            Determines whether this instance can be written to
            </summary>
            <param name="desc">The descriptor instance.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptor.CanExecute(MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor)">
            <summary>
            Determines whether this instance can be executed (called as a function)
            </summary>
            <param name="desc">The descriptor instance.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptor.GetGetterCallbackAsDynValue(MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor,MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets the getter of the member as a DynValue containing a callback
            </summary>
            <param name="desc">The descriptor instance.</param>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptor.WithAccessOrNull(MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor,MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptorAccess)">
            <summary>
            Returns the specified descriptor if it supports all the specified access modes, otherwise returns null.
            </summary>
            <param name="desc">The descriptor instance.</param>
            <param name="access">The access mode(s).</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptor.CheckAccess(MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor,MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptorAccess,System.Object)">
            <summary>
            Raises an appropriate ScriptRuntimeException if the specified access is not supported.
            Checks are made for the MemberDescriptorAccess permissions AND for the access of instance
            members through static userdatas.
            </summary>
            <param name="desc">The desc.</param>
            <param name="access">The access.</param>
            <param name="obj">The object to be checked for access.</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.BasicDescriptors.IOptimizableDescriptor">
            <summary>
            Interface for descriptors of any kind which support optimizations of their implementation according to InteropAccessMode
            modes. This should seldom - if ever - be implemented in user code.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.IOptimizableDescriptor.Optimize">
            <summary>
            Called by standard descriptors when background optimization or preoptimization needs to be performed.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor">
            <summary>
            Specialized <see cref="T:MoonSharp.Interpreter.Interop.BasicDescriptors.IMemberDescriptor"/> for members supporting overloads resolution.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor.Execute(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments)">
            <summary>
            Invokes the member from script.
            Implementors should raise exceptions if the value cannot be executed or if access to an
            instance member through a static userdata is attempted.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="context">The context.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor.ExtensionMethodType">
            <summary>
            Gets the type which this extension method extends, null if this is not an extension method.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor.Parameters">
            <summary>
            Gets the type of the arguments of the underlying CLR function
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor.VarArgsArrayType">
            <summary>
            Gets a value indicating the type of the ParamArray parameter of a var-args function. If the function is not var-args,
            null is returned.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor.VarArgsElementType">
            <summary>
            Gets a value indicating the type of the elements of the ParamArray parameter of a var-args function. If the function is not var-args,
            null is returned.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor.SortDiscriminant">
            <summary>
            Gets a sort discriminant to give consistent overload resolution matching in case of perfectly equal scores
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptorAccess">
            <summary>
            Permissions for members access
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptorAccess.CanRead">
            <summary>
            The member can be read from
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptorAccess.CanWrite">
            <summary>
            The member can be written to
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Interop.BasicDescriptors.MemberDescriptorAccess.CanExecute">
            <summary>
            The can be invoked
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor">
            <summary>
            Descriptor of parameters used in <see cref="T:MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor"/> implementations.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.Name">
            <summary>
            Gets the name of the parameter
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.Type">
            <summary>
            Gets the type of the parameter
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.HasDefaultValue">
            <summary>
            Gets a value indicating whether this instance has a default value.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.DefaultValue">
            <summary>
            Gets the default value
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.IsOut">
            <summary>
            Gets a value indicating whether this instance is an out parameter
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.IsRef">
            <summary>
            Gets a value indicating whether this instance is a "ref" parameter
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.IsVarArgs">
            <summary>
            Gets a value indicating whether this instance is a variable arguments param
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.HasBeenRestricted">
            <summary>
            Gets a value indicating whether this instance has been restricted.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.OriginalType">
            <summary>
            Gets the original type of the parameter before any restriction has been applied.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.m_OriginalType">
            <summary>
            If the type got restricted, the original type before the restriction.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.#ctor(System.String,System.Type,System.Boolean,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="hasDefaultValue">if set to <c>true</c> the parameter has default value.</param>
            <param name="defaultValue">The default value.</param>
            <param name="isOut">if set to <c>true</c>, is an out param.</param>
            <param name="isRef">if set to <c>true</c> is a ref param.</param>
            <param name="isVarArgs">if set to <c>true</c> is variable arguments param.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.#ctor(System.String,System.Type,System.Boolean,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor" /> class. 
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="hasDefaultValue">if set to <c>true</c> the parameter has default value.</param>
            <param name="defaultValue">The default value.</param>
            <param name="isOut">if set to <c>true</c>, is an out param.</param>
            <param name="isRef">if set to <c>true</c> is a ref param.</param>
            <param name="isVarArgs">if set to <c>true</c> is variable arguments param.</param>
            <param name="typeRestriction">The type restriction, or nll.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor"/> class.
            </summary>
            <param name="pi">A ParameterInfo taken from reflection.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.RestrictType(System.Type)">
            <summary>
            Restricts the type of this parameter to a tighter constraint.
            Restrictions must be applied before the <see cref="T:MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor"/> containing this
            parameter is used in any way.
            </summary>
            <param name="type">The new type.</param>
            <exception cref="T:System.InvalidOperationException">
            Cannot restrict a ref/out or varargs param
            or
            Specified operation is not a restriction
            </exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor.PrepareForWiring(MoonSharp.Interpreter.Table)">
            <summary>
            Prepares the descriptor for hard-wiring.
            The descriptor fills the passed table with all the needed data for hardwire generators to generate the appropriate code.
            </summary>
            <param name="t">The table to be filled</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.BasicDescriptors.IWireableDescriptor">
            <summary>
            Interface for descriptors with the capability of being serialized
            for later hardwiring.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.BasicDescriptors.IWireableDescriptor.PrepareForWiring(MoonSharp.Interpreter.Table)">
            <summary>
            Prepares the descriptor for hard-wiring.
            The descriptor fills the passed table with all the needed data for hardwire generators to generate the appropriate code.
            </summary>
            <param name="t">The table to be filled</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.ClrToScriptConversions.TryObjectToTrivialDynValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Tries to convert a CLR object to a MoonSharp value, using "trivial" logic.
            Skips on custom conversions, etc.
            Does NOT throw on failure.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.ClrToScriptConversions.TryObjectToSimpleDynValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Tries to convert a CLR object to a MoonSharp value, using "simple" logic.
            Does NOT throw on failure.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.ClrToScriptConversions.ObjectToDynValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Tries to convert a CLR object to a MoonSharp value, using more in-depth analysis
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.ClrToScriptConversions.EnumerationToDynValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Converts an IEnumerable or IEnumerator to a DynValue
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.Converters.NumericConversions">
            <summary>
            Static functions to handle conversions of numeric types
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Interop.Converters.NumericConversions.NumericTypes">
            <summary>
            HashSet of numeric types
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Interop.Converters.NumericConversions.NumericTypesOrdered">
            <summary>
            Array of numeric types in order used for some conversions
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.NumericConversions.DoubleToType(System.Type,System.Double)">
            <summary>
            Converts a double to another type
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.NumericConversions.TypeToDouble(System.Type,System.Object)">
            <summary>
            Converts a type to double
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.ScriptToClrConversions.DynValueToObject(MoonSharp.Interpreter.DynValue)">
            <summary>
            Converts a DynValue to a CLR object [simple conversion]
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.ScriptToClrConversions.DynValueToObjectOfType(MoonSharp.Interpreter.DynValue,System.Type,System.Object,System.Boolean)">
            <summary>
            Converts a DynValue to a CLR object of a specific type
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.ScriptToClrConversions.DynValueToObjectOfTypeWeight(MoonSharp.Interpreter.DynValue,System.Type,System.Boolean)">
            <summary>
            Gets a relative weight of how much the conversion is matching the given types.
            Implementation must follow that of DynValueToObjectOfType.. it's not very DRY in that sense.
            However here we are in perf-sensitive path.. TODO : double-check the gain and see if a DRY impl is better.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.TableConversions.ConvertIListToTable(MoonSharp.Interpreter.Script,System.Collections.IList)">
            <summary>
            Converts an IList to a Lua table.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.TableConversions.ConvertIDictionaryToTable(MoonSharp.Interpreter.Script,System.Collections.IDictionary)">
            <summary>
            Converts an IDictionary to a Lua table.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.TableConversions.CanConvertTableToType(MoonSharp.Interpreter.Table,System.Type)">
            <summary>
            Determines whether the specified table can be converted to the specified type
            </summary>
            <param name="table">The table.</param>
            <param name="t">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.TableConversions.ConvertTableToType(MoonSharp.Interpreter.Table,System.Type)">
            <summary>
            Converts a table to a CLR object of a given type
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.TableConversions.ConvertTableToDictionaryOfGenericType(System.Type,System.Type,System.Type,MoonSharp.Interpreter.Table)">
            <summary>
            Converts a table to a <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.TableConversions.ConvertTableToArrayOfGenericType(System.Type,System.Type,MoonSharp.Interpreter.Table)">
            <summary>
            Converts a table to a T[]
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.TableConversions.ConvertTableToListOfGenericType(System.Type,System.Type,MoonSharp.Interpreter.Table)">
            <summary>
            Converts a table to a <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.TableConversions.TableToList``1(MoonSharp.Interpreter.Table,System.Func{MoonSharp.Interpreter.DynValue,``0})">
            <summary>
            Converts a table to a <see cref="T:System.Collections.Generic.List`1"/>, known in advance
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.Converters.TableConversions.TableToDictionary``2(MoonSharp.Interpreter.Table,System.Func{MoonSharp.Interpreter.DynValue,``0},System.Func{MoonSharp.Interpreter.DynValue,``1})">
            <summary>
            Converts a table to a Dictionary, known in advance
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.CustomConvertersCollection">
            <summary>
            A collection of custom converters between MoonSharp types and CLR types.
            If a converter function is not specified or returns null, the standard conversion path applies.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.CustomConvertersCollection.SetScriptToClrCustomConversion(MoonSharp.Interpreter.DataType,System.Type,System.Func{MoonSharp.Interpreter.DynValue,System.Object})">
            <summary>
            Sets a custom converter from a script data type to a CLR data type. Set null to remove a previous custom converter.
            </summary>
            <param name="scriptDataType">The script data type</param>
            <param name="clrDataType">The CLR data type.</param>
            <param name="converter">The converter, or null.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.CustomConvertersCollection.GetScriptToClrCustomConversion(MoonSharp.Interpreter.DataType,System.Type)">
            <summary>
            Gets a custom converter from a script data type to a CLR data type, or null
            </summary>
            <param name="scriptDataType">The script data type</param>
            <param name="clrDataType">The CLR data type.</param>
            <returns>The converter function, or null if not found</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.CustomConvertersCollection.SetClrToScriptCustomConversion(System.Type,System.Func{MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue})">
            <summary>
            Sets a custom converter from a CLR data type. Set null to remove a previous custom converter.
            </summary>
            <param name="clrDataType">The CLR data type.</param>
            <param name="converter">The converter, or null.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.CustomConvertersCollection.SetClrToScriptCustomConversion``1(System.Func{MoonSharp.Interpreter.Script,``0,MoonSharp.Interpreter.DynValue})">
            <summary>
            Sets a custom converter from a CLR data type. Set null to remove a previous custom converter.
            </summary>
            <typeparam name="T">The CLR data type.</typeparam>
            <param name="converter">The converter, or null.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.CustomConvertersCollection.GetClrToScriptCustomConversion(System.Type)">
            <summary>
            Gets a custom converter from a CLR data type, or null
            </summary>
            <param name="clrDataType">Type of the color data.</param>
            <returns>The converter function, or null if not found</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MoonSharp.Interpreter.Interop.CustomConvertersCollection.SetClrToScriptCustomConversion(System.Type,System.Func{System.Object,MoonSharp.Interpreter.DynValue})" -->
        <member name="M:MoonSharp.Interpreter.Interop.CustomConvertersCollection.SetClrToScriptCustomConversion``1(System.Func{``0,MoonSharp.Interpreter.DynValue})">
            <summary>
            Sets a custom converter from a CLR data type. Set null to remove a previous custom converter.
            </summary>
            <typeparam name="T">The CLR data type.</typeparam>
            <param name="converter">The converter, or null.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.CustomConvertersCollection.Clear">
            <summary>
            Removes all converters.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.DescriptorHelpers">
            <summary>
            Helper extension methods used to simplify some parts of userdata descriptor implementations
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.GetVisibilityFromAttributes(System.Reflection.MemberInfo)">
            <summary>
            Determines whether a
            <see cref="T:MoonSharp.Interpreter.Interop.MoonSharpVisibleAttribute" /> or a <see cref="T:MoonSharp.Interpreter.MoonSharpHiddenAttribute" />  is changing visibility of a member
            to scripts.
            </summary>
            <param name="mi">The member to check.</param>
            <returns>
            <c>true</c> if visibility is forced visible,
            <c>false</c> if visibility is forced hidden or the specified MemberInfo is null,
            <c>if no attribute was found</c>
            </returns>
            <exception cref="T:System.InvalidOperationException">If both MoonSharpHiddenAttribute and MoonSharpVisibleAttribute are specified and they convey different messages.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.GetClrVisibility(System.Type)">
            <summary>
            Gets the visibility of the type as a string
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.GetClrVisibility(System.Reflection.FieldInfo)">
            <summary>
            Gets a string representing visibility of the given member type
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.GetClrVisibility(System.Reflection.PropertyInfo)">
            <summary>
            Gets a string representing visibility of the given member type
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.GetClrVisibility(System.Reflection.MethodBase)">
            <summary>
            Gets a string representing visibility of the given member type
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.IsPropertyInfoPublic(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified PropertyInfo is visible publicly (either the getter or the setter is public).
            </summary>
            <param name="pi">The PropertyInfo.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.GetMetaNamesFromAttributes(System.Reflection.MethodInfo)">
            <summary>
            Gets the list of metamethod names from attributes - in practice the list of metamethods declared through
            <see cref="T:MoonSharp.Interpreter.MoonSharpUserDataMetamethodAttribute" /> .
            </summary>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.SafeGetTypes(System.Reflection.Assembly)">
            <summary>
            Gets the Types implemented in the assembly, catching the ReflectionTypeLoadException just in case..
            </summary>
            <param name="asm">The assebly</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.GetConversionMethodName(System.Type)">
            <summary>
            Gets the name of a conversion method to be exposed to Lua scripts
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.GetAllImplementedTypes(System.Type)">
            <summary>
            Gets all implemented types by a given type
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.IsValidSimpleIdentifier(System.String)">
            <summary>
            Determines whether the string is a valid simple identifier (starts with letter or underscore
            and contains only letters, digits and underscores).
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.ToValidSimpleIdentifier(System.String)">
            <summary>
            Converts the string to a valid simple identifier (starts with letter or underscore
            and contains only letters, digits and underscores).
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.Camelify(System.String)">
            <summary>
            Converts the specified name from underscore_case to camelCase.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DescriptorHelpers.UpperFirstLetter(System.String)">
            <summary>
            Converts the specified name to one with an uppercase first letter (something to Something).
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.IGeneratorUserDataDescriptor">
            <summary>
            An interface for type descriptors having the ability to generate other descriptors on the fly.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IGeneratorUserDataDescriptor.Generate(System.Type)">
            <summary>
            
            Generates a new descriptor for the specified type.
            
            The purpose is to allow a mechanism by which a type descriptor can replace itself with another
            descriptor for a specific type. For example, descriptors can be created on the fly to support
            generic types through this mechanism.
            
            The return value should be:
            	null - if this descriptor is simply skipped for the specified type
            	this - acts as if the descriptor was a vanilla descriptor
            	a new descriptor - if a new descriptor should be used in place of this one
            	
            It's recommended that instances of descriptors are cached for future references. One possible way,
            to do the caching is to have the generator register the descriptor through <see cref="M:MoonSharp.Interpreter.UserData.RegisterType(System.Type,MoonSharp.Interpreter.InteropAccessMode,System.String)"/>. 
            In that case, it should query whether the type is exactly registered, through <see cref="M:MoonSharp.Interpreter.UserData.IsTypeRegistered(System.Type)"/>
            
            NOTE-1 : the search for descriptors does NOT stop with the descriptor returned by this type, but 
            other descriptors (e.g. for interfaces) might still be added.
            
            NOTE-2 : the descriptor generation mechanism is not triggered on an exact match of types.
            
            NOTE-3 : the method is called in the context of a lock over the descriptors registry so no unpredictable changes to the 
            registry can come from other threads during the execution of this method. However this method should not take other 
            locks, to avoid deadlocks.
            
            </summary>
            <param name="type">The type.</param>
            <returns>Null, this object instance or a new descriptor.</returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.InteropRegistrationPolicy">
            <summary>
            Collection of the standard policies to handle UserData type registrations.
            Provided mostly for compile-time backward compatibility with old code.
            See also : <see cref="T:MoonSharp.Interpreter.Interop.RegistrationPolicies.IRegistrationPolicy"/> .
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.InteropRegistrationPolicy.Default">
            <summary>
            The default registration policy used by MoonSharp unless explicitely replaced.
            Deregistrations are allowed, but registration of a new descriptor are not allowed
            if a descriptor is already registered for that type.
            
            Types must be explicitly registered.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.InteropRegistrationPolicy.Explicit">
            <summary>
            The default registration policy used by MoonSharp unless explicitely replaced.
            Deregistrations are allowed, but registration of a new descriptor are not allowed
            if a descriptor is already registered for that type.
            
            Types must be explicitly registered.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.InteropRegistrationPolicy.Automatic">
            <summary>
            Types are automatically registered if not found in the registry. This is easier to use but potentially unsafe.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.IUserDataDescriptor">
            <summary>
            Interface used by MoonSharp to access objects of a given type from scripts.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.IUserDataDescriptor.Name">
            <summary>
            Gets the name of the descriptor (usually, the name of the type described).
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.IUserDataDescriptor.Type">
            <summary>
            Gets the type this descriptor refers to
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IUserDataDescriptor.Index(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <summary>
            Performs an "index" "get" operation.
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="index">The index.</param>
            <param name="isDirectIndexing">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IUserDataDescriptor.SetIndex(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <summary>
            Performs an "index" "set" operation.
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="index">The index.</param>
            <param name="value">The value to be set</param>
            <param name="isDirectIndexing">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IUserDataDescriptor.AsString(System.Object)">
            <summary>
            Converts this userdata to string
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IUserDataDescriptor.MetaIndex(MoonSharp.Interpreter.Script,System.Object,System.String)">
            <summary>
            
            Gets a "meta" operation on this userdata. If a descriptor does not support this functionality,
            it should return "null" (not a nil). 
            
            These standard metamethods can be supported (the return value should be a function accepting the
            classic parameters of the corresponding metamethod):
            __add, __sub, __mul, __div, __div, __pow, __unm, __eq, __lt, __le, __lt, __len, __concat, 
            __pairs, __ipairs, __iterator, __call
            
            These standard metamethods are supported through other calls for efficiency:
            __index, __newindex, __tostring
            
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="metaname">The name of the metamember.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IUserDataDescriptor.IsTypeCompatible(System.Type,System.Object)">
            <summary>
            Determines whether the specified object is compatible with the specified type.
            Unless a very specific behaviour is needed, the correct implementation is a 
            simple " return type.IsInstanceOfType(obj); "
            </summary>
            <param name="type">The type.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.IUserDataMemberDescriptor">
            <summary>
            Interface used by standard descriptors to access members of a given type from scripts.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.IUserDataMemberDescriptor.Name">
            <summary>
            Gets the name of the descriptor (usually, the name of the type described).
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.IUserDataMemberDescriptor.Type">
            <summary>
            Gets the type this descriptor refers to
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IUserDataMemberDescriptor.GetValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets the value of the member
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IUserDataMemberDescriptor.SetValue(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value of the member
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.IUserDataMemberDescriptor.MemberType">
            <summary>
            Gets the type of the member.
            </summary>
            <value>
            The type of the member.
            </value>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.IUserDataType">
            <summary>
            As a convenience, every type deriving from IUserDataType is "self-described". That is, no descriptor is needed/generated
            and the object itself is used to describe the type for interop. See also <see cref="T:MoonSharp.Interpreter.UserData"/>, <see cref="T:MoonSharp.Interpreter.Interop.IUserDataDescriptor"/> 
            and <see cref="T:MoonSharp.Interpreter.Interop.StandardUserDataDescriptor"/> .
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IUserDataType.Index(MoonSharp.Interpreter.Script,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <summary>
            Performs an "index" "get" operation.
            </summary>
            <param name="script">The script originating the request</param>
            <param name="index">The index.</param>
            <param name="isDirectIndexing">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IUserDataType.SetIndex(MoonSharp.Interpreter.Script,MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <summary>
            Performs an "index" "set" operation.
            </summary>
            <param name="script">The script originating the request</param>
            <param name="index">The index.</param>
            <param name="value">The value to be set</param>
            <param name="isDirectIndexing">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IUserDataType.MetaIndex(MoonSharp.Interpreter.Script,System.String)">
            <summary>
            
            Gets a "meta" operation on this userdata. If a descriptor does not support this functionality,
            it should return "null" (not a nil). 
            
            These standard metamethods can be supported (the return value should be a function accepting the
            classic parameters of the corresponding metamethod):
            __add, __sub, __mul, __div, __div, __pow, __unm, __eq, __lt, __le, __lt, __len, __concat, 
            __pairs, __ipairs, __iterator, __call
            
            These standard metamethods are supported through other calls for efficiency:
            __index, __newindex, __tostring
            
            </summary>
            <param name="script">The script originating the request</param>
            <param name="metaname">The name of the metamember.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.LuaStateInterop.LuaBase">
            <summary>
            Classes using the classic interface should inherit from this class.
            This class defines only static methods and is really meant to be used only
            from C# and not other .NET languages. 
            
            For easier operation they should also define:
            	using ptrdiff_t = System.Int32;
            	using lua_Integer = System.Int32;
            	using LUA_INTFRM_T = System.Int64;
            	using UNSIGNED_LUA_INTFRM_T = System.UInt64;
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.LuaStateInterop.LuaBase.LuaCall(MoonSharp.Interpreter.Interop.LuaStateInterop.LuaState,System.Int32,System.Int32)">
            <summary>
            Calls a function.
            To call a function you must use the following protocol: first, the function to be called is pushed onto the stack; then,
            the arguments to the function are pushed in direct order; that is, the first argument is pushed first. Finally you call
            lua_call; nargs is the number of arguments that you pushed onto the stack. All arguments and the function value are
            popped from the stack when the function is called. The function results are pushed onto the stack when the function
            returns. The number of results is adjusted to nresults, unless nresults is LUA_MULTRET. In this case, all results from
            the function are pushed. Lua takes care that the returned values fit into the stack space. The function results are
            pushed onto the stack in direct order (the first result is pushed first), so that after the call the last result is on
            the top of the stack.
            </summary>
            <param name="L">The LuaState</param>
            <param name="nargs">The number of arguments.</param>
            <param name="nresults">The number of expected results.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.LuaStateInterop.LuaState">
            <summary>
            
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.LuaStateInterop.Tools.IsNumericType(System.Object)">
            <summary>
            Determines whether the specified value is of numeric type.
            </summary>
            <param name="o">The object to check.</param>
            <returns>
            	<c>true</c> if o is a numeric type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.LuaStateInterop.Tools.IsPositive(System.Object,System.Boolean)">
            <summary>
            Determines whether the specified value is positive.
            </summary>
            <param name="Value">The value.</param>
            <param name="ZeroIsPositive">if set to <c>true</c> treats 0 as positive.</param>
            <returns>
            	<c>true</c> if the specified value is positive; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.LuaStateInterop.Tools.ToUnsigned(System.Object)">
            <summary>
            Converts the specified values boxed type to its correpsonding unsigned
            type.
            </summary>
            <param name="Value">The value.</param>
            <returns>A boxed numeric object whos type is unsigned.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.LuaStateInterop.Tools.ToInteger(System.Object,System.Boolean)">
            <summary>
            Converts the specified values boxed type to its correpsonding integer
            type.
            </summary>
            <param name="Value">The value.</param>
            <param name="Round">if set to <c>true</c> [round].</param>
            <returns>
            A boxed numeric object whos type is an integer type.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.LuaStateInterop.Tools.ReplaceMetaChars(System.String)">
            <summary>
            Replaces the string representations of meta chars with their corresponding
            character values.
            </summary>
            <param name="input">The input.</param>
            <returns>A string with all string meta chars are replaced</returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.LuaStateInterop.NamespaceDoc">
            <summary>
            Namespace containing classes used to provide a minimal support for porting code based on the classic
            "LuaState" model (e.g. code based on KopiLua, UniLua or Lua itself).
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.AnonWrapper">
            <summary>
            Internal type used by <see cref="T:MoonSharp.Interpreter.Interop.AnonWrapper`1"/> for registration
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.AnonWrapper`1">
            <summary>
            Wrapper which allows for easier management of userdata without registering a new userdata type - useful 
            if a type which is not exposed to scripts but can be managed as a "black box" by scripts is desired.
            </summary>
            <typeparam name="T">The type to wrap</typeparam>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.AnonWrapper`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.AnonWrapper`1"/> class.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.AnonWrapper`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.AnonWrapper`1"/> class.
            </summary>
            <param name="o">The o.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.AnonWrapper`1.Value">
            <summary>
            Gets or sets the value this instance wraps.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.EnumerableWrapper">
            <summary>
            Wrappers for enumerables as return types
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.PropertyTableAssigner`1">
            <summary>
            Utility class which may be used to set properties on an object of type T, from values contained in a Lua table.
            Properties must be decorated with the <see cref="T:MoonSharp.Interpreter.MoonSharpPropertyAttribute"/>.
            This is a generic version of <see cref="T:MoonSharp.Interpreter.Interop.PropertyTableAssigner"/>.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyTableAssigner`1.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.PropertyTableAssigner`1"/> class.
            </summary>
            <param name="expectedMissingProperties">The expected missing properties, that is expected fields in the table with no corresponding property in the object.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyTableAssigner`1.AddExpectedMissingProperty(System.String)">
            <summary>
            Adds an expected missing property, that is an expected field in the table with no corresponding property in the object.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyTableAssigner`1.AssignObject(`0,MoonSharp.Interpreter.Table)">
            <summary>
            Assigns properties from tables to an object.
            </summary>
            <param name="obj">The object.</param>
            <param name="data">The table.</param>
            <exception cref="T:System.ArgumentNullException">Object is null</exception>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">A field does not correspond to any property and that property is not one of the expected missing ones.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyTableAssigner`1.GetTypeUnsafeAssigner">
            <summary>
            Gets the type-unsafe assigner corresponding to this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyTableAssigner`1.SetSubassignerForType(System.Type,MoonSharp.Interpreter.Interop.IPropertyTableAssigner)">
            <summary>
            Sets the subassigner for the given type. Pass null to remove usage of subassigner for the given type.
            </summary>
            <param name="propertyType">Type of the property for which the subassigner will be used.</param>
            <param name="assigner">The property assigner.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyTableAssigner`1.SetSubassigner``1(MoonSharp.Interpreter.Interop.PropertyTableAssigner{``0})">
            <summary>
            Sets the subassigner for the given type
            </summary>
            <typeparam name="SubassignerType">Type of the property for which the subassigner will be used.</typeparam>
            <param name="assigner">The property assigner.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyTableAssigner`1.MoonSharp#Interpreter#Interop#IPropertyTableAssigner#AssignObjectUnchecked(System.Object,MoonSharp.Interpreter.Table)">
            <summary>
            Assigns the properties of the specified object without checking the type.
            </summary>
            <param name="o">The object.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.PropertyTableAssigner">
            <summary>
            Utility class which may be used to set properties on an object from values contained in a Lua table.
            Properties must be decorated with the <see cref="T:MoonSharp.Interpreter.MoonSharpPropertyAttribute"/>.
            See <see cref="T:MoonSharp.Interpreter.Interop.PropertyTableAssigner`1"/> for a generic compile time type-safe version.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyTableAssigner.#ctor(System.Type,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.PropertyTableAssigner"/> class.
            </summary>
            <param name="type">The type of the object.</param>
            <param name="expectedMissingProperties">The expected missing properties, that is expected fields in the table with no corresponding property in the object.</param>
            <exception cref="T:System.ArgumentException">
            Type cannot be a value type.
            </exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyTableAssigner.AddExpectedMissingProperty(System.String)">
            <summary>
            Adds an expected missing property, that is an expected field in the table with no corresponding property in the object.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyTableAssigner.AssignObject(System.Object,MoonSharp.Interpreter.Table)">
            <summary>
            Assigns properties from tables to an object.
            </summary>
            <param name="obj">The object.</param>
            <param name="data">The table.</param>
            <exception cref="T:System.ArgumentNullException">Object is null</exception>
            <exception cref="T:System.ArgumentException">The object is of an incompatible type.</exception>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">A field does not correspond to any property and that property is not one of the expected missing ones.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyTableAssigner.SetSubassignerForType(System.Type,MoonSharp.Interpreter.Interop.IPropertyTableAssigner)">
            <summary>
            Sets the subassigner for the given type. Pass null to remove usage of subassigner for the given type.
            </summary>
            <param name="propertyType">Type of the property for which the subassigner will be used.</param>
            <param name="assigner">The property assigner.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyTableAssigner.MoonSharp#Interpreter#Interop#IPropertyTableAssigner#AssignObjectUnchecked(System.Object,MoonSharp.Interpreter.Table)">
            <summary>
            Assigns the properties of the specified object without checking the type.
            </summary>
            <param name="o">The object.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.IPropertyTableAssigner">
            <summary>
            Common interface for property assigners - basically used for sub-assigners
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IPropertyTableAssigner.AssignObjectUnchecked(System.Object,MoonSharp.Interpreter.Table)">
            <summary>
            Assigns the properties of the specified object without checking the type.
            </summary>
            <param name="o">The object.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.DelegateProxyFactory`2">
            <summary>
            Implementation of IProxyFactory taking two delegates for simple instancing of proxies.
            </summary>
            <typeparam name="TProxy">The type of the proxy.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DelegateProxyFactory`2.#ctor(System.Func{`1,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.DelegateProxyFactory`2"/> class.
            </summary>
            <param name="wrapDelegate">The proxy.</param>
            <param name="unwrapDelegate">The deproxy.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DelegateProxyFactory`2.CreateProxyObject(`1)">
            <summary>
            Takes an instance of a target object and returns a proxy object wrapping it
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DelegateProxyFactory`2.CreateProxyObject(System.Object)">
            <summary>
            Takes an instance of a target object and returns a proxy object wrapping it
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.DelegateProxyFactory`2.TargetType">
            <summary>
            Gets the proxied type
            </summary>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.DelegateProxyFactory`2.ProxyType">
            <summary>
            Gets the proxy type
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.IProxyFactory">
            <summary>
            Interface for proxy objects (type unsafe version)
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IProxyFactory.CreateProxyObject(System.Object)">
            <summary>
            Takes an instance of a target object and returns a proxy object wrapping it
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.IProxyFactory.TargetType">
            <summary>
            Gets the proxied type
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.IProxyFactory.ProxyType">
            <summary>
            Gets the proxy type
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.IProxyFactory`2">
            <summary>
            Interface for proxy objects (type safe version)
            </summary>
            <typeparam name="TProxy">The type of the proxy.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.IProxyFactory`2.CreateProxyObject(`1)">
            <summary>
            Takes an instance of a target object and returns a proxy object wrapping it
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.ReflectionSpecialNameType">
            <summary>
            Helps identifying a reflection special name
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.ReflectionSpecialName">
            <summary>
            Class helping identifying special names found with reflection
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.RegistrationPolicies.AutomaticRegistrationPolicy">
            <summary>
            Similar to <see cref="T:MoonSharp.Interpreter.Interop.RegistrationPolicies.DefaultRegistrationPolicy"/>, but with automatic type registration is disabled.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.RegistrationPolicies.AutomaticRegistrationPolicy.AllowTypeAutoRegistration(System.Type)">
            <summary>
            Allows type automatic registration for the specified type.
            NOTE: automatic type registration is NOT recommended.
            </summary>
            <param name="type">The type.</param>
            <returns>
            True to register the type automatically, false otherwise.
            </returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.RegistrationPolicies.DefaultRegistrationPolicy">
            <summary>
            The default registration policy used by MoonSharp unless explicitely replaced.
            Deregistrations are allowed, but registration of a new descriptor are not allowed
            if a descriptor is already registered for that type.
            
            Automatic type registration is disabled.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.RegistrationPolicies.DefaultRegistrationPolicy.HandleRegistration(MoonSharp.Interpreter.Interop.IUserDataDescriptor,MoonSharp.Interpreter.Interop.IUserDataDescriptor)">
            <summary>
            Called to handle the registration or deregistration of a type descriptor. Must return the type descriptor to be registered, or null to remove the registration.
            </summary>
            <param name="newDescriptor">The new descriptor, or null if this is a deregistration.</param>
            <param name="oldDescriptor">The old descriptor, or null if no descriptor was previously registered for this type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.RegistrationPolicies.DefaultRegistrationPolicy.AllowTypeAutoRegistration(System.Type)">
            <summary>
            Allows type automatic registration for the specified type.
            NOTE: automatic type registration is NOT recommended.
            </summary>
            <param name="type">The type.</param>
            <returns>
            True to register the type automatically, false otherwise.
            </returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.RegistrationPolicies.IRegistrationPolicy">
            <summary>
            Interface for managing how to handle 
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.RegistrationPolicies.IRegistrationPolicy.HandleRegistration(MoonSharp.Interpreter.Interop.IUserDataDescriptor,MoonSharp.Interpreter.Interop.IUserDataDescriptor)">
            <summary>
            Called to handle the registration or deregistration of a type descriptor. Must return the type descriptor to be registered, or null to remove the registration.
            </summary>
            <param name="newDescriptor">The new descriptor, or null if this is a deregistration.</param>
            <param name="oldDescriptor">The old descriptor, or null if no descriptor was previously registered for this type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.RegistrationPolicies.IRegistrationPolicy.AllowTypeAutoRegistration(System.Type)">
            <summary>
            Allows type automatic registration for the specified type.
            NOTE: automatic type registration is NOT recommended.
            </summary>
            <param name="type">The type.</param>
            <returns>True to register the type automatically, false otherwise.</returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.RegistrationPolicies.PermanentRegistrationPolicy">
            <summary>
            A registration policy which makes registration permanent and not deletable.
            Deregistrations are not allowed and registrations of a new descriptor are not allowed
            if a descriptor is already registered for that type.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.RegistrationPolicies.PermanentRegistrationPolicy.HandleRegistration(MoonSharp.Interpreter.Interop.IUserDataDescriptor,MoonSharp.Interpreter.Interop.IUserDataDescriptor)">
            <summary>
            Called to handle the registration or deregistration of a type descriptor. Must return the type descriptor to be registered, or null to remove the registration.
            </summary>
            <param name="newDescriptor">The new descriptor, or null if this is a deregistration.</param>
            <param name="oldDescriptor">The old descriptor, or null if no descriptor was previously registered for this type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.RegistrationPolicies.PermanentRegistrationPolicy.AllowTypeAutoRegistration(System.Type)">
            <summary>
            Allows type automatic registration for the specified type.
            NOTE: automatic type registration is NOT recommended.
            </summary>
            <param name="type">The type.</param>
            <returns>
            True to register the type automatically, false otherwise.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.CompositeUserDataDescriptor">
            <summary>
            A user data descriptor which aggregates multiple descriptors and tries dispatching members
            on them, in order.
            
            Used, for example, for objects implementing multiple interfaces but for which no descriptor is 
            specifically registered.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.CompositeUserDataDescriptor.#ctor(System.Collections.Generic.List{MoonSharp.Interpreter.Interop.IUserDataDescriptor},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.CompositeUserDataDescriptor"/> class.
            </summary>
            <param name="descriptors">The descriptors.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.CompositeUserDataDescriptor.Descriptors">
            <summary>
            Gets the descriptors aggregated by this object, allowing changes to the descriptor list
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.CompositeUserDataDescriptor.Name">
            <summary>
            Gets the name of the descriptor (usually, the name of the type described).
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.CompositeUserDataDescriptor.Type">
            <summary>
            Gets the type this descriptor refers to
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.CompositeUserDataDescriptor.Index(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <summary>
            Performs an "index" "get" operation.
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="index">The index.</param>
            <param name="isDirectIndexing">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.CompositeUserDataDescriptor.SetIndex(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <summary>
            Performs an "index" "set" operation.
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="index">The index.</param>
            <param name="value">The value to be set</param>
            <param name="isDirectIndexing">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.CompositeUserDataDescriptor.AsString(System.Object)">
            <summary>
            Converts this userdata to string
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.CompositeUserDataDescriptor.MetaIndex(MoonSharp.Interpreter.Script,System.Object,System.String)">
            <summary>
            Gets a "meta" operation on this userdata. If a descriptor does not support this functionality,
            it should return "null" (not a nil). 
            These standard metamethods can be supported (the return value should be a function accepting the
            classic parameters of the corresponding metamethod):
            __add, __sub, __mul, __div, __div, __pow, __unm, __eq, __lt, __le, __lt, __len, __concat, 
            __pairs, __ipairs, __iterator, __call
            These standard metamethods are supported through other calls for efficiency:
            __index, __newindex, __tostring
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="metaname">The name of the metamember.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.CompositeUserDataDescriptor.IsTypeCompatible(System.Type,System.Object)">
            <summary>
            Determines whether the specified object is compatible with the specified type.
            Unless a very specific behaviour is needed, the correct implementation is a 
            simple " return type.IsInstanceOfType(obj); "
            </summary>
            <param name="type">The type.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.ArrayMemberDescriptor">
            <summary>
            Member descriptor for indexer of array types
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ArrayMemberDescriptor.#ctor(System.String,System.Boolean,MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor[])">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.ArrayMemberDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="isSetter">if set to <c>true</c> is a setter indexer.</param>
            <param name="indexerParams">The indexer parameters.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ArrayMemberDescriptor.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.ArrayMemberDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="isSetter">if set to <c>true</c> [is setter].</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ArrayMemberDescriptor.PrepareForWiring(MoonSharp.Interpreter.Table)">
            <summary>
            Prepares the descriptor for hard-wiring.
            The descriptor fills the passed table with all the needed data for hardwire generators to generate the appropriate code.
            </summary>
            <param name="t">The table to be filled</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor">
            <summary>
            Class providing a simple descriptor for constant DynValues in userdata
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="serializedTableValue">A string containing a table whose first member is the dynvalue to be deserialized (convoluted...).</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor.#ctor(System.String,MoonSharp.Interpreter.DynValue)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor.IsStatic">
            <summary>
            Gets a value indicating whether the described member is static.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor.Name">
            <summary>
            Gets the name of the member
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor.MemberAccess">
            <summary>
            Gets the types of access supported by this member
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor.Value">
            <summary>
            Gets the value wrapped by this descriptor
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor.GetValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets the value of this member as a <see cref="T:MoonSharp.Interpreter.DynValue" /> to be exposed to scripts.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object owning this member, or null if static.</param>
            <returns>
            The value of this member as a <see cref="T:MoonSharp.Interpreter.DynValue" />.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor.SetValue(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value of this member from a <see cref="T:MoonSharp.Interpreter.DynValue" />.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object owning this member, or null if static.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">userdata '{0}' cannot be written to.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.DynValueMemberDescriptor.PrepareForWiring(MoonSharp.Interpreter.Table)">
            <summary>
            Prepares the descriptor for hard-wiring.
            The descriptor fills the passed table with all the needed data for hardwire generators to generate the appropriate code.
            </summary>
            <param name="t">The table to be filled</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase">
            <summary>
            Class providing easier marshalling of CLR functions
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.IsStatic">
            <summary>
            Gets a value indicating whether the described method is static.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.Name">
            <summary>
            Gets the name of the described method
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.SortDiscriminant">
            <summary>
            Gets a sort discriminant to give consistent overload resolution matching in case of perfectly equal scores
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.Parameters">
            <summary>
            Gets the type of the arguments of the underlying CLR function
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.ExtensionMethodType">
            <summary>
            Gets the type which this extension method extends, null if this is not an extension method.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.VarArgsArrayType">
            <summary>
            Gets a value indicating the type of the ParamArray parameter of a var-args function. If the function is not var-args,
            null is returned.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.VarArgsElementType">
            <summary>
            Gets a value indicating the type of the elements of the ParamArray parameter of a var-args function. If the function is not var-args,
            null is returned.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.Initialize(System.String,System.Boolean,MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor[],System.Boolean)">
            <summary>
            Initializes this instance.
            This *MUST* be called by the constructors extending this class to complete initialization.
            </summary>
            <param name="funcName">Name of the function.</param>
            <param name="isStatic">if set to <c>true</c> [is static].</param>
            <param name="parameters">The parameters.</param>
            <param name="isExtensionMethod">if set to <c>true</c> [is extension method].</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.GetCallback(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets a callback function as a delegate
            </summary>
            <param name="script">The script for which the callback must be generated.</param>
            <param name="obj">The object (null for static).</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.GetCallbackFunction(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets the callback function.
            </summary>
            <param name="script">The script for which the callback must be generated.</param>
            <param name="obj">The object (null for static).</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.GetCallbackAsDynValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets the callback function as a DynValue.
            </summary>
            <param name="script">The script for which the callback must be generated.</param>
            <param name="obj">The object (null for static).</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.CreateCallbackDynValue(MoonSharp.Interpreter.Script,System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates a callback DynValue starting from a MethodInfo.
            </summary>
            <param name="script">The script.</param>
            <param name="mi">The mi.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.BuildArgumentList(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Builds the argument list.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="context">The context.</param>
            <param name="args">The arguments.</param>
            <param name="outParams">Output: A list containing the indices of all "out" parameters, or null if no out parameters are specified.</param>
            <returns>The arguments, appropriately converted.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.BuildReturnValue(MoonSharp.Interpreter.Script,System.Collections.Generic.List{System.Int32},System.Object[],System.Object)">
            <summary>
            Builds the return value of a call
            </summary>
            <param name="script">The script.</param>
            <param name="outParams">The out parameters indices, or null. See <see cref="M:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.BuildArgumentList(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments,System.Collections.Generic.List{System.Int32}@)" />.</param>
            <param name="pars">The parameters passed to the function.</param>
            <param name="retv">The return value from the function. Use DynValue.Void if the function returned no value.</param>
            <returns>A DynValue to be returned to scripts</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.Execute(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments)">
            <summary>
            The internal callback which actually executes the method
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="context">The context.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.MemberAccess">
            <summary>
            Gets the types of access supported by this member
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.GetValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets the value of this member as a <see cref="T:MoonSharp.Interpreter.DynValue" /> to be exposed to scripts.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object owning this member, or null if static.</param>
            <returns>
            The value of this member as a <see cref="T:MoonSharp.Interpreter.DynValue" />.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FunctionMemberDescriptorBase.SetValue(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="v">The v.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.ObjectCallbackMemberDescriptor">
            <summary>
            Member descriptor which allows to define new members which behave similarly to class instance members
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ObjectCallbackMemberDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.ObjectCallbackMemberDescriptor"/> class.
            A new member descriptor is defined, which is a function taking no parameters and returning void, doing nothing.
            </summary>
            <param name="funcName">Name of the function.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ObjectCallbackMemberDescriptor.#ctor(System.String,System.Func{System.Object,MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.ObjectCallbackMemberDescriptor"/> class.
            The function described by descriptors created by this callback are defined as if they take no parameters
            and thus don't support overload resolution well (unless they really take no parameters) but can freely be
            used if no overload resolution is required.
            </summary>
            <param name="funcName">Name of the function.</param>
            <param name="callBack">The callback function.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ObjectCallbackMemberDescriptor.#ctor(System.String,System.Func{System.Object,MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments,System.Object},MoonSharp.Interpreter.Interop.BasicDescriptors.ParameterDescriptor[])">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.ObjectCallbackMemberDescriptor"/> class.
            Members defined with this constructor will support overload resolution.
            </summary>
            <param name="funcName">Name of the function.</param>
            <param name="callBack">The call back.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ObjectCallbackMemberDescriptor.Execute(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments)">
            <summary>
            The internal callback which actually executes the method
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="context">The context.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.ProxyUserDataDescriptor">
            <summary>
            Data descriptor used for proxy objects
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.ProxyUserDataDescriptor.InnerDescriptor">
            <summary>
            Gets the descriptor which describes the proxy object
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.ProxyUserDataDescriptor.Name">
            <summary>
            Gets the name of the descriptor (usually, the name of the type described).
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.ProxyUserDataDescriptor.Type">
            <summary>
            Gets the type this descriptor refers to
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ProxyUserDataDescriptor.Proxy(System.Object)">
            <summary>
            Proxies the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ProxyUserDataDescriptor.Index(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <summary>
            Performs an "index" "get" operation.
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="index">The index.</param>
            <param name="isDirectIndexing">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ProxyUserDataDescriptor.SetIndex(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <summary>
            Performs an "index" "set" operation.
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="index">The index.</param>
            <param name="value">The value to be set</param>
            <param name="isDirectIndexing">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ProxyUserDataDescriptor.AsString(System.Object)">
            <summary>
            Converts this userdata to string
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ProxyUserDataDescriptor.MetaIndex(MoonSharp.Interpreter.Script,System.Object,System.String)">
            <summary>
            Gets a "meta" operation on this userdata. If a descriptor does not support this functionality,
            it should return "null" (not a nil).
            These standard metamethods can be supported (the return value should be a function accepting the
            classic parameters of the corresponding metamethod):
            __add, __sub, __mul, __div, __div, __pow, __unm, __eq, __lt, __le, __lt, __len, __concat,
            __pairs, __ipairs, __iterator, __call
            These standard metamethods are supported through other calls for efficiency:
            __index, __newindex, __tostring
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="metaname">The name of the metamember.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ProxyUserDataDescriptor.IsTypeCompatible(System.Type,System.Object)">
            <summary>
            Determines whether the specified object is compatible with the specified type.
            Unless a very specific behaviour is needed, the correct implementation is a
            simple " return type.IsInstanceOfType(obj); "
            </summary>
            <param name="type">The type.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.EventMemberDescriptor">
            <summary>
            Class providing easier marshalling of CLR events. Handling is limited to a narrow range of handler signatures, which,
            however, covers in practice most of all available events.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Interop.EventMemberDescriptor.MAX_ARGS_IN_DELEGATE">
            <summary>
            The maximum number of arguments supported in an event handler delegate
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.EventMemberDescriptor.TryCreateIfVisible(System.Reflection.EventInfo,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Tries to create a new StandardUserDataEventDescriptor, returning <c>null</c> in case the method is not 
            visible to script code.
            </summary>
            <param name="ei">The EventInfo.</param>
            <param name="accessMode">The <see cref="T:MoonSharp.Interpreter.InteropAccessMode" /></param>
            <returns>A new StandardUserDataEventDescriptor or null.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.EventMemberDescriptor.CheckEventIsCompatible(System.Reflection.EventInfo,System.Boolean)">
            <summary>
            Checks if the event is compatible with a standard descriptor
            </summary>
            <param name="ei">The EventInfo.</param>
            <param name="throwException">if set to <c>true</c> an exception with the proper error message is thrown if not compatible.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            Thrown if throwException is <c>true</c> and one of this applies:
            The event is declared in a value type
            or
            The event does not have both add and remove methods 
            or
            The event handler type doesn't implement a public Invoke method
            or
            The event handler has a return type which is not System.Void
            or
            The event handler has more than MAX_ARGS_IN_DELEGATE parameters
            or
            The event handler has a value type parameter or a by ref parameter
            or
            The event handler signature is not a valid method according to <see cref="M:MoonSharp.Interpreter.Interop.MethodMemberDescriptor.CheckMethodIsCompatible(System.Reflection.MethodBase,System.Boolean)"/>
            </exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.EventMemberDescriptor.#ctor(System.Reflection.EventInfo,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.EventMemberDescriptor"/> class.
            </summary>
            <param name="ei">The ei.</param>
            <param name="accessMode">The access mode.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.EventMemberDescriptor.EventInfo">
            <summary>
            Gets the EventInfo object of the event described by this descriptor
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.EventMemberDescriptor.IsStatic">
            <summary>
            Gets a value indicating whether the event described by this descriptor is static.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.EventMemberDescriptor.GetValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets a dynvalue which is a facade supporting add/remove methods which is callable from scripts
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object for which the facade should be written.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.EventMemberDescriptor.Name">
            <summary>
            Gets the name of the member
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.EventMemberDescriptor.MemberAccess">
            <summary>
            Gets the types of access supported by this member
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.EventMemberDescriptor.SetValue(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="v">The v.</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.FieldMemberDescriptor">
            <summary>
            Class providing easier marshalling of CLR fields
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FieldMemberDescriptor.FieldInfo">
            <summary>
            Gets the FieldInfo got by reflection
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FieldMemberDescriptor.AccessMode">
            <summary>
            Gets the <see cref="T:MoonSharp.Interpreter.InteropAccessMode" />
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FieldMemberDescriptor.IsStatic">
            <summary>
            Gets a value indicating whether the described property is static.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FieldMemberDescriptor.Name">
            <summary>
            Gets the name of the property
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FieldMemberDescriptor.IsConst">
            <summary>
            Gets a value indicating whether this instance is a constant 
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FieldMemberDescriptor.IsReadonly">
            <summary>
            Gets a value indicating whether this instance is readonly 
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FieldMemberDescriptor.TryCreateIfVisible(System.Reflection.FieldInfo,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Tries to create a new StandardUserDataFieldDescriptor, returning <c>null</c> in case the field is not 
            visible to script code.
            </summary>
            <param name="fi">The FieldInfo.</param>
            <param name="accessMode">The <see cref="T:MoonSharp.Interpreter.InteropAccessMode" /></param>
            <returns>A new StandardUserDataFieldDescriptor or null.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FieldMemberDescriptor.#ctor(System.Reflection.FieldInfo,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor"/> class.
            </summary>
            <param name="fi">The FieldInfo.</param>
            <param name="accessMode">The <see cref="T:MoonSharp.Interpreter.InteropAccessMode" /> </param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FieldMemberDescriptor.GetValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets the value of the property
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FieldMemberDescriptor.SetValue(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value of the property
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="v">The value to set.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.FieldMemberDescriptor.MemberAccess">
            <summary>
            Gets the types of access supported by this member
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.FieldMemberDescriptor.PrepareForWiring(MoonSharp.Interpreter.Table)">
            <summary>
            Prepares the descriptor for hard-wiring.
            The descriptor fills the passed table with all the needed data for hardwire generators to generate the appropriate code.
            </summary>
            <param name="t">The table to be filled</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.MethodMemberDescriptor">
            <summary>
            Class providing easier marshalling of CLR functions
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.MethodMemberDescriptor.MethodInfo">
            <summary>
            Gets the method information (can be a MethodInfo or ConstructorInfo)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.MethodMemberDescriptor.AccessMode">
            <summary>
            Gets the access mode used for interop
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.MethodMemberDescriptor.IsConstructor">
            <summary>
            Gets a value indicating whether the described method is a constructor
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.MethodMemberDescriptor.#ctor(System.Reflection.MethodBase,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.MethodMemberDescriptor"/> class.
            </summary>
            <param name="methodBase">The MethodBase (MethodInfo or ConstructorInfo) got through reflection.</param>
            <param name="accessMode">The interop access mode.</param>
            <exception cref="T:System.ArgumentException">Invalid accessMode</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.MethodMemberDescriptor.TryCreateIfVisible(System.Reflection.MethodBase,MoonSharp.Interpreter.InteropAccessMode,System.Boolean)">
            <summary>
            Tries to create a new MethodMemberDescriptor, returning 
            <c>null</c> in case the method is not
            visible to script code.
            </summary>
            <param name="methodBase">The MethodBase.</param>
            <param name="accessMode">The <see cref="T:MoonSharp.Interpreter.InteropAccessMode" /></param>
            <param name="forceVisibility">if set to <c>true</c> forces visibility.</param>
            <returns>
            A new MethodMemberDescriptor or null.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.MethodMemberDescriptor.CheckMethodIsCompatible(System.Reflection.MethodBase,System.Boolean)">
            <summary>
            Checks if the method is compatible with a standard descriptor
            </summary>
            <param name="methodBase">The MethodBase.</param>
            <param name="throwException">if set to <c>true</c> an exception with the proper error message is thrown if not compatible.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            Thrown if throwException is <c>true</c> and one of this applies:
            The method contains unresolved generic parameters, or has an unresolved generic return type
            or
            The method contains pointer parameters, or has a pointer return type
            </exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.MethodMemberDescriptor.Execute(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments)">
            <summary>
            The internal callback which actually executes the method
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="context">The context.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.MethodMemberDescriptor.MoonSharp#Interpreter#Interop#BasicDescriptors#IOptimizableDescriptor#Optimize">
            <summary>
            Called by standard descriptors when background optimization or preoptimization needs to be performed.
            </summary>
            <exception cref="T:MoonSharp.Interpreter.InternalErrorException">Out/Ref params cannot be precompiled.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.MethodMemberDescriptor.PrepareForWiring(MoonSharp.Interpreter.Table)">
            <summary>
            Prepares the descriptor for hard-wiring.
            The descriptor fills the passed table with all the needed data for hardwire generators to generate the appropriate code.
            </summary>
            <param name="t">The table to be filled</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor">
            <summary>
            Class providing easier marshalling of overloaded CLR functions
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.OverloadableMemberDescriptorComparer">
            <summary>
            Comparer class for IOverloadableMemberDescriptor
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.IgnoreExtensionMethods">
            <summary>
            Gets or sets a value indicating whether this instance ignores extension methods.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor"/> class.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.#ctor(System.String,System.Type,MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="declaringType">The declaring type.</param>
            <param name="descriptor">The descriptor of the first overloaded method.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.#ctor(System.String,System.Type,System.Collections.Generic.IEnumerable{MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="declaringType">The declaring type.</param>
            <param name="descriptors">The descriptors of the overloaded methods.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.SetExtensionMethodsSnapshot(System.Int32,System.Collections.Generic.List{MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor})">
            <summary>
            Sets the extension methods snapshot.
            </summary>
            <param name="version">The version.</param>
            <param name="extMethods">The ext methods.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.Name">
            <summary>
            Gets the name of the first described overload
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.DeclaringType">
            <summary>
            Gets the name of the first described overload
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.AddOverload(MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor)">
            <summary>
            Adds an overload.
            </summary>
            <param name="overload">The overload.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.OverloadCount">
            <summary>
            Gets the number of overloaded methods contained in this collection
            </summary>
            <value>
            The overload count.
            </value>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.PerformOverloadedCall(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments)">
            <summary>
            Performs the overloaded call.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="context">The context.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">function call doesn't match any overload</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.CalcScoreForOverload(MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments,MoonSharp.Interpreter.Interop.BasicDescriptors.IOverloadableMemberDescriptor,System.Boolean)">
            <summary>
            Calculates the score for the overload.
            </summary>
            <param name="context">The context.</param>
            <param name="args">The arguments.</param>
            <param name="method">The method.</param>
            <param name="isExtMethod">if set to <c>true</c>, is an extension method.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.GetCallback(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets a callback function as a delegate
            </summary>
            <param name="script">The script for which the callback must be generated.</param>
            <param name="obj">The object (null for static).</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.GetCallbackFunction(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets the callback function.
            </summary>
            <param name="script">The script for which the callback must be generated.</param>
            <param name="obj">The object (null for static).</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.IsStatic">
            <summary>
            Gets a value indicating whether there is at least one static method in the resolution list
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.MemberAccess">
            <summary>
            Gets the types of access supported by this member
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.GetValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets the value of this member as a <see cref="T:MoonSharp.Interpreter.DynValue" /> to be exposed to scripts.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object owning this member, or null if static.</param>
            <returns>
            The value of this member as a <see cref="T:MoonSharp.Interpreter.DynValue" />.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.SetValue(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value of this member from a <see cref="T:MoonSharp.Interpreter.DynValue" />.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object owning this member, or null if static.</param>
            <param name="value">The value to be set.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.OverloadedMethodMemberDescriptor.PrepareForWiring(MoonSharp.Interpreter.Table)">
            <summary>
            Prepares the descriptor for hard-wiring.
            The descriptor fills the passed table with all the needed data for hardwire generators to generate the appropriate code.
            </summary>
            <param name="t">The table to be filled</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor">
            <summary>
            Class providing easier marshalling of CLR properties
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.PropertyInfo">
            <summary>
            Gets the PropertyInfo got by reflection
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.AccessMode">
            <summary>
            Gets the <see cref="T:MoonSharp.Interpreter.InteropAccessMode" />
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.IsStatic">
            <summary>
            Gets a value indicating whether the described property is static.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.Name">
            <summary>
            Gets the name of the property
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.CanRead">
            <summary>
            Gets a value indicating whether this instance can be read from
            </summary>
            <value>
              <c>true</c> if this instance can be read from; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.CanWrite">
            <summary>
            Gets a value indicating whether this instance can be written to.
            </summary>
            <value>
              <c>true</c> if this instance can be written to; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.TryCreateIfVisible(System.Reflection.PropertyInfo,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Tries to create a new StandardUserDataPropertyDescriptor, returning <c>null</c> in case the property is not 
            visible to script code.
            </summary>
            <param name="pi">The PropertyInfo.</param>
            <param name="accessMode">The <see cref="T:MoonSharp.Interpreter.InteropAccessMode" /></param>
            <returns>A new StandardUserDataPropertyDescriptor or null.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.#ctor(System.Reflection.PropertyInfo,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor"/> class.
            NOTE: This constructor gives get/set visibility based exclusively on the CLR visibility of the 
            getter and setter methods.
            </summary>
            <param name="pi">The pi.</param>
            <param name="accessMode">The access mode.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.#ctor(System.Reflection.PropertyInfo,MoonSharp.Interpreter.InteropAccessMode,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor" /> class.
            </summary>
            <param name="pi">The PropertyInfo.</param>
            <param name="accessMode">The <see cref="T:MoonSharp.Interpreter.InteropAccessMode" /></param>
            <param name="getter">The getter method. Use null to make the property writeonly.</param>
            <param name="setter">The setter method. Use null to make the property readonly.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.GetValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets the value of the property
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.SetValue(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value of the property
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="v">The value to set.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.MemberAccess">
            <summary>
            Gets the types of access supported by this member
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.MoonSharp#Interpreter#Interop#BasicDescriptors#IOptimizableDescriptor#Optimize">
            <summary>
            Called by standard descriptors when background optimization or preoptimization needs to be performed.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.PropertyMemberDescriptor.PrepareForWiring(MoonSharp.Interpreter.Table)">
            <summary>
            Prepares the descriptor for hard-wiring.
            The descriptor fills the passed table with all the needed data for hardwire generators to generate the appropriate code.
            </summary>
            <param name="t">The table to be filled</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor">
            <summary>
            Member descriptor for the default constructor of value types.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.IsStatic">
            <summary>
            Gets a value indicating whether the described method is static.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.Name">
            <summary>
            Gets the name of the described method
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.ValueTypeDefaultCtor">
            <summary>
            This property is equal to the value type to be constructed.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.Parameters">
            <summary>
            Gets the type of the arguments of the underlying CLR function
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.ExtensionMethodType">
            <summary>
            Gets the type which this extension method extends, null if this is not an extension method.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.VarArgsArrayType">
            <summary>
            Gets a value indicating the type of the ParamArray parameter of a var-args function. If the function is not var-args,
            null is returned.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.VarArgsElementType">
            <summary>
            Gets a value indicating the type of the elements of the ParamArray parameter of a var-args function. If the function is not var-args,
            null is returned.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the
            <see cref="T:MoonSharp.Interpreter.Interop.MethodMemberDescriptor" /> class
            representing the default empty ctor for a value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <exception cref="T:System.ArgumentException">valueType is not a value type</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.Execute(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.ScriptExecutionContext,MoonSharp.Interpreter.CallbackArguments)">
            <summary>
            Invokes the member from script.
            Implementors should raise exceptions if the value cannot be executed or if access to an
            instance member through a static userdata is attempted.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object.</param>
            <param name="context">The context.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.SortDiscriminant">
            <summary>
            Gets a sort discriminant to give consistent overload resolution matching in case of perfectly equal scores
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.MemberAccess">
            <summary>
            Gets the types of access supported by this member
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.GetValue(MoonSharp.Interpreter.Script,System.Object)">
            <summary>
            Gets the value of this member as a 
            <see cref="T:MoonSharp.Interpreter.DynValue" /> to be exposed to scripts.
            Implementors should raise exceptions if the value cannot be read or if access to an
            instance member through a static userdata is attempted.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object owning this member, or null if static.</param>
            <returns>
            The value of this member as a <see cref="T:MoonSharp.Interpreter.DynValue" />.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.SetValue(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue)">
            <summary>
            Sets the value of this member from a 
            <see cref="T:MoonSharp.Interpreter.DynValue" />.
            Implementors should raise exceptions if the value cannot be read or if access to an
            instance member through a static userdata is attempted.
            </summary>
            <param name="script">The script.</param>
            <param name="obj">The object owning this member, or null if static.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.ValueTypeDefaultCtorMemberDescriptor.PrepareForWiring(MoonSharp.Interpreter.Table)">
            <summary>
            Prepares the descriptor for hard-wiring.
            The descriptor fills the passed table with all the needed data for hardwire generators to generate the appropriate code.
            </summary>
            <param name="t">The table to be filled</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor">
            <summary>
            Standard descriptor for Enum values
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.UnderlyingType">
            <summary>
            Gets the underlying type of the enum.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.IsUnsigned">
            <summary>
            Gets a value indicating whether underlying type of the enum is unsigned.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.IsFlags">
            <summary>
            Gets a value indicating whether this instance describes a flags enumeration.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.#ctor(System.Type,System.String,System.String[],System.Object[],System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor"/> class.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="friendlyName">Name of the friendly.</param>
            <exception cref="T:System.ArgumentException">enumType must be an enum!</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.FillMemberList(System.String[],System.Object[])">
            <summary>
            Fills the member list.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.AddEnumMethod(System.String,MoonSharp.Interpreter.DynValue)">
            <summary>
            Adds an enum method to the object
            </summary>
            <param name="name">The name.</param>
            <param name="dynValue">The dyn value.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.GetValueSigned(MoonSharp.Interpreter.DynValue)">
            <summary>
            Gets the value of the enum as a long
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.GetValueUnsigned(MoonSharp.Interpreter.DynValue)">
            <summary>
            Gets the value of the enum as a ulong
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.CreateValueSigned(System.Int64)">
            <summary>
            Creates an enum value from a long
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.CreateValueUnsigned(System.UInt64)">
            <summary>
            Creates an enum value from a ulong
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.CreateSignedConversionFunctions">
            <summary>
            Creates conversion functions for signed enums
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.CreateUnsignedConversionFunctions">
            <summary>
            Creates conversion functions for unsigned enums
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.IsTypeCompatible(System.Type,System.Object)">
            <summary>
            Determines whether the specified object is compatible with the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardEnumUserDataDescriptor.MetaIndex(MoonSharp.Interpreter.Script,System.Object,System.String)">
            <summary>
            Gets a "meta" operation on this userdata. 
            In this specific case, only the concat operator is supported, only on flags enums and it implements the
            'or' operator.
            </summary>
            <param name="script"></param>
            <param name="obj"></param>
            <param name="metaname"></param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.StandardGenericsUserDataDescriptor">
            <summary>
            Standard user data descriptor used to instantiate generics.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.StandardGenericsUserDataDescriptor.AccessMode">
            <summary>
            Gets the interop access mode this descriptor uses for members access
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardGenericsUserDataDescriptor.#ctor(System.Type,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.StandardUserDataDescriptor"/> class.
            </summary>
            <param name="type">The type this descriptor refers to.</param>
            <param name="accessMode">The interop access mode this descriptor uses for members access</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.StandardGenericsUserDataDescriptor.Name">
            <inheritdoc/>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.StandardGenericsUserDataDescriptor.Type">
            <inheritdoc/>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardGenericsUserDataDescriptor.Index(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardGenericsUserDataDescriptor.SetIndex(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardGenericsUserDataDescriptor.AsString(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardGenericsUserDataDescriptor.MetaIndex(MoonSharp.Interpreter.Script,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardGenericsUserDataDescriptor.IsTypeCompatible(System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardGenericsUserDataDescriptor.Generate(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.StandardUserDataDescriptor">
            <summary>
            Standard descriptor for userdata types.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.StandardUserDataDescriptor.AccessMode">
            <summary>
            Gets the interop access mode this descriptor uses for members access
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardUserDataDescriptor.#ctor(System.Type,MoonSharp.Interpreter.InteropAccessMode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Interop.StandardUserDataDescriptor"/> class.
            </summary>
            <param name="type">The type this descriptor refers to.</param>
            <param name="accessMode">The interop access mode this descriptor uses for members access</param>
            <param name="friendlyName">A human readable friendly name of the descriptor.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.StandardUserDataDescriptor.FillMemberList">
            <summary>
            Fills the member list.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.UserDataRegistries.ExtensionMethodsRegistry">
            <summary>
            Registry of all extension methods. Use UserData statics to access these.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.UserDataRegistries.ExtensionMethodsRegistry.RegisterExtensionType(System.Type,MoonSharp.Interpreter.InteropAccessMode)">
            <summary>
            Registers an extension Type (that is a type containing extension methods)
            </summary>
            <param name="type">The type.</param>
            <param name="mode">The InteropAccessMode.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.UserDataRegistries.ExtensionMethodsRegistry.GetExtensionMethodsByName(System.String)">
            <summary>
            Gets all the extension methods which can match a given name
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.UserDataRegistries.ExtensionMethodsRegistry.GetExtensionMethodsChangeVersion">
            <summary>
            Gets a number which gets incremented everytime the extension methods registry changes.
            Use this to invalidate caches based on extension methods
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.UserDataRegistries.ExtensionMethodsRegistry.GetExtensionMethodsByNameAndType(System.String,System.Type)">
            <summary>
            Gets all the extension methods which can match a given name and extending a given Type
            </summary>
            <param name="name">The name.</param>
            <param name="extendedType">The extended type.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.UserDataRegistries.TypeDescriptorRegistry">
            <summary>
            Registry of all type descriptors. Use UserData statics to access these.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.UserDataRegistries.TypeDescriptorRegistry.RegisterAssembly(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Registers all types marked with a MoonSharpUserDataAttribute that ar contained in an assembly.
            </summary>
            <param name="asm">The assembly.</param>
            <param name="includeExtensionTypes">if set to <c>true</c> extension types are registered to the appropriate registry.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.UserDataRegistries.TypeDescriptorRegistry.IsTypeRegistered(System.Type)">
            <summary>
            Determines whether the specified type is registered. Note that this should be used only to check if a descriptor
            has been registered EXACTLY. For many types a descriptor can still be created, for example through the descriptor
            of a base type or implemented interfaces.
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.UserDataRegistries.TypeDescriptorRegistry.UnregisterType(System.Type)">
            <summary>
            Unregisters a type.
            WARNING: unregistering types at runtime is a dangerous practice and may cause unwanted errors.
            Use this only for testing purposes or to re-register the same type in a slightly different way.
            Additionally, it's a good practice to discard all previous loaded scripts after calling this method.
            </summary>
            <param name="t">The The type to be unregistered</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.UserDataRegistries.TypeDescriptorRegistry.DefaultAccessMode">
            <summary>
            Gets or sets the default access mode to be used in the whole application
            </summary>
            <value>
            The default access mode.
            </value>
            <exception cref="T:System.ArgumentException">InteropAccessMode is InteropAccessMode.Default</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.UserDataRegistries.TypeDescriptorRegistry.RegisterProxyType_Impl(MoonSharp.Interpreter.Interop.IProxyFactory,MoonSharp.Interpreter.InteropAccessMode,System.String)">
            <summary>
            Registers a proxy type.
            </summary>
            <param name="proxyFactory">The proxy factory.</param>
            <param name="accessMode">The access mode.</param>
            <param name="friendlyName">Name of the friendly.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.UserDataRegistries.TypeDescriptorRegistry.RegisterType_Impl(System.Type,MoonSharp.Interpreter.InteropAccessMode,System.String,MoonSharp.Interpreter.Interop.IUserDataDescriptor)">
            <summary>
            Registers a type
            </summary>
            <param name="type">The type.</param>
            <param name="accessMode">The access mode (used only if a default type descriptor is created).</param>
            <param name="friendlyName">Friendly name of the descriptor.</param>
            <param name="descriptor">The descriptor, or null to use a default one.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.UserDataRegistries.TypeDescriptorRegistry.ResolveDefaultAccessModeForType(MoonSharp.Interpreter.InteropAccessMode,System.Type)">
            <summary>
            Resolves the default type of the access mode for the given type
            </summary>
            <param name="accessMode">The access mode.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.UserDataRegistries.TypeDescriptorRegistry.GetDescriptorForType(System.Type,System.Boolean)">
            <summary>
            Gets the best possible type descriptor for a specified CLR type.
            </summary>
            <param name="type">The CLR type for which the descriptor is desired.</param>
            <param name="searchInterfaces">if set to <c>true</c> interfaces are used in the search.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Interop.UserDataRegistries.TypeDescriptorRegistry.IsTypeBlacklisted(System.Type)">
            <summary>
            Determines whether the specified type is blacklisted.
            Blacklisted types CANNOT be registered using default descriptors but they can still be registered
            with custom descriptors. Forcing registration of blacklisted types in this way can introduce
            side effects.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.UserDataRegistries.TypeDescriptorRegistry.RegisteredTypes">
            <summary>
            Gets the list of registered types.
            </summary>
            <value>
            The registered types.
            </value>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.UserDataRegistries.TypeDescriptorRegistry.RegisteredTypesHistory">
            <summary>
            Gets the list of registered types, including unregistered types.
            </summary>
            <value>
            The registered types.
            </value>
        </member>
        <member name="P:MoonSharp.Interpreter.Interop.UserDataRegistries.TypeDescriptorRegistry.RegistrationPolicy">
            <summary>
            Gets or sets the registration policy.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Interop.NamespaceDoc">
            <summary>
            Namespace containing classes used to customize and support advanced interoperations between
            scripts and CLR code.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.InteropAccessMode">
            <summary>
            Enumerations of the possible strategies to marshal CLR objects to MoonSharp userdata and functions
            when using automatic descriptors.
            Note that these are "hints" and MoonSharp is free to ignore the access mode specified (if different from
            HideMembers) and downgrade the access mode to "Reflection". 
            This particularly happens when running on AOT platforms like iOS.
            See also : <see cref="T:MoonSharp.Interpreter.CallbackFunction"/> and <see cref="T:MoonSharp.Interpreter.UserData"/> .
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.Reflection">
            <summary>
            Optimization is not performed and reflection is used everytime to access members.
            This is the slowest approach but saves a lot of memory if members are seldomly used.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.LazyOptimized">
            <summary>
            Optimization is done on the fly the first time a member is accessed.
            This saves memory for all members that are never accessed, at the cost of an increased script execution time.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.Preoptimized">
            <summary>
            Optimization is done at registration time.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.BackgroundOptimized">
            <summary>
            Optimization is done in a background thread which starts at registration time. 
            If a member is accessed before optimization is completed, reflection is used.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.Hardwired">
            <summary>
            Use the hardwired descriptor(s)
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.HideMembers">
            <summary>
            No optimization is done, and members are not accessible at all.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.NoReflectionAllowed">
            <summary>
            No reflection is allowed, nor code generation. This is used as a safeguard when registering types which should not
            use a standard reflection based descriptor - for example for types implementing <see cref="T:MoonSharp.Interpreter.Interop.IUserDataType" />
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.InteropAccessMode.Default">
            <summary>
            Use the default access mode
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.AutoDescribingUserDataDescriptor">
            <summary>
            Descriptor which acts as a non-containing adapter from IUserDataType to IUserDataDescriptor
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.AutoDescribingUserDataDescriptor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.AutoDescribingUserDataDescriptor"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="friendlyName">Name of the friendly.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.AutoDescribingUserDataDescriptor.Name">
            <summary>
            Gets the name of the descriptor (usually, the name of the type described).
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.AutoDescribingUserDataDescriptor.Type">
            <summary>
            Gets the type this descriptor refers to
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.AutoDescribingUserDataDescriptor.Index(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <summary>
            Performs an "index" "get" operation.
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="index">The index.</param>
            <param name="isDirectIndexing">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.AutoDescribingUserDataDescriptor.SetIndex(MoonSharp.Interpreter.Script,System.Object,MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue,System.Boolean)">
            <summary>
            Performs an "index" "set" operation.
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="index">The index.</param>
            <param name="value">The value to be set</param>
            <param name="isDirectIndexing">If set to true, it's indexed with a name, if false it's indexed through brackets.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.AutoDescribingUserDataDescriptor.AsString(System.Object)">
            <summary>
            Converts this userdata to string
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.AutoDescribingUserDataDescriptor.MetaIndex(MoonSharp.Interpreter.Script,System.Object,System.String)">
            <summary>
            Gets a "meta" operation on this userdata. If a descriptor does not support this functionality,
            it should return "null" (not a nil). 
            These standard metamethods can be supported (the return value should be a function accepting the
            classic parameters of the corresponding metamethod):
            __add, __sub, __mul, __div, __div, __pow, __unm, __eq, __lt, __le, __lt, __len, __concat, 
            __pairs, __ipairs, __iterator, __call
            These standard metamethods are supported through other calls for efficiency:
            __index, __newindex, __tostring
            </summary>
            <param name="script">The script originating the request</param>
            <param name="obj">The object (null if a static request is done)</param>
            <param name="metaname">The name of the metamember.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.AutoDescribingUserDataDescriptor.IsTypeCompatible(System.Type,System.Object)">
            <summary>
            Determines whether the specified object is compatible with the specified type.
            Unless a very specific behaviour is needed, the correct implementation is a 
            simple " return type.IsInstanceOfType(obj); "
            </summary>
            <param name="type">The type.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.IO.BinDumpBinaryReader">
            <summary>
            "Optimized" BinaryReader which shares strings and use a dumb compression for integers
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.IO.BinDumpBinaryWriter">
            <summary>
            "Optimized" BinaryWriter which shares strings and use a dumb compression for integers
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.IO.UndisposableStream">
            <summary>
            An adapter over Stream which bypasses the Dispose and Close methods.
            Used to work around the pesky wrappers .NET has over Stream (BinaryReader, StreamWriter, etc.) which think they
            own the Stream and close them when they shouldn't. Damn.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.LinqHelpers">
            <summary>
            LINQ helper methods
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.LinqHelpers.Convert``1(System.Collections.Generic.IEnumerable{MoonSharp.Interpreter.DynValue},MoonSharp.Interpreter.DataType)">
            <summary>
            Converts the specified enumerable dynvalues of a given script type to objects of a given type
            </summary>
            <typeparam name="T">The desired type</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.LinqHelpers.OfDataType(System.Collections.Generic.IEnumerable{MoonSharp.Interpreter.DynValue},MoonSharp.Interpreter.DataType)">
            <summary>
            Filters an enumeration for items of the given script type
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="type">The script type.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.LinqHelpers.AsObjects(System.Collections.Generic.IEnumerable{MoonSharp.Interpreter.DynValue})">
            <summary>
            Converts the elements to CLR objects
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.LinqHelpers.AsObjects``1(System.Collections.Generic.IEnumerable{MoonSharp.Interpreter.DynValue})">
            <summary>
            Converts the elements to CLR objects of the desired type
            </summary>
            <typeparam name="T">The desired type</typeparam>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="T:MoonSharp.Interpreter.Loaders.EmbeddedResourcesScriptLoader">
            <summary>
            A script loader loading scripts from an assembly resources
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.EmbeddedResourcesScriptLoader.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Loaders.EmbeddedResourcesScriptLoader"/> class.
            </summary>
            <param name="resourceAssembly">The assembly containing the scripts as embedded resources or null to use the calling assembly.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.EmbeddedResourcesScriptLoader.ScriptFileExists(System.String)">
            <summary>
            Checks if a script file exists.
            </summary>
            <param name="name">The script filename.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.EmbeddedResourcesScriptLoader.LoadFile(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Opens a file for reading the script code.
            It can return either a string, a byte[] or a Stream.
            If a byte[] is returned, the content is assumed to be a serialized (dumped) bytecode. If it's a string, it's
            assumed to be either a script or the output of a string.dump call. If a Stream, autodetection takes place.
            </summary>
            <param name="file">The file.</param>
            <param name="globalContext">The global context.</param>
            <returns>
            A string, a byte[] or a Stream.
            </returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Loaders.FileSystemScriptLoader">
            <summary>
            A script loader loading scripts directly from the file system (does not go through platform object)
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.FileSystemScriptLoader.ScriptFileExists(System.String)">
            <summary>
            Checks if a script file exists.
            </summary>
            <param name="name">The script filename.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.FileSystemScriptLoader.LoadFile(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Opens a file for reading the script code.
            It can return either a string, a byte[] or a Stream.
            If a byte[] is returned, the content is assumed to be a serialized (dumped) bytecode. If it's a string, it's
            assumed to be either a script or the output of a string.dump call. If a Stream, autodetection takes place.
            </summary>
            <param name="file">The file.</param>
            <param name="globalContext">The global context.</param>
            <returns>
            A string, a byte[] or a Stream.
            </returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Loaders.InvalidScriptLoader">
            <summary>
            A script loader used for platforms we cannot initialize in any better way..
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Loaders.IScriptLoader">
            <summary>
            Class dictating how requests to read scripts from files are handled.
            
            It's recommended that no class implement IScriptLoader directly, and rather extend ScriptLoaderBase.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.IScriptLoader.LoadFile(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Opens a file for reading the script code.
            It can return either a string, a byte[] or a Stream.
            If a byte[] is returned, the content is assumed to be a serialized (dumped) bytecode. If it's a string, it's
            assumed to be either a script or the output of a string.dump call. If a Stream, autodetection takes place.
            </summary>
            <param name="file">The file.</param>
            <param name="globalContext">The global context.</param>
            <returns>
            A string, a byte[] or a Stream.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.IScriptLoader.ResolveFileName(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Resolves a filename [applying paths, etc.]
            </summary>
            <param name="filename">The filename.</param>
            <param name="globalContext">The global context.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.IScriptLoader.ResolveModuleName(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Resolves the name of a module to a filename (which will later be passed to OpenScriptFile)
            </summary>
            <param name="modname">The modname.</param>
            <param name="globalContext">The global context.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Loaders.ScriptLoaderBase">
            <summary>
            A base implementation of IScriptLoader, offering resolution of module names.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.ScriptLoaderBase.ScriptFileExists(System.String)">
            <summary>
            Checks if a script file exists. 
            </summary>
            <param name="name">The script filename.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.ScriptLoaderBase.LoadFile(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Opens a file for reading the script code.
            It can return either a string, a byte[] or a Stream.
            If a byte[] is returned, the content is assumed to be a serialized (dumped) bytecode. If it's a string, it's
            assumed to be either a script or the output of a string.dump call. If a Stream, autodetection takes place.
            </summary>
            <param name="file">The file.</param>
            <param name="globalContext">The global context.</param>
            <returns>
            A string, a byte[] or a Stream.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.ScriptLoaderBase.ResolveModuleName(System.String,System.String[])">
            <summary>
            Resolves the name of a module on a set of paths.
            </summary>
            <param name="modname">The modname.</param>
            <param name="paths">The paths.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.ScriptLoaderBase.ResolveModuleName(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Resolves the name of a module to a filename (which will later be passed to OpenScriptFile).
            The resolution happens first on paths included in the LUA_PATH global variable (if and only if
            the IgnoreLuaPathGlobal is false), and - if the variable does not exist - by consulting the
            ScriptOptions.ModulesPaths array. Override to provide a different behaviour.
            </summary>
            <param name="modname">The modname.</param>
            <param name="globalContext">The global context.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Loaders.ScriptLoaderBase.ModulePaths">
            <summary>
            Gets or sets the modules paths used by the "require" function. If null, the default paths are used (using
            environment variables etc.). 
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.ScriptLoaderBase.UnpackStringPaths(System.String)">
            <summary>
            Unpacks a string path in a form like "?;?.lua" to an array
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.ScriptLoaderBase.GetDefaultEnvironmentPaths">
            <summary>
            Gets the default environment paths.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.ScriptLoaderBase.ResolveFileName(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Resolves a filename [applying paths, etc.]
            </summary>
            <param name="filename">The filename.</param>
            <param name="globalContext">The global context.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Loaders.ScriptLoaderBase.IgnoreLuaPathGlobal">
            <summary>
            Gets or sets a value indicating whether the LUA_PATH global is checked or not to get the path where modules are contained.
            If true, the LUA_PATH global is NOT checked.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Loaders.UnityAssetsScriptLoader">
            <summary>
            A script loader which can load scripts from assets in Unity3D.
            Scripts should be saved as .txt files in a subdirectory of Assets/Resources.
            
            When MoonSharp is activated on Unity3D and the default script loader is used,
            scripts should be saved as .txt files in Assets/Resources/MoonSharp/Scripts.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Loaders.UnityAssetsScriptLoader.DEFAULT_PATH">
            <summary>
            The default path where scripts are meant to be stored (if not changed)
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.UnityAssetsScriptLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Loaders.UnityAssetsScriptLoader"/> class.
            </summary>
            <param name="assetsPath">The path, relative to Assets/Resources. For example
            if your scripts are stored under Assets/Resources/Scripts, you should
            pass the value "Scripts". If null, "MoonSharp/Scripts" is used. </param>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.UnityAssetsScriptLoader.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Loaders.UnityAssetsScriptLoader"/> class.
            </summary>
            <param name="scriptToCodeMap">A dictionary mapping filenames to the proper Lua script code.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.UnityAssetsScriptLoader.LoadFile(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Opens a file for reading the script code.
            It can return either a string, a byte[] or a Stream.
            If a byte[] is returned, the content is assumed to be a serialized (dumped) bytecode. If it's a string, it's
            assumed to be either a script or the output of a string.dump call. If a Stream, autodetection takes place.
            </summary>
            <param name="file">The file.</param>
            <param name="globalContext">The global context.</param>
            <returns>
            A string, a byte[] or a Stream.
            </returns>
            <exception cref="T:System.Exception">UnityAssetsScriptLoader.LoadFile : Cannot load  + file</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.UnityAssetsScriptLoader.ScriptFileExists(System.String)">
            <summary>
            Checks if a given file exists
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Loaders.UnityAssetsScriptLoader.GetLoadedScripts">
            <summary>
            Gets the list of loaded scripts filenames (useful for debugging purposes).
            </summary>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Loaders.NamespaceDoc">
            <summary>
            Namespace containing classes used to customized how scripts are loaded from external files.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.CoreModules">
            <summary>
            Enumeration (combinable as flags) of all the standard library modules
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.None">
            <summary>
            Value used to specify no modules to be loaded (equals 0).
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Basic">
            <summary>
            The basic methods. Includes "assert", "collectgarbage", "error", "print", "select", "type", "tonumber" and "tostring".
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.GlobalConsts">
            <summary>
            The global constants: "_G", "_VERSION" and "_MOONSHARP".
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.TableIterators">
            <summary>
            The table iterators: "next", "ipairs" and "pairs".
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Metatables">
            <summary>
            The metatable methods : "setmetatable", "getmetatable", "rawset", "rawget", "rawequal" and "rawlen".
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.String">
            <summary>
            The string package
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.LoadMethods">
            <summary>
            The load methods: "load", "loadsafe", "loadfile", "loadfilesafe", "dofile" and "require"
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Table">
            <summary>
            The table package 
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.ErrorHandling">
            <summary>
            The error handling methods: "pcall" and "xpcall"
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Math">
            <summary>
            The math package
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Coroutine">
            <summary>
            The coroutine package
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Bit32">
            <summary>
            The bit32 package
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.OS_Time">
            <summary>
            The time methods of the "os" package: "clock", "difftime", "date" and "time"
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.OS_System">
            <summary>
            The methods of "os" package excluding those listed for OS_Time. These are not supported under Unity.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.IO">
            <summary>
            The methods of "io" and "file" packages. These are not supported under Unity.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Debug">
            <summary>
            The "debug" package (it has limited support)
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Dynamic">
            <summary>
            The "dynamic" package (introduced by MoonSharp).
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Json">
            <summary>
            The "json" package (introduced by MoonSharp).
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Preset_HardSandbox">
            <summary>
            A sort of "hard" sandbox preset, including string, math, table, bit32 packages, constants and table iterators.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Preset_SoftSandbox">
            <summary>
            A softer sandbox preset, adding metatables support, error handling, coroutine, time functions, json parsing and dynamic evaluations.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Preset_Default">
            <summary>
            The default preset. Includes everything except "debug" as now.
            Beware that using this preset allows scripts unlimited access to the system.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.CoreModules.Preset_Complete">
            <summary>
            The complete package.
            Beware that using this preset allows scripts unlimited access to the system.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.ModuleRegister">
            <summary>
            Class managing modules (mostly as extension methods)
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.ModuleRegister.RegisterCoreModules(MoonSharp.Interpreter.Table,MoonSharp.Interpreter.CoreModules)">
            <summary>
            Register the core modules to a table
            </summary>
            <param name="table">The table.</param>
            <param name="modules">The modules.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ModuleRegister.RegisterConstants(MoonSharp.Interpreter.Table)">
            <summary>
            Registers the standard constants (_G, _VERSION, _MOONSHARP) to a table
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.ModuleRegister.RegisterModuleType(MoonSharp.Interpreter.Table,System.Type)">
            <summary>
            Registers a module type to the specified table
            </summary>
            <param name="gtable">The table.</param>
            <param name="t">The type</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If the module contains some incompatibility</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.ModuleRegister.RegisterModuleType``1(MoonSharp.Interpreter.Table)">
            <summary>
            Registers a module type to the specified table
            </summary>
            <typeparam name="T">The module type</typeparam>
            <param name="table">The table.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If the module contains some incompatibility</exception>
        </member>
        <member name="T:MoonSharp.Interpreter.MoonSharpModuleAttribute">
            <summary>
            Marks a CLR type to be a MoonSharp module.
            Modules are the fastest way to bring interop between scripts and CLR code, albeit at the cost of a very increased
            complexity in writing them. Modules is what's used for the standard library, for maximum efficiency.
            
            Modules are basically classes containing only static methods, with the callback function signature.
            
            See <see cref="T:MoonSharp.Interpreter.Table"/> and <see cref="T:MoonSharp.Interpreter.ModuleRegister"/> for (extension) methods used to register modules to a 
            table.
            
            See <see cref="T:MoonSharp.Interpreter.CallbackFunction"/> for information regarding the standard callback signature along with easier ways
            to marshal methods.
            
            See <see cref="T:MoonSharp.Interpreter.UserData"/> for easier object marshalling.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.MoonSharpModuleAttribute.Namespace">
            <summary>
            Gets or sets the namespace, that is the name of the table which will contain the defined functions.
            Can be null to be in the global table.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.MoonSharpModuleConstantAttribute">
            <summary>
            In a module type, mark fields with this attribute to have them exposed as a module constant.
            
            See <see cref="T:MoonSharp.Interpreter.MoonSharpModuleAttribute"/> for more information about modules.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.MoonSharpModuleConstantAttribute.Name">
            <summary>
            Gets or sets the name of the constant - if different from the name of the field itself
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.MoonSharpModuleMethodAttribute">
            <summary>
            In a module type, mark methods or fields with this attribute to have them exposed as module functions.
            Methods must have the signature "public static DynValue ...(ScriptExecutionContextCallbackArguments)".
            Fields must be static or const strings, with an anonymous Lua function inside.
            
            See <see cref="T:MoonSharp.Interpreter.MoonSharpModuleAttribute"/> for more information about modules.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.MoonSharpModuleMethodAttribute.Name">
            <summary>
            Gets or sets the name of the function in the module (defaults to member name)
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.NamespaceDoc">
            <summary>
            Namespace containing all the most commonly used classes for MoonSharp operation.
            When in doubt, refer to <see cref="T:MoonSharp.Interpreter.Script" /> and <see cref="T:MoonSharp.Interpreter.DynValue" /> classes as starting points.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Platforms.NamespaceDoc">
            <summary>
            Namespace containing classes used to customize how the interfacing with the operative system happens
            for the 'os' and 'io' modules, and for future modules/classes which may require OS access.
            See <see cref="T:MoonSharp.Interpreter.Platforms.IPlatformAccessor"/> and <see cref="P:MoonSharp.Interpreter.ScriptGlobalOptions.Platform"/> .
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Platforms.IPlatformAccessor">
            <summary>
            Interface to abstract all accesses made to the underlying platform (OS, framework) by the scripting engine.
            Can be used both to support "non-standard" platforms (i.e. non-posix, non-windows) and/or to sandbox the behaviour
            of the scripting engine.
            
            It's recommended that no class implement IPlatformAccessor directly, and rather extend <see cref="T:MoonSharp.Interpreter.Platforms.PlatformAccessorBase"/>.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.FilterSupportedCoreModules(MoonSharp.Interpreter.CoreModules)">
            <summary>
            Filters the CoreModules enumeration to exclude non-supported operations
            </summary>
            <param name="module">The requested modules.</param>
            <returns>
            The requested modules, with unsupported modules filtered out.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.GetEnvironmentVariable(System.String)">
            <summary>
            Gets an environment variable. Must be implemented, but an implementation is allowed
            to always return null if a more meaningful implementation cannot be achieved or is
            not desired.
            </summary>
            <param name="envvarname">The envvarname.</param>
            <returns>
            The environment variable value, or null if not found
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.IsRunningOnAOT">
            <summary>
            Determines whether the application is running in AOT (ahead-of-time) mode
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.GetPlatformName">
            <summary>
            Gets the name of the platform (used for debug purposes).
            </summary>
            <returns>The name of the platform (used for debug purposes)</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.DefaultPrint(System.String)">
            <summary>
            Default handler for 'print' calls. Can be customized in ScriptOptions
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.DefaultInput(System.String)">
            <summary>
            Default handler for interactive line input calls. Can be customized in ScriptOptions.
            If a meaningful implementation cannot be provided, this method should return null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.IO_OpenFile(MoonSharp.Interpreter.Script,System.String,System.Text.Encoding,System.String)">
            <summary>
            A function used to open files in the 'io' module.
            Can have an invalid implementation if 'io' module is filtered out.
            It should return a correctly initialized Stream for the given file and access
            </summary>
            <param name="script">The script.</param>
            <param name="filename">The filename.</param>
            <param name="encoding">The encoding.</param>
            <param name="mode">The mode (as per Lua usage - e.g. 'w+', 'rb', etc.).</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.IO_GetStandardStream(MoonSharp.Interpreter.Platforms.StandardFileType)">
            <summary>
            Gets a standard stream (stdin, stdout, stderr).
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.IO_OS_GetTempFilename">
            <summary>
            Gets a temporary filename. Used in 'io' and 'os' modules.
            Can have an invalid implementation if 'io' and 'os' modules are filtered out.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.OS_ExitFast(System.Int32)">
            <summary>
            Exits the process, returning the specified exit code.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.OS_FileExists(System.String)">
            <summary>
            Checks if a file exists. Used by the 'os' module.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="file">The file.</param>
            <returns>True if the file exists, false otherwise.</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.OS_FileDelete(System.String)">
            <summary>
            Deletes the specified file. Used by the 'os' module.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.OS_FileMove(System.String,System.String)">
            <summary>
            Moves the specified file. Used by the 'os' module.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="src">The source.</param>
            <param name="dst">The DST.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.IPlatformAccessor.OS_Execute(System.String)">
            <summary>
            Executes the specified command line, returning the child process exit code and blocking in the meantime.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="cmdline">The cmdline.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Platforms.LimitedPlatformAccessor">
            <summary>
            A class implementing all the bits needed to have a minimal support of a platform.
            This does not support the 'io'/'file' modules and has partial support of the 'os' module.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.LimitedPlatformAccessor.GetEnvironmentVariable(System.String)">
            <summary>
            Gets an environment variable. Must be implemented, but an implementation is allowed
            to always return null if a more meaningful implementation cannot be achieved or is
            not desired.
            </summary>
            <param name="envvarname">The envvarname.</param>
            <returns>
            The environment variable value, or null if not found
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.LimitedPlatformAccessor.FilterSupportedCoreModules(MoonSharp.Interpreter.CoreModules)">
            <summary>
            Filters the CoreModules enumeration to exclude non-supported operations
            </summary>
            <param name="module">The requested modules.</param>
            <returns>
            The requested modules, with unsupported modules filtered out.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.LimitedPlatformAccessor.IO_OpenFile(MoonSharp.Interpreter.Script,System.String,System.Text.Encoding,System.String)">
            <summary>
            A function used to open files in the 'io' module. 
            LimitedPlatformAccessorBase does NOT offer a meaningful implementation of this method and
            thus does not support 'io' and 'os' modules.
            </summary>
            <param name="script"></param>
            <param name="filename">The filename.</param>
            <param name="encoding">The encoding.</param>
            <param name="mode">The mode (as per Lua usage - e.g. 'w+', 'rb', etc.).</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">The current platform accessor does not support 'io' and 'os' operations. Provide your own implementation of platform to work around this limitation, if needed.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.LimitedPlatformAccessor.IO_GetStandardStream(MoonSharp.Interpreter.Platforms.StandardFileType)">
            <summary>
            Gets a standard stream (stdin, stdout, stderr).
            LimitedPlatformAccessorBase does NOT offer a meaningful implementation of this method and
            thus does not support 'io' and 'os' modules.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">The current platform accessor does not support 'io' and 'os' operations. Provide your own implementation of platform to work around this limitation, if needed.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.LimitedPlatformAccessor.IO_OS_GetTempFilename">
            <summary>
            Gets a temporary filename. Used in 'io' and 'os' modules.
            LimitedPlatformAccessorBase does NOT offer a meaningful implementation of this method and
            thus does not support 'io' and 'os' modules.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">The current platform accessor does not support 'io' and 'os' operations. Provide your own implementation of platform to work around this limitation, if needed.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.LimitedPlatformAccessor.OS_ExitFast(System.Int32)">
            <summary>
            Exits the process, returning the specified exit code.
            LimitedPlatformAccessorBase does NOT offer a meaningful implementation of this method and
            thus does not support 'io' and 'os' modules.
            </summary>
            <param name="exitCode">The exit code.</param>
            <exception cref="T:System.NotImplementedException">The current platform accessor does not support 'io' and 'os' operations. Provide your own implementation of platform to work around this limitation, if needed.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.LimitedPlatformAccessor.OS_FileExists(System.String)">
            <summary>
            Checks if a file exists. Used by the 'os' module.
            LimitedPlatformAccessorBase does NOT offer a meaningful implementation of this method and
            thus does not support 'io' and 'os' modules.
            </summary>
            <param name="file">The file.</param>
            <returns>
            True if the file exists, false otherwise.
            </returns>
            <exception cref="T:System.NotImplementedException">The current platform accessor does not support 'io' and 'os' operations. Provide your own implementation of platform to work around this limitation, if needed.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.LimitedPlatformAccessor.OS_FileDelete(System.String)">
            <summary>
            Deletes the specified file. Used by the 'os' module.
            LimitedPlatformAccessorBase does NOT offer a meaningful implementation of this method and
            thus does not support 'io' and 'os' modules.
            </summary>
            <param name="file">The file.</param>
            <exception cref="T:System.NotImplementedException">The current platform accessor does not support 'io' and 'os' operations. Provide your own implementation of platform to work around this limitation, if needed.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.LimitedPlatformAccessor.OS_FileMove(System.String,System.String)">
            <summary>
            Moves the specified file. Used by the 'os' module.
            LimitedPlatformAccessorBase does NOT offer a meaningful implementation of this method and
            thus does not support 'io' and 'os' modules.
            </summary>
            <param name="src">The source.</param>
            <param name="dst">The DST.</param>
            <exception cref="T:System.NotImplementedException">The current platform accessor does not support 'io' and 'os' operations. Provide your own implementation of platform to work around this limitation, if needed.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.LimitedPlatformAccessor.OS_Execute(System.String)">
            <summary>
            Executes the specified command line, returning the child process exit code and blocking in the meantime.
            LimitedPlatformAccessorBase does NOT offer a meaningful implementation of this method and
            thus does not support 'io' and 'os' modules.
            </summary>
            <param name="cmdline">The cmdline.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">The current platform accessor does not support 'io' and 'os' operations. Provide your own implementation of platform to work around this limitation, if needed.</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.LimitedPlatformAccessor.GetPlatformNamePrefix">
            <summary>
            Gets the platform name prefix
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.LimitedPlatformAccessor.DefaultPrint(System.String)">
            <summary>
            Default handler for 'print' calls. Can be customized in ScriptOptions
            </summary>
            <param name="content">The content.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:MoonSharp.Interpreter.Platforms.PlatformAccessorBase">
            <summary>
            An abstract class which offers basic services on top of IPlatformAccessor to provide easier implementation of platforms.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.GetPlatformNamePrefix">
            <summary>
            Gets the platform name prefix
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.GetPlatformName">
            <summary>
            Gets the name of the platform (used for debug purposes).
            </summary>
            <returns>
            The name of the platform (used for debug purposes)
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.DefaultPrint(System.String)">
            <summary>
            Default handler for 'print' calls. Can be customized in ScriptOptions
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.DefaultInput">
            <summary>
            DEPRECATED.
            This is kept for backward compatibility, see the overload taking a prompt as an input parameter.
            
            Default handler for interactive line input calls. Can be customized in ScriptOptions.
            If an inheriting class whants to give a meaningful implementation, this method MUST be overridden.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.DefaultInput(System.String)">
            <summary>
            Default handler for interactive line input calls. Can be customized in ScriptOptions.
            If an inheriting class whants to give a meaningful implementation, this method MUST be overridden.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.IO_OpenFile(MoonSharp.Interpreter.Script,System.String,System.Text.Encoding,System.String)">
            <summary>
            A function used to open files in the 'io' module. 
            Can have an invalid implementation if 'io' module is filtered out.
            It should return a correctly initialized Stream for the given file and access
            </summary>
            <param name="script"></param>
            <param name="filename">The filename.</param>
            <param name="encoding">The encoding.</param>
            <param name="mode">The mode (as per Lua usage - e.g. 'w+', 'rb', etc.).</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.IO_GetStandardStream(MoonSharp.Interpreter.Platforms.StandardFileType)">
            <summary>
            Gets a standard stream (stdin, stdout, stderr).
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.IO_OS_GetTempFilename">
            <summary>
            Gets a temporary filename. Used in 'io' and 'os' modules.
            Can have an invalid implementation if 'io' and 'os' modules are filtered out.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.OS_ExitFast(System.Int32)">
            <summary>
            Exits the process, returning the specified exit code.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.OS_FileExists(System.String)">
            <summary>
            Checks if a file exists. Used by the 'os' module.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="file">The file.</param>
            <returns>
            True if the file exists, false otherwise.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.OS_FileDelete(System.String)">
            <summary>
            Deletes the specified file. Used by the 'os' module.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.OS_FileMove(System.String,System.String)">
            <summary>
            Moves the specified file. Used by the 'os' module.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="src">The source.</param>
            <param name="dst">The DST.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.OS_Execute(System.String)">
            <summary>
            Executes the specified command line, returning the child process exit code and blocking in the meantime.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="cmdline">The cmdline.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.FilterSupportedCoreModules(MoonSharp.Interpreter.CoreModules)">
            <summary>
            Filters the CoreModules enumeration to exclude non-supported operations
            </summary>
            <param name="module">The requested modules.</param>
            <returns>
            The requested modules, with unsupported modules filtered out.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.GetEnvironmentVariable(System.String)">
            <summary>
            Gets an environment variable. Must be implemented, but an implementation is allowed
            to always return null if a more meaningful implementation cannot be achieved or is
            not desired.
            </summary>
            <param name="envvarname">The envvarname.</param>
            <returns>
            The environment variable value, or null if not found
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.PlatformAccessorBase.IsRunningOnAOT">
            <summary>
            Determines whether the application is running in AOT (ahead-of-time) mode
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Platforms.PlatformAutoDetector">
            <summary>
            A static class offering properties for autodetection of system/platform details
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Platforms.PlatformAutoDetector.IsRunningOnMono">
            <summary>
            Gets a value indicating whether this instance is running on mono.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Platforms.PlatformAutoDetector.IsRunningOnClr4">
            <summary>
            Gets a value indicating whether this instance is running on a CLR4 compatible implementation
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Platforms.PlatformAutoDetector.IsRunningOnUnity">
            <summary>
            Gets a value indicating whether this instance is running on Unity-3D
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Platforms.PlatformAutoDetector.IsPortableFramework">
            <summary>
            Gets a value indicating whether this instance has been built as a Portable Class Library
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Platforms.PlatformAutoDetector.IsUnityNative">
            <summary>
            Gets a value indicating whether this instance has been compiled natively in Unity (as opposite to importing a DLL).
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Platforms.PlatformAutoDetector.IsUnityIL2CPP">
            <summary>
            Gets a value indicating whether this instance has been compiled natively in Unity AND is using IL2CPP
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Platforms.PlatformAutoDetector.IsRunningOnAOT">
            <summary>
            Gets a value indicating whether this instance is running a system using Ahead-Of-Time compilation 
            and not supporting JIT.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Platforms.StandardFileType">
            <summary>
            Enumeration of standard file handles
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Platforms.StandardFileType.StdIn">
            <summary>
            Standard Input
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Platforms.StandardFileType.StdOut">
            <summary>
            Standard Output
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Platforms.StandardFileType.StdErr">
            <summary>
            Standard Error Output
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor">
            <summary>
            Class providing the IPlatformAccessor interface for standard full-feaured implementations.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.ParseFileAccess(System.String)">
            <summary>
            Converts a Lua string access mode to a FileAccess enum
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.ParseFileMode(System.String)">
            <summary>
            Converts a Lua string access mode to a ParseFileMode enum
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.IO_OpenFile(MoonSharp.Interpreter.Script,System.String,System.Text.Encoding,System.String)">
            <summary>
            A function used to open files in the 'io' module. 
            Can have an invalid implementation if 'io' module is filtered out.
            It should return a correctly initialized Stream for the given file and access
            </summary>
            <param name="script"></param>
            <param name="filename">The filename.</param>
            <param name="encoding">The encoding.</param>
            <param name="mode">The mode (as per Lua usage - e.g. 'w+', 'rb', etc.).</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.GetEnvironmentVariable(System.String)">
            <summary>
            Gets an environment variable. Must be implemented, but an implementation is allowed
            to always return null if a more meaningful implementation cannot be achieved or is
            not desired.
            </summary>
            <param name="envvarname">The envvarname.</param>
            <returns>
            The environment variable value, or null if not found
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.IO_GetStandardStream(MoonSharp.Interpreter.Platforms.StandardFileType)">
            <summary>
            Gets a standard stream (stdin, stdout, stderr).
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">type</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.DefaultPrint(System.String)">
            <summary>
            Default handler for 'print' calls. Can be customized in ScriptOptions
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.IO_OS_GetTempFilename">
            <summary>
            Gets a temporary filename. Used in 'io' and 'os' modules.
            Can have an invalid implementation if 'io' and 'os' modules are filtered out.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.OS_ExitFast(System.Int32)">
            <summary>
            Exits the process, returning the specified exit code.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.OS_FileExists(System.String)">
            <summary>
            Checks if a file exists. Used by the 'os' module.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="file">The file.</param>
            <returns>
            True if the file exists, false otherwise.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.OS_FileDelete(System.String)">
            <summary>
            Deletes the specified file. Used by the 'os' module.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.OS_FileMove(System.String,System.String)">
            <summary>
            Moves the specified file. Used by the 'os' module.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="src">The source.</param>
            <param name="dst">The DST.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.OS_Execute(System.String)">
            <summary>
            Executes the specified command line, returning the child process exit code and blocking in the meantime.
            Can have an invalid implementation if the 'os' module is filtered out.
            </summary>
            <param name="cmdline">The cmdline.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.FilterSupportedCoreModules(MoonSharp.Interpreter.CoreModules)">
            <summary>
            Filters the CoreModules enumeration to exclude non-supported operations
            </summary>
            <param name="module">The requested modules.</param>
            <returns>
            The requested modules, with unsupported modules filtered out.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Platforms.StandardPlatformAccessor.GetPlatformNamePrefix">
            <summary>
            Gets the platform name prefix
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:MoonSharp.Interpreter.REPL.NamespaceDoc">
            <summary>
            Contains classes useful to implement REPL interpreters.
            See : <see href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" />
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.REPL.ReplHistoryInterpreter">
            <summary>
            An implementation of <see cref="T:MoonSharp.Interpreter.REPL.ReplInterpreter"/> which supports a very basic history of recent input lines.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.REPL.ReplHistoryInterpreter.#ctor(MoonSharp.Interpreter.Script,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.REPL.ReplHistoryInterpreter"/> class.
            </summary>
            <param name="script">The script.</param>
            <param name="historySize">Size of the history.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.REPL.ReplHistoryInterpreter.Evaluate(System.String)">
            <summary>
            Evaluate a REPL command.
            This method returns the result of the computation, or null if more input is needed for having valid code.
            In case of errors, exceptions are propagated to the caller.
            </summary>
            <param name="input">The input.</param>
            <returns>
            This method returns the result of the computation, or null if more input is needed for a computation.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.REPL.ReplHistoryInterpreter.HistoryPrev">
            <summary>
            Gets the previous item in history, or null
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.REPL.ReplHistoryInterpreter.HistoryNext">
            <summary>
            Gets the next item in history, or null
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.REPL.ReplInterpreter">
            <summary>
            This class provides a simple REPL intepreter ready to be reused in a simple way.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.REPL.ReplInterpreter.#ctor(MoonSharp.Interpreter.Script)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.REPL.ReplInterpreter"/> class.
            </summary>
            <param name="script">The script.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.REPL.ReplInterpreter.HandleDynamicExprs">
            <summary>
            Gets or sets a value indicating whether this instances handle inputs starting with a "?" as a 
            dynamic expression to evaluate instead of script code (likely invalid)
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.REPL.ReplInterpreter.HandleClassicExprsSyntax">
            <summary>
            Gets or sets a value indicating whether this instances handle inputs starting with a "=" as a 
            non-dynamic expression to evaluate (just like the Lua interpreter does by default).
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.REPL.ReplInterpreter.HasPendingCommand">
            <summary>
            Gets a value indicating whether this instance has a pending command 
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.REPL.ReplInterpreter.CurrentPendingCommand">
            <summary>
            Gets the current pending command.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.REPL.ReplInterpreter.ClassicPrompt">
            <summary>
            Gets the classic prompt (">" or ">>") given the current state of the interpreter
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.REPL.ReplInterpreter.Evaluate(System.String)">
            <summary>
            Evaluate a REPL command.
            This method returns the result of the computation, or null if more input is needed for having valid code.
            In case of errors, exceptions are propagated to the caller.
            </summary>
            <param name="input">The input.</param>
            <returns>This method returns the result of the computation, or null if more input is needed for a computation.</returns>
        </member>
        <member name="T:MoonSharp.Interpreter.REPL.ReplInterpreterScriptLoader">
            <summary>
            A script loader loading scripts directly from the file system (does not go through platform object)
            AND starts with module paths taken from environment variables (again, not going through the platform object).
            
            The paths are preconstructed using :
            	* The MOONSHARP_PATH environment variable if it exists
            	* The LUA_PATH_5_2 environment variable if MOONSHARP_PATH does not exists
            	* The LUA_PATH environment variable if LUA_PATH_5_2 and MOONSHARP_PATH do not exists
            	* The "?;?.lua" path if all the above fail
            	
            Also, everytime a module is require(d), the "LUA_PATH" global variable is checked. If it exists, those paths
            will be used to load the module instead of the global ones.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.REPL.ReplInterpreterScriptLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.REPL.ReplInterpreterScriptLoader"/> class.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.REPL.ReplInterpreterScriptLoader.ResolveModuleName(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Resolves the name of a module to a filename (which will later be passed to OpenScriptFile).
            The resolution happens first on paths included in the LUA_PATH global variable, and -
            if the variable does not exist - by consulting the
            ScriptOptions.ModulesPaths array. Override to provide a different behaviour.
            </summary>
            <param name="modname">The modname.</param>
            <param name="globalContext">The global context.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.ColonOperatorBehaviour">
            <summary>
            Defines behaviour of the colon ':' operator in CLR callbacks.
            Default behaviour is for ':' being treated the same as a '.' if the functions is implemented on the CLR side (e.g. in C#).
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.ColonOperatorBehaviour.TreatAsDot">
            <summary>
            The colon is treated the same as the dot ('.') operator.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.ColonOperatorBehaviour.TreatAsDotOnUserData">
            <summary>
            The colon is treated the same as the dot ('.') operator if the first argument is userdata, as a Lua colon operator otherwise.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.ColonOperatorBehaviour.TreatAsColon">
            <summary>
            The colon is treated in the same as the Lua colon operator works.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Script">
            <summary>
            This class implements a MoonSharp scripting session. Multiple Script objects can coexist in the same program but cannot share
            data among themselves unless some mechanism is put in place.
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Script.VERSION">
            <summary>
            The version of the MoonSharp engine
            </summary>
        </member>
        <member name="F:MoonSharp.Interpreter.Script.LUA_VERSION">
            <summary>
            The Lua version being supported
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.#cctor">
            <summary>
            Initializes the <see cref="T:MoonSharp.Interpreter.Script"/> class.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Script"/> clas.s
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.#ctor(MoonSharp.Interpreter.CoreModules)">
            <summary>
            Initializes a new instance of the <see cref="T:MoonSharp.Interpreter.Script"/> class.
            </summary>
            <param name="coreModules">The core modules to be pre-registered in the default global table.</param>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.DefaultOptions">
            <summary>
            Gets or sets the script loader which will be used as the value of the
            ScriptLoader property for all newly created scripts.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.Options">
            <summary>
            Gets access to the script options. 
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.GlobalOptions">
            <summary>
            Gets the global options, that is options which cannot be customized per-script.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.PerformanceStats">
            <summary>
            Gets access to performance statistics.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.Globals">
            <summary>
            Gets the default global table for this script. Unless a different table is intentionally passed (or setfenv has been used)
            execution uses this table.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.LoadFunction(System.String,MoonSharp.Interpreter.Table,System.String)">
            <summary>
            Loads a string containing a Lua/MoonSharp function.
            </summary>
            <param name="code">The code.</param>
            <param name="globalTable">The global table to bind to this chunk.</param>
            <param name="funcFriendlyName">Name of the function used to report errors, etc.</param>
            <returns>
            A DynValue containing a function which will execute the loaded code.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.LoadString(System.String,MoonSharp.Interpreter.Table,System.String)">
            <summary>
            Loads a string containing a Lua/MoonSharp script.
            </summary>
            <param name="code">The code.</param>
            <param name="globalTable">The global table to bind to this chunk.</param>
            <param name="codeFriendlyName">Name of the code - used to report errors, etc. Also used by debuggers to locate the original source file.</param>
            <returns>
            A DynValue containing a function which will execute the loaded code.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.LoadStream(System.IO.Stream,MoonSharp.Interpreter.Table,System.String)">
            <summary>
            Loads a Lua/MoonSharp script from a System.IO.Stream. NOTE: This will *NOT* close the stream!
            </summary>
            <param name="stream">The stream containing code.</param>
            <param name="globalTable">The global table to bind to this chunk.</param>
            <param name="codeFriendlyName">Name of the code - used to report errors, etc.</param>
            <returns>
            A DynValue containing a function which will execute the loaded code.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.Dump(MoonSharp.Interpreter.DynValue,System.IO.Stream)">
            <summary>
            Dumps on the specified stream.
            </summary>
            <param name="function">The function.</param>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentException">
            function arg is not a function!
            or
            stream is readonly!
            or
            function arg has upvalues other than _ENV
            </exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.LoadFile(System.String,MoonSharp.Interpreter.Table,System.String)">
            <summary>
            Loads a string containing a Lua/MoonSharp script.
            </summary>
            <param name="filename">The code.</param>
            <param name="globalContext">The global table to bind to this chunk.</param>
            <param name="friendlyFilename">The filename to be used in error messages.</param>
            <returns>
            A DynValue containing a function which will execute the loaded code.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.DoString(System.String,MoonSharp.Interpreter.Table,System.String)">
            <summary>
            Loads and executes a string containing a Lua/MoonSharp script.
            </summary>
            <param name="code">The code.</param>
            <param name="globalContext">The global context.</param>
            <param name="codeFriendlyName">Name of the code - used to report errors, etc. Also used by debuggers to locate the original source file.</param>
            <returns>
            A DynValue containing the result of the processing of the loaded chunk.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.DoStream(System.IO.Stream,MoonSharp.Interpreter.Table,System.String)">
            <summary>
            Loads and executes a stream containing a Lua/MoonSharp script.
            </summary>
            <param name="stream">The stream.</param>
            <param name="globalContext">The global context.</param>
            <param name="codeFriendlyName">Name of the code - used to report errors, etc. Also used by debuggers to locate the original source file.</param>
            <returns>
            A DynValue containing the result of the processing of the loaded chunk.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.DoFile(System.String,MoonSharp.Interpreter.Table,System.String)">
            <summary>
            Loads and executes a file containing a Lua/MoonSharp script.
            </summary>
            <param name="filename">The filename.</param>
            <param name="globalContext">The global context.</param>
            <param name="codeFriendlyName">Name of the code - used to report errors, etc. Also used by debuggers to locate the original source file.</param>
            <returns>
            A DynValue containing the result of the processing of the loaded chunk.
            </returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.RunFile(System.String)">
            <summary>
            Runs the specified file with all possible defaults for quick experimenting.
            </summary>
            <param name="filename">The filename.</param>
            A DynValue containing the result of the processing of the executed script.
        </member>
        <member name="M:MoonSharp.Interpreter.Script.RunString(System.String)">
            <summary>
            Runs the specified code with all possible defaults for quick experimenting.
            </summary>
            <param name="code">The Lua/MoonSharp code.</param>
            A DynValue containing the result of the processing of the executed script.
        </member>
        <member name="M:MoonSharp.Interpreter.Script.MakeClosure(System.Int32,MoonSharp.Interpreter.Table)">
            <summary>
            Creates a closure from a bytecode address.
            </summary>
            <param name="address">The address.</param>
            <param name="envTable">The env table to create a 0-upvalue</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.Call(MoonSharp.Interpreter.DynValue)">
            <summary>
            Calls the specified function.
            </summary>
            <param name="function">The Lua/MoonSharp function to be called</param>
            <returns>
            The return value(s) of the function call.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.Call(MoonSharp.Interpreter.DynValue,MoonSharp.Interpreter.DynValue[])">
            <summary>
            Calls the specified function.
            </summary>
            <param name="function">The Lua/MoonSharp function to be called</param>
            <param name="args">The arguments to pass to the function.</param>
            <returns>
            The return value(s) of the function call.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.Call(MoonSharp.Interpreter.DynValue,System.Object[])">
            <summary>
            Calls the specified function.
            </summary>
            <param name="function">The Lua/MoonSharp function to be called</param>
            <param name="args">The arguments to pass to the function.</param>
            <returns>
            The return value(s) of the function call.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.Call(System.Object)">
            <summary>
            Calls the specified function.
            </summary>
            <param name="function">The Lua/MoonSharp function to be called</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.Call(System.Object,System.Object[])">
            <summary>
            Calls the specified function.
            </summary>
            <param name="function">The Lua/MoonSharp function to be called </param>
            <param name="args">The arguments to pass to the function.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.CreateCoroutine(MoonSharp.Interpreter.DynValue)">
            <summary>
            Creates a coroutine pointing at the specified function.
            </summary>
            <param name="function">The function.</param>
            <returns>
            The coroutine handle.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function or DataType.ClrFunction</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.CreateCoroutine(System.Object)">
            <summary>
            Creates a coroutine pointing at the specified function.
            </summary>
            <param name="function">The function.</param>
            <returns>
            The coroutine handle.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if function is not of DataType.Function or DataType.ClrFunction</exception>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.DebuggerEnabled">
            <summary>
            Gets or sets a value indicating whether the debugger is enabled.
            Note that unless a debugger attached, this property returns a 
            value which might not reflect the real status of the debugger.
            Use this property if you want to disable the debugger for some 
            executions.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.AttachDebugger(MoonSharp.Interpreter.Debugging.IDebugger)">
            <summary>
            Attaches a debugger. This usually should be called by the debugger itself and not by user code.
            </summary>
            <param name="debugger">The debugger object.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.GetSourceCode(System.Int32)">
            <summary>
            Gets the source code.
            </summary>
            <param name="sourceCodeID">The source code identifier.</param>
            <returns></returns>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.SourceCodeCount">
            <summary>
            Gets the source code count.
            </summary>
            <value>
            The source code count.
            </value>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.RequireModule(System.String,MoonSharp.Interpreter.Table)">
            <summary>
            Loads a module as per the "require" Lua function. http://www.lua.org/pil/8.1.html
            </summary>
            <param name="modname">The module name</param>
            <param name="globalContext">The global context.</param>
            <returns></returns>
            <exception cref="T:MoonSharp.Interpreter.ScriptRuntimeException">Raised if module is not found</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.GetTypeMetatable(MoonSharp.Interpreter.DataType)">
            <summary>
            Gets a type metatable.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.SetTypeMetatable(MoonSharp.Interpreter.DataType,MoonSharp.Interpreter.Table)">
            <summary>
            Sets a type metatable.
            </summary>
            <param name="type">The type. Must be Nil, Boolean, Number, String or Function</param>
            <param name="metatable">The metatable.</param>
            <exception cref="T:System.ArgumentException">Specified type not supported :  + type.ToString()</exception>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.WarmUp">
            <summary>
            Warms up the parser/lexer structures so that MoonSharp operations start faster.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.CreateDynamicExpression(System.String)">
            <summary>
            Creates a new dynamic expression.
            </summary>
            <param name="code">The code of the expression.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.CreateConstantDynamicExpression(System.String,MoonSharp.Interpreter.DynValue)">
            <summary>
            Creates a new dynamic expression which is actually quite static, returning always the same constant value.
            </summary>
            <param name="code">The code of the not-so-dynamic expression.</param>
            <param name="constant">The constant to return.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.CreateDynamicExecutionContext(MoonSharp.Interpreter.CallbackFunction)">
            <summary>
            Gets an execution context exposing only partial functionality, which should be used for
            those cases where the execution engine is not really running - for example for dynamic expression
            or calls from CLR to CLR callbacks
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.Script.Registry">
            <summary>
            MoonSharp (like Lua itself) provides a registry, a predefined table that can be used by any CLR code to 
            store whatever Lua values it needs to store. 
            Any CLR code can store data into this table, but it should take care to choose keys 
            that are different from those used by other libraries, to avoid collisions. 
            Typically, you should use as key a string GUID, a string containing your library name, or a 
            userdata with the address of a CLR object in your code.
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Script.GetBanner(System.String)">
            <summary>
            Gets a banner string with copyright info, link to website, version, etc.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.ScriptGlobalOptions">
            <summary>
            Class containing script global options, that is options which cannot be customized per-script.
            <see cref="P:MoonSharp.Interpreter.Script.GlobalOptions"/>
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptGlobalOptions.CustomConverters">
            <summary>
            Gets or sets the custom converters.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptGlobalOptions.Platform">
            <summary>
            Gets or sets the platform abstraction to use.
            </summary>
            <value>
            The current platform abstraction.
            </value>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptGlobalOptions.RethrowExceptionNested">
            <summary>
            Gets or sets a value indicating whether interpreter exceptions should be 
            re-thrown as nested exceptions.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.ScriptOptions">
            <summary>
            This class contains options to customize behaviour of Script objects.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.ScriptLoader">
            <summary>
            Gets or sets the current script-loader.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.DebugPrint">
            <summary>
            Gets or sets the debug print handler
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.DebugInput">
            <summary>
            Gets or sets the debug input handler (takes a prompt as an input, for interactive interpreters, like debug.debug).
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.UseLuaErrorLocations">
            <summary>
            Gets or sets a value indicating whether error messages will use Lua error locations instead of MoonSharp 
            improved ones. Use this for compatibility with legacy Lua code which parses error messages.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.ColonOperatorClrCallbackBehaviour">
            <summary>
            Gets or sets a value which dictates the behaviour of the colon (':') operator in callbacks to CLR code.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.Stdin">
            <summary>
            Gets or sets the stream used as stdin. If null, a default stream is used.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.Stdout">
            <summary>
            Gets or sets the stream used as stdout. If null, a default stream is used.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.Stderr">
            <summary>
            Gets or sets the stream used as stderr. If null, a default stream is used.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.TailCallOptimizationThreshold">
            <summary>
            Gets or sets the stack depth threshold at which MoonSharp starts doing
            tail call optimizations.
            TCOs can provide the little benefit of avoiding stack overflows in corner case
            scenarios, at the expense of losing debug information and error stack traces 
            in all other, more common scenarios. MoonSharp choice is to start performing
            TCOs only after a certain threshold of stack usage is reached - by default
            half the current stack depth (128K entries), thus 64K entries, on either
            the internal stacks.
            Set this to int.MaxValue to disable TCOs entirely, or to 0 to always have
            TCOs enabled.
            </summary>
        </member>
        <member name="P:MoonSharp.Interpreter.ScriptOptions.CheckThreadAccess">
            <summary>
            Gets or sets a value indicating whether the thread check is enabled.
            A "lazy" thread check is performed everytime execution is entered to ensure that no two threads
            calls MoonSharp execution concurrently. However 1) the check is performed best effort (thus, it might
            not detect all issues) and 2) it might trigger in very odd legal situations (like, switching threads 
            inside a CLR-callback without actually having concurrency.
            
            Disable this option if the thread check is giving problems in your scenario, but please check that
            you are not calling MoonSharp execution concurrently as it is not supported.
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Serialization.Json.JsonNull">
            <summary>
            UserData representing a null value in a table converted from Json
            </summary>
        </member>
        <member name="T:MoonSharp.Interpreter.Serialization.Json.JsonTableConverter">
            <summary>
            Class performing conversions between Tables and Json.
            NOTE : the conversions are done respecting json syntax but using Lua constructs. This means mostly that:
            1) Lua string escapes can be accepted while they are not technically valid JSON, and viceversa
            2) Null values are represented using a static userdata of type JsonNull
            3) Do not use it when input cannot be entirely trusted
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Serialization.Json.JsonTableConverter.TableToJson(MoonSharp.Interpreter.Table)">
            <summary>
            Converts a table to a json string
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:MoonSharp.Interpreter.Serialization.Json.JsonTableConverter.TableToJson(System.Text.StringBuilder,MoonSharp.Interpreter.Table)">
            <summary>
            Tables to json.
            </summary>
            <param name="sb">The sb.</param>
            <param name="table">The table.</param>
        </member>
        <member name="M:MoonSharp.Interpreter.Serialization.Json.JsonTableConverter.ObjectToJson(System.Object)">
            <summary>
            Converts a generic object to JSON
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Serialization.Json.JsonTableConverter.JsonToTable(System.String,MoonSharp.Interpreter.Script)">
            <summary>
            Converts a json string to a table
            </summary>
            <param name="json">The json.</param>
            <param name="script">The script to which the table is assigned (null for prime tables).</param>
            <returns>A table containing the representation of the given json.</returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Serialization.SerializationExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Tree.Expression.PrimaryExp(MoonSharp.Interpreter.Execution.ScriptLoadingContext)">
            <summary>
            Primaries the exp.
            </summary>
            <param name="lcontext">The lcontext.</param>
            <returns></returns>
        </member>
        <member name="T:MoonSharp.Interpreter.Tree.Expressions.BinaryOperatorExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:MoonSharp.Interpreter.Tree.Expressions.BinaryOperatorExpression.CreateSubTree(MoonSharp.Interpreter.Tree.Expressions.BinaryOperatorExpression.LinkedList,MoonSharp.Interpreter.Execution.ScriptLoadingContext)">
            <summary>
            Creates a sub tree of binary expressions
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:LTDescr" -->
        <member name="M:LTDescr.pause">
            Pause a tween
            
            @method pause
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <member name="M:LTDescr.resume">
            Resume a paused tween
            
            @method resume
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <member name="M:LTDescr.setDelay(System.Single)">
            Delay the start of a tween
            
            @method setDelay
            @param {float} float time The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.moveX(gameObject, 5f, 2.0f ).setDelay( 1.5f );
        </member>
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setEase(LeanTweenType)" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setOvershoot(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setPeriod(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setEase(UnityEngine.AnimationCurve)" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setTo(UnityEngine.Vector3)" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setTime(System.Single)" -->
        <member name="M:LTDescr.setRepeat(System.Int32)">
            Set the tween to repeat a number of times.
            @method setRepeat
            @param {int} repeatNum:int the number of times to repeat the tween. -1 to repeat infinite times
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.moveX(gameObject, 5f, 2.0f ).setRepeat( 10 ).setLoopPingPong();
        </member>
        <member name="M:LTDescr.setIgnoreTimeScale(System.Boolean)">
            Set ignore time scale when tweening an object when you want the animation to be time-scale independent (ignores the Time.timeScale value). Great for pause screens, when you want all other action to be stopped (or slowed down)
            @method setIgnoreTimeScale
            @param {bool} useUnScaledTime:bool whether to use the unscaled time or not
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.moveX(gameObject, 5f, 2.0f ).setRepeat( 2 ).setIgnoreTimeScale( true );
        </member>
        <member name="M:LTDescr.setUseFrames(System.Boolean)">
            Use frames when tweening an object, when you don't want the animation to be time-frame independent...
            @method setUseFrames
            @param {bool} useFrames:bool whether to use estimated time or not
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.moveX(gameObject, 5f, 2.0f ).setRepeat( 2 ).setUseFrames( true );
        </member>
        <member name="M:LTDescr.setLoopOnce">
            No looping involved, just run once (the default)
            @method setLoopOnce
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.moveX(gameObject, 5f, 2.0f ).setLoopOnce();
        </member>
        <member name="M:LTDescr.setLoopClamp">
            When the animation gets to the end it starts back at where it began
            @method setLoopClamp
            @param {int} loops:int (defaults to -1) how many times you want the loop to happen (-1 for an infinite number of times)
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.moveX(gameObject, 5f, 2.0f ).setLoopClamp( 2 );
        </member>
        <member name="M:LTDescr.setLoopPingPong">
            When the animation gets to the end it then tweens back to where it started (and on, and on)
            @method setLoopPingPong
            @param {int} loops:int (defaults to -1) how many times you want the loop to happen in both directions (-1 for an infinite number of times). Passing a value of 1 will cause the object to go towards and back from it's destination once.
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.moveX(gameObject, 5f, 2.0f ).setLoopPingPong( 2 );
        </member>
        <member name="M:LTDescr.setOnComplete(System.Action)">
            Have a method called when the tween finishes
            @method setOnComplete
            @param {Action} onComplete:Action the method that should be called when the tween is finished ex: tweenFinished(){ }
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.moveX(gameObject, 5f, 2.0f ).setOnComplete( tweenFinished );
        </member>
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setOnComplete(System.Action{System.Object})" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setOnCompleteParam(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setOnUpdate(System.Action{System.Single})" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setOnUpdate(System.Action{System.Single,System.Object},System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setOnUpdate(System.Action{UnityEngine.Vector3},System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setOnUpdateParam(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setOrientToPath(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setOrientToPath2d(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setPoint(UnityEngine.Vector3)" -->
        <member name="M:LTDescr.setOnCompleteOnRepeat(System.Boolean)">
            Set the onComplete method to be called at the end of every loop cycle (also applies to the delayedCall method)
            @method setOnCompleteOnRepeat
            @param {bool} isOn:bool does call onComplete on every loop cycle
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.delayedCall(gameObject,0.3f, delayedMethod).setRepeat(4).setOnCompleteOnRepeat(true);
        </member>
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setOnCompleteOnStart(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setOnStart(System.Action)" -->
        <!-- Badly formed XML comment ignored for member "M:LTDescr.setDirection(System.Single)" -->
        <!-- Badly formed XML comment ignored for member "T:LeanTween" -->
        <member name="M:LeanTween.init(System.Int32)">
            This line is optional. Here you can specify the maximum number of tweens you will use (the default is 400).  This must be called before any use of LeanTween is made for it to be effective.
            
            @method LeanTween.init
            @param {integer} maxSimultaneousTweens:int The maximum number of tweens you will use, make sure you don't go over this limit, otherwise the code will throw an error
            @example
              LeanTween.init( 800 );
        </member>
        <!-- Badly formed XML comment ignored for member "M:LeanTween.cancelAll" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.cancel(UnityEngine.GameObject)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.cancel(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.descr(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.descriptions(UnityEngine.GameObject)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.pause(System.Int32)" -->
        <member name="M:LeanTween.pause(UnityEngine.GameObject)">
            Pause all tweens for a GameObject
            
            @method LeanTween.pause
            @param {GameObject} gameObject:GameObject GameObject whose tweens you want to pause
        </member>
        <member name="M:LeanTween.pauseAll">
            Pause all active tweens
            
            @method LeanTween.pauseAll
        </member>
        <member name="M:LeanTween.resumeAll">
            Resume all active tweens
            
            @method LeanTween.resumeAll
        </member>
        <!-- Badly formed XML comment ignored for member "M:LeanTween.resume(System.Int32)" -->
        <member name="M:LeanTween.resume(UnityEngine.GameObject)">
            Resume all the tweens on a GameObject
            
            @method LeanTween.resume
            @param {GameObject} gameObject:GameObject GameObject whose tweens you want to resume
        </member>
        <member name="M:LeanTween.isTweening(UnityEngine.GameObject)">
            Test whether or not a tween is active on a GameObject
            
            @method LeanTween.isTweening
            @param {GameObject} gameObject:GameObject GameObject that you want to test if it is tweening
        </member>
        <!-- Badly formed XML comment ignored for member "M:LeanTween.isTweening(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.play(UnityEngine.RectTransform,UnityEngine.Sprite[])" -->
        <member name="M:LeanTween.alpha(UnityEngine.GameObject,System.Single,System.Single)">
            Fade a gameobject's material to a certain alpha value. The material's shader needs to support alpha. <a href="http://owlchemylabs.com/content/">Owl labs has some excellent efficient shaders</a>.
            
            @method LeanTween.alpha
            @param {GameObject} gameObject:GameObject Gameobject that you wish to fade
            @param {float} to:float the final alpha value (0-1)
            @param {float} time:float The time with which to fade the object
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.alpha(gameObject, 1f, 1f) .setDelay(1f);
        </member>
        <member name="M:LeanTween.alpha(LTRect,System.Single,System.Single)">
            Fade a GUI Object
            
            @method LeanTween.alpha
            @param {LTRect} ltRect:LTRect LTRect that you wish to fade
            @param {float} to:float the final alpha value (0-1)
            @param {float} time:float The time with which to fade the object
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.alpha(ltRect, 1f, 1f) .setEase(LeanTweenType.easeInCirc);
        </member>
        <member name="M:LeanTween.textAlpha(UnityEngine.RectTransform,System.Single,System.Single)">
            Fade a Unity UI Object
            
            @method LeanTween.textAlpha
            @param {RectTransform} rectTransform:RectTransform RectTransform that you wish to fade
            @param {float} to:float the final alpha value (0-1)
            @param {float} time:float The time with which to fade the object
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.textAlpha(gameObject.GetComponent&lt;RectTransform&gt;(), 1f, 1f) .setEase(LeanTweenType.easeInCirc);
        </member>
        <!-- Badly formed XML comment ignored for member "M:LeanTween.alphaVertex(UnityEngine.GameObject,System.Single,System.Single)" -->
        <member name="M:LeanTween.color(UnityEngine.GameObject,UnityEngine.Color,System.Single)">
            Change a gameobject's material to a certain color value. The material's shader needs to support color tinting. <a href="http://owlchemylabs.com/content/">Owl labs has some excellent efficient shaders</a>.
            
            @method LeanTween.color
            @param {GameObject} gameObject:GameObject Gameobject that you wish to change the color
            @param {Color} to:Color the final color value ex: Color.Red, new Color(1.0f,1.0f,0.0f,0.8f)
            @param {float} time:float The time with which to fade the object
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.color(gameObject, Color.yellow, 1f) .setDelay(1f);
        </member>
        <member name="M:LeanTween.textColor(UnityEngine.RectTransform,UnityEngine.Color,System.Single)">
            Change the color a Unity UI Object
            
            @method LeanTween.textColor
            @param {RectTransform} rectTransform:RectTransform RectTransform that you wish to fade
            @param {Color} to:Color the final alpha value ex: Color.Red, new Color(1.0f,1.0f,0.0f,0.8f)
            @param {float} time:float The time with which to fade the object
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example
            LeanTween.textColor(gameObject.GetComponent&lt;RectTransform&gt;(), Color.yellow, 1f) .setDelay(1f);
        </member>
        <member name="M:LeanTween.move(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            Move a GameObject to a certain location
            
            @method LeanTween.move
            @param {GameObject} gameObject:GameObject Gameobject that you wish to move
            @param {Vector3} vec:Vector3 to The final positin with which to move to
            @param {float} time:float time The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example LeanTween.move(gameObject, new Vector3(0f,-3f,5f), 2.0f) .setEase( LeanTweenType.easeOutQuad );
        </member>
        <!-- Badly formed XML comment ignored for member "M:LeanTween.move(UnityEngine.GameObject,UnityEngine.Vector3[],System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.moveSpline(UnityEngine.GameObject,UnityEngine.Vector3[],System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.moveSplineLocal(UnityEngine.GameObject,UnityEngine.Vector3[],System.Single)" -->
        <member name="M:LeanTween.move(LTRect,UnityEngine.Vector2,System.Single)">
            Move a GUI Element to a certain location
            
            @method LeanTween.move (GUI)
            @param {LTRect} ltRect:LTRect ltRect LTRect object that you wish to move
            @param {Vector2} vec:Vector2 to The final position with which to move to (pixel coordinates)
            @param {float} time:float time The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <member name="M:LeanTween.moveX(UnityEngine.GameObject,System.Single,System.Single)">
            Move a GameObject along the x-axis
            
            @method LeanTween.moveX
            @param {GameObject} gameObject:GameObject gameObject Gameobject that you wish to move
            @param {float} to:float to The final position with which to move to
            @param {float} time:float time The time to complete the move in
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <member name="M:LeanTween.moveY(UnityEngine.GameObject,System.Single,System.Single)">
            Move a GameObject along the y-axis
            
            @method LeanTween.moveY
            @param {GameObject} GameObject gameObject Gameobject that you wish to move
            @param {float} float to The final position with which to move to
            @param {float} float time The time to complete the move in
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <member name="M:LeanTween.moveZ(UnityEngine.GameObject,System.Single,System.Single)">
            Move a GameObject along the z-axis
            
            @method LeanTween.moveZ
            @param {GameObject} GameObject gameObject Gameobject that you wish to move
            @param {float} float to The final position with which to move to
            @param {float} float time The time to complete the move in
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <member name="M:LeanTween.moveLocal(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            Move a GameObject to a certain location relative to the parent transform. 
            
            @method LeanTween.moveLocal
            @param {GameObject} GameObject gameObject Gameobject that you wish to rotate
            @param {Vector3} Vector3 to The final positin with which to move to
            @param {float} float time The time to complete the tween in
            @param {Hashtable} Hashtable optional Hashtable where you can pass <a href="#optional">optional items</a>.
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <!-- Badly formed XML comment ignored for member "M:LeanTween.moveLocal(UnityEngine.GameObject,UnityEngine.Vector3[],System.Single)" -->
        <member name="M:LeanTween.rotate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            Rotate a GameObject, to values are in passed in degrees
            
            @method LeanTween.rotate
            @param {GameObject} GameObject gameObject Gameobject that you wish to rotate
            @param {Vector3} Vector3 to The final rotation with which to rotate to
            @param {float} float time The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example LeanTween.rotate(cube, new Vector3(180f,30f,0f), 1.5f);
        </member>
        <!-- Badly formed XML comment ignored for member "M:LeanTween.rotate(LTRect,System.Single,System.Single)" -->
        <member name="M:LeanTween.rotateLocal(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            Rotate a GameObject in the objects local space (on the transforms localEulerAngles object)
            
            @method LeanTween.rotateLocal
            @param {GameObject} gameObject:GameObject Gameobject that you wish to rotate
            @param {Vector3} to:Vector3 The final rotation with which to rotate to
            @param {float} time:float The time to complete the rotation in
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <member name="M:LeanTween.rotateX(UnityEngine.GameObject,System.Single,System.Single)">
            Rotate a GameObject only on the X axis
            
            @method LeanTween.rotateX
            @param {GameObject} GameObject Gameobject that you wish to rotate
            @param {float} to:float The final x-axis rotation with which to rotate
            @param {float} time:float The time to complete the rotation in
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <member name="M:LeanTween.rotateY(UnityEngine.GameObject,System.Single,System.Single)">
            Rotate a GameObject only on the Y axis
            
            @method LeanTween.rotateY
            @param {GameObject} GameObject Gameobject that you wish to rotate
            @param {float} to:float The final y-axis rotation with which to rotate
            @param {float} time:float The time to complete the rotation in
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <member name="M:LeanTween.rotateZ(UnityEngine.GameObject,System.Single,System.Single)">
            Rotate a GameObject only on the Z axis
            
            @method LeanTween.rotateZ
            @param {GameObject} GameObject Gameobject that you wish to rotate
            @param {float} to:float The final z-axis rotation with which to rotate
            @param {float} time:float The time to complete the rotation in
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <!-- Badly formed XML comment ignored for member "M:LeanTween.rotateAround(UnityEngine.GameObject,UnityEngine.Vector3,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.rotateAroundLocal(UnityEngine.GameObject,UnityEngine.Vector3,System.Single,System.Single)" -->
        <member name="M:LeanTween.scale(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            Scale a GameObject to a certain size
            
            @method LeanTween.scale
            @param {GameObject} gameObject:GameObject gameObject Gameobject that you wish to scale
            @param {Vector3} vec:Vector3 to The size with which to tween to
            @param {float} time:float time The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <!-- Badly formed XML comment ignored for member "M:LeanTween.scale(LTRect,UnityEngine.Vector2,System.Single)" -->
        <member name="M:LeanTween.scaleX(UnityEngine.GameObject,System.Single,System.Single)">
            Scale a GameObject to a certain size along the x-axis only
            
            @method LeanTween.scaleX
            @param {GameObject} gameObject:GameObject Gameobject that you wish to scale
            @param {float} scaleTo:float the size with which to scale to
            @param {float} time:float the time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <member name="M:LeanTween.scaleY(UnityEngine.GameObject,System.Single,System.Single)">
            Scale a GameObject to a certain size along the y-axis only
            
            @method LeanTween.scaleY
            @param {GameObject} gameObject:GameObject Gameobject that you wish to scale
            @param {float} scaleTo:float the size with which to scale to
            @param {float} time:float the time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <member name="M:LeanTween.scaleZ(UnityEngine.GameObject,System.Single,System.Single)">
            Scale a GameObject to a certain size along the z-axis only
            
            @method LeanTween.scaleZ
            @param {GameObject} gameObject:GameObject Gameobject that you wish to scale
            @param {float} scaleTo:float the size with which to scale to
            @param {float} time:float the time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
        </member>
        <!-- Badly formed XML comment ignored for member "M:LeanTween.value(UnityEngine.GameObject,System.Single,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.value(UnityEngine.GameObject,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.value(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.value(UnityEngine.GameObject,UnityEngine.Color,UnityEngine.Color,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.value(UnityEngine.GameObject,System.Action{System.Single},System.Single,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.value(UnityEngine.GameObject,System.Action{System.Single,System.Single},System.Single,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.value(UnityEngine.GameObject,System.Action{UnityEngine.Color},UnityEngine.Color,UnityEngine.Color,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.value(UnityEngine.GameObject,System.Action{UnityEngine.Vector2},UnityEngine.Vector2,UnityEngine.Vector2,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.value(UnityEngine.GameObject,System.Action{UnityEngine.Vector3},UnityEngine.Vector3,UnityEngine.Vector3,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.value(UnityEngine.GameObject,System.Action{System.Single,System.Object},System.Single,System.Single,System.Single)" -->
        <member name="M:LeanTween.move(UnityEngine.RectTransform,UnityEngine.Vector3,System.Single)">
            Move a RectTransform object (used in Unity GUI in 4.6+, for Buttons, Panel, Scrollbar, etc...)
            
            @method LeanTween.move (RectTransform)
            @param {RectTransform} rectTrans:RectTransform RectTransform that you wish to attach the tween to
            @param {Vector3} to:Vector3 The final Vector3 with which to tween to
            @param {float} time:float The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example LeanTween.move(gameObject.GetComponent&lt;RectTransform&gt;(), new Vector3(200f,-100f,0f), 1f).setDelay(1f);
        </member>
        <member name="M:LeanTween.moveX(UnityEngine.RectTransform,System.Single,System.Single)">
            Move a RectTransform object affecting x-axis only (used in Unity GUI in 4.6+, for Buttons, Panel, Scrollbar, etc...)
            
            @method LeanTween.moveX (RectTransform)
            @param {RectTransform} rectTrans:RectTransform RectTransform that you wish to attach the tween to
            @param {float} to:float The final x location with which to tween to
            @param {float} time:float The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example LeanTween.moveX(gameObject.GetComponent&lt;RectTransform&gt;(), 200f, 1f).setDelay(1f);
        </member>
        <member name="M:LeanTween.moveY(UnityEngine.RectTransform,System.Single,System.Single)">
            Move a RectTransform object affecting y-axis only (used in Unity GUI in 4.6+, for Buttons, Panel, Scrollbar, etc...)
            
            @method LeanTween.moveY (RectTransform)
            @param {RectTransform} rectTrans:RectTransform RectTransform that you wish to attach the tween to
            @param {float} to:float The final y location with which to tween to
            @param {float} time:float The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example LeanTween.moveY(gameObject.GetComponent&lt;RectTransform&gt;(), 200f, 1f).setDelay(1f);
        </member>
        <member name="M:LeanTween.moveZ(UnityEngine.RectTransform,System.Single,System.Single)">
            Move a RectTransform object affecting z-axis only (used in Unity GUI in 4.6+, for Buttons, Panel, Scrollbar, etc...)
            
            @method LeanTween.moveZ (RectTransform)
            @param {RectTransform} rectTrans:RectTransform RectTransform that you wish to attach the tween to
            @param {float} to:float The final x location with which to tween to
            @param {float} time:float The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example LeanTween.moveZ(gameObject.GetComponent&lt;RectTransform&gt;(), 200f, 1f).setDelay(1f);
        </member>
        <member name="M:LeanTween.rotate(UnityEngine.RectTransform,System.Single,System.Single)">
            Rotate a RectTransform object (used in Unity GUI in 4.6+, for Buttons, Panel, Scrollbar, etc...)
            
            @method LeanTween.rotate (RectTransform)
            @param {RectTransform} rectTrans:RectTransform RectTransform that you wish to attach the tween to
            @param {float} to:float The degree with which to rotate the RectTransform
            @param {float} time:float The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example LeanTween.rotate(gameObject.GetComponent&lt;RectTransform&gt;(), 90f, 1f).setDelay(1f);
        </member>
        <member name="M:LeanTween.rotateAround(UnityEngine.RectTransform,UnityEngine.Vector3,System.Single,System.Single)">
            Rotate a RectTransform object (used in Unity GUI in 4.6+, for Buttons, Panel, Scrollbar, etc...)
            
            @method LeanTween.rotateAround (RectTransform)
            @param {RectTransform} rectTrans:RectTransform RectTransform that you wish to attach the tween to
            @param {Vector3} axis:Vector3 The axis in which to rotate the RectTransform (Vector3.forward is most commonly used)
            @param {float} to:float The degree with which to rotate the RectTransform
            @param {float} time:float The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example LeanTween.rotateAround(gameObject.GetComponent&lt;RectTransform&gt;(), Vector3.forward, 90f, 1f).setDelay(1f);
        </member>
        <member name="M:LeanTween.rotateAroundLocal(UnityEngine.RectTransform,UnityEngine.Vector3,System.Single,System.Single)">
            Rotate a RectTransform object around it's local axis (used in Unity GUI in 4.6+, for Buttons, Panel, Scrollbar, etc...)
            
            @method LeanTween.rotateAroundLocal (RectTransform)
            @param {RectTransform} rectTrans:RectTransform RectTransform that you wish to attach the tween to
            @param {Vector3} axis:Vector3 The local axis in which to rotate the RectTransform (Vector3.forward is most commonly used)
            @param {float} to:float The degree with which to rotate the RectTransform
            @param {float} time:float The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example LeanTween.rotateAroundLocal(gameObject.GetComponent&lt;RectTransform&gt;(), Vector3.forward, 90f, 1f).setDelay(1f);
        </member>
        <member name="M:LeanTween.scale(UnityEngine.RectTransform,UnityEngine.Vector3,System.Single)">
            Rotate a RectTransform object (used in Unity GUI in 4.6+, for Buttons, Panel, Scrollbar, etc...)
            
            @method LeanTween.scale (RectTransform)
            @param {RectTransform} rectTrans:RectTransform RectTransform that you wish to attach the tween to
            @param {float} to:float The final Vector3 with which to tween to (localScale)
            @param {float} time:float The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example LeanTween.scale(gameObject.GetComponent&lt;RectTransform&gt;(), gameObject.GetComponent&lt;RectTransform&gt;().localScale*2f, 1f).setDelay(1f);
        </member>
        <member name="M:LeanTween.alpha(UnityEngine.RectTransform,System.Single,System.Single)">
            Alpha an Image Component attached to a RectTransform (used in Unity GUI in 4.6+, for Buttons, Panel, Scrollbar, etc...)
            
            @method LeanTween.alpha (RectTransform)
            @param {RectTransform} rectTrans:RectTransform RectTransform that you wish to attach the tween to
            @param {float} to:float The final Vector3 with which to tween to (localScale)
            @param {float} time:float The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example LeanTween.alpha(gameObject.GetComponent&lt;RectTransform&gt;(), 0.5f, 1f).setDelay(1f);
        </member>
        <member name="M:LeanTween.color(UnityEngine.RectTransform,UnityEngine.Color,System.Single)">
            Change the Color of an Image Component attached to a RectTransform (used in Unity GUI in 4.6+, for Buttons, Panel, Scrollbar, etc...)
            
            @method LeanTween.alpha (RectTransform)
            @param {RectTransform} rectTrans:RectTransform RectTransform that you wish to attach the tween to
            @param {float} to:float The final Vector3 with which to tween to (localScale)
            @param {float} time:float The time to complete the tween in
            @return {LTDescr} LTDescr an object that distinguishes the tween
            @example LeanTween.color(gameObject.GetComponent&lt;RectTransform&gt;(), 0.5f, 1f).setDelay(1f);
        </member>
        <!-- Badly formed XML comment ignored for member "M:LeanTween.addListener(UnityEngine.GameObject,System.Int32,System.Action{LTEvent})" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.removeListener(UnityEngine.GameObject,System.Int32,System.Action{LTEvent})" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.dispatchEvent(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:LeanTween.dispatchEvent(System.Int32,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "T:LTBezierPath" -->
        <member name="M:LTBezierPath.point(System.Single)">
            Retrieve a point along a path
            
            @method point
            @param {float} ratio:float ratio of the point along the path you wish to receive (0-1)
            @return {Vector3} Vector3 position of the point along the path
            @example
            transform.position = ltPath.point( 0.6f );
        </member>
        <member name="M:LTBezierPath.place(UnityEngine.Transform,System.Single)">
            Place an object along a certain point on the path (facing the direction perpendicular to the path)
            
            @method place
            @param {Transform} transform:Transform the transform of the object you wish to place along the path
            @param {float} ratio:float ratio of the point along the path you wish to receive (0-1)
            @example
            ltPath.place( transform, 0.6f );
        </member>
        <member name="M:LTBezierPath.place(UnityEngine.Transform,System.Single,UnityEngine.Vector3)">
            Place an object along a certain point on the path, with it facing a certain direction perpendicular to the path
            
            @method place
            @param {Transform} transform:Transform the transform of the object you wish to place along the path
            @param {float} ratio:float ratio of the point along the path you wish to receive (0-1)
            @param {Vector3} rotation:Vector3 the direction in which to place the transform ex: Vector3.up
            @example
            ltPath.place( transform, 0.6f, Vector3.left );
        </member>
        <member name="M:LTBezierPath.placeLocal(UnityEngine.Transform,System.Single)">
            Place an object along a certain point on the path (facing the direction perpendicular to the path) - Local Space, not world-space
            
            @method placeLocal
            @param {Transform} transform:Transform the transform of the object you wish to place along the path
            @param {float} ratio:float ratio of the point along the path you wish to receive (0-1)
            @example
            ltPath.placeLocal( transform, 0.6f );
        </member>
        <member name="M:LTBezierPath.placeLocal(UnityEngine.Transform,System.Single,UnityEngine.Vector3)">
            Place an object along a certain point on the path, with it facing a certain direction perpendicular to the path - Local Space, not world-space
            
            @method placeLocal
            @param {Transform} transform:Transform the transform of the object you wish to place along the path
            @param {float} ratio:float ratio of the point along the path you wish to receive (0-1)
            @param {Vector3} rotation:Vector3 the direction in which to place the transform ex: Vector3.up
            @example
            ltPath.placeLocal( transform, 0.6f, Vector3.left );
        </member>
        <!-- Badly formed XML comment ignored for member "T:LTSpline" -->
        <member name="M:LTSpline.point(System.Single)">
            Retrieve a point along a path
            
            @method point
            @param {float} ratio:float ratio of the point along the path you wish to receive (0-1)
            @return {Vector3} Vector3 position of the point along the path
            @example
            transform.position = ltSpline.point( 0.6f );
        </member>
        <member name="M:LTSpline.place(UnityEngine.Transform,System.Single)">
            Place an object along a certain point on the path (facing the direction perpendicular to the path)
            
            @method place
            @param {Transform} transform:Transform the transform of the object you wish to place along the path
            @param {float} ratio:float ratio of the point along the path you wish to receive (0-1)
            @example
            ltPath.place( transform, 0.6f );
        </member>
        <member name="M:LTSpline.place(UnityEngine.Transform,System.Single,UnityEngine.Vector3)">
            Place an object along a certain point on the path, with it facing a certain direction perpendicular to the path
            
            @method place
            @param {Transform} transform:Transform the transform of the object you wish to place along the path
            @param {float} ratio:float ratio of the point along the path you wish to receive (0-1)
            @param {Vector3} rotation:Vector3 the direction in which to place the transform ex: Vector3.up
            @example
            ltPath.place( transform, 0.6f, Vector3.left );
        </member>
        <member name="M:LTSpline.placeLocal(UnityEngine.Transform,System.Single)">
            Place an object along a certain point on the path (facing the direction perpendicular to the path) - Local Space, not world-space
            
            @method placeLocal
            @param {Transform} transform:Transform the transform of the object you wish to place along the path
            @param {float} ratio:float ratio of the point along the path you wish to receive (0-1)
            @example
            ltPath.placeLocal( transform, 0.6f );
        </member>
        <member name="M:LTSpline.placeLocal(UnityEngine.Transform,System.Single,UnityEngine.Vector3)">
            Place an object along a certain point on the path, with it facing a certain direction perpendicular to the path - Local Space, not world-space
            
            @method placeLocal
            @param {Transform} transform:Transform the transform of the object you wish to place along the path
            @param {float} ratio:float ratio of the point along the path you wish to receive (0-1)
            @param {Vector3} rotation:Vector3 the direction in which to place the transform ex: Vector3.up
            @example
            ltPath.placeLocal( transform, 0.6f, Vector3.left );
        </member>
        <!-- Badly formed XML comment ignored for member "T:LTRect" -->
        <member name="F:LTRect._rect">
            Pass this value to the GUI Methods
            
            @property rect
            @type {Rect} rect:Rect Rect object that controls the positioning and size
        </member>
        <member name="T:LTEvent">
            Object that describes the event to an event listener
            @class LTEvent
            @constructor
            @param {object} data:object Data that has been passed from the dispatchEvent method
        </member>
        <member name="M:MarkerMetro.Unity.WinLegacy.Reflection.ReflectionExtensions.GetProperties(System.Type,MarkerMetro.Unity.WinLegacy.Reflection.BindingFlags)">
            This implementation currently ignores BindingFlags.FlattenHierarchy.
        </member>
        <member name="M:MarkerMetro.Unity.WinLegacy.Reflection.ReflectionExtensions.GetProperty(System.Type,System.String,MarkerMetro.Unity.WinLegacy.Reflection.BindingFlags)">
             Attention: This implementation does not throw AmbiguousMatchException when more than one
             property is found with the specified name and matching the specified binding constraints.
            
             This implementation currently ignores BindingFlags.FlattenHierarchy.
        </member>
        <member name="M:MarkerMetro.Unity.WinLegacy.Reflection.ReflectionExtensions.GetMethods(System.Type,MarkerMetro.Unity.WinLegacy.Reflection.BindingFlags)">
            This implementation currently ignores BindingFlags.FlattenHierarchy.
        </member>
        <member name="M:MarkerMetro.Unity.WinLegacy.Reflection.ReflectionExtensions.TestBindingFlags(System.Type,System.Reflection.MethodInfo,MarkerMetro.Unity.WinLegacy.Reflection.BindingFlags)">
            Tests the following BindingFlags:
            Public, NonPublic, Static, Instance, DeclaredOnly.
        </member>
        <member name="M:MarkerMetro.Unity.WinLegacy.Reflection.ReflectionExtensions.IsSubclassOf(System.Type,System.Type)">
            Missing IsSubclassOf, this works well
        </member>
        <member name="F:SfxrAudioPlayer.isDestroyed">
             usfxr
            
             Copyright 2013 Zeh Fernando
            
             Licensed under the Apache License, Version 2.0 (the "License");
             you may not use this file except in compliance with the License.
             You may obtain a copy of the License at
            
             	http://www.apache.org/licenses/LICENSE-2.0
            
             Unless required by applicable law or agreed to in writing, software
             distributed under the License is distributed on an "AS IS" BASIS,
             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             See the License for the specific language governing permissions and
             limitations under the License.
            
             SfxrAudioPlayer
             This is the (internal) behavior script responsible for streaming audio to the engine
            
             @author Zeh Fernando
        </member>
        <member name="M:SfxrCacheSurrogate.CacheSound(SfxrSynth,System.Action)">
             usfxr
            
             Copyright 2013 Zeh Fernando
            
             Licensed under the Apache License, Version 2.0 (the "License");
             you may not use this file except in compliance with the License.
             You may obtain a copy of the License at
            
             	http://www.apache.org/licenses/LICENSE-2.0
            
             Unless required by applicable law or agreed to in writing, software
             distributed under the License is distributed on an "AS IS" BASIS,
             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             See the License for the specific language governing permissions and
             limitations under the License.
            
             SfxrCacheSurrogate
             This is the (internal) behavior script responsible for calling Coroutines for asynchronous audio generation
            
             @author Zeh Fernando
        </member>
        <member name="F:SfxrParams.paramsDirty">
             SfxrSynth
            
             Copyright 2010 Thomas Vian
             Copyright 2013 Zeh Fernando
            
             Licensed under the Apache License, Version 2.0 (the "License");
             you may not use this file except in compliance with the License.
             You may obtain a copy of the License at
            
             	http://www.apache.org/licenses/LICENSE-2.0
            
             Unless required by applicable law or agreed to in writing, software
             distributed under the License is distributed on an "AS IS" BASIS,
             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             See the License for the specific language governing permissions and
             limitations under the License.
            
             SfxrParams
             Holds parameters used by SfxrSynth
            
             @author Zeh Fernando
        </member>
        <member name="P:SfxrParams.waveType">
            Shape of the wave (0:square, 1:sawtooth, 2:sin, 3:noise) 
        </member>
        <member name="P:SfxrParams.masterVolume">
            Overall volume of the sound (0 to 1) 
        </member>
        <member name="P:SfxrParams.attackTime">
            Length of the volume envelope attack (0 to 1) 
        </member>
        <member name="P:SfxrParams.sustainTime">
            Length of the volume envelope sustain (0 to 1) 
        </member>
        <member name="P:SfxrParams.sustainPunch">
            Tilts the sustain envelope for more 'pop' (0 to 1) 
        </member>
        <member name="P:SfxrParams.decayTime">
            Length of the volume envelope decay (yes, I know it's called release) (0 to 1) 
        </member>
        <member name="P:SfxrParams.startFrequency">
            Base note of the sound (0 to 1) 
        </member>
        <member name="P:SfxrParams.minFrequency">
            If sliding, the sound will stop at this frequency, to prevent really low notes (0 to 1) 
        </member>
        <member name="P:SfxrParams.slide">
            Slides the note up or down (-1 to 1) 
        </member>
        <member name="P:SfxrParams.deltaSlide">
            Accelerates the slide (-1 to 1) 
        </member>
        <member name="P:SfxrParams.vibratoDepth">
            Strength of the vibrato effect (0 to 1) 
        </member>
        <member name="P:SfxrParams.vibratoSpeed">
            Speed of the vibrato effect (i.e. frequency) (0 to 1) 
        </member>
        <member name="P:SfxrParams.changeAmount">
            Shift in note, either up or down (-1 to 1) 
        </member>
        <member name="P:SfxrParams.changeSpeed">
            How fast the note shift happens (only happens once) (0 to 1) 
        </member>
        <member name="P:SfxrParams.squareDuty">
            Controls the ratio between the up and down states of the square wave, changing the tibre (0 to 1) 
        </member>
        <member name="P:SfxrParams.dutySweep">
            Sweeps the duty up or down (-1 to 1) 
        </member>
        <member name="P:SfxrParams.repeatSpeed">
            Speed of the note repeating - certain variables are reset each time (0 to 1) 
        </member>
        <member name="P:SfxrParams.phaserOffset">
            Offsets a second copy of the wave by a small phase, changing the tibre (-1 to 1) 
        </member>
        <member name="P:SfxrParams.phaserSweep">
            Sweeps the phase up or down (-1 to 1) 
        </member>
        <member name="P:SfxrParams.lpFilterCutoff">
            Frequency at which the low-pass filter starts attenuating higher frequencies (0 to 1) 
        </member>
        <member name="P:SfxrParams.lpFilterCutoffSweep">
            Sweeps the low-pass cutoff up or down (-1 to 1) 
        </member>
        <member name="P:SfxrParams.lpFilterResonance">
            Changes the attenuation rate for the low-pass filter, changing the timbre (0 to 1) 
        </member>
        <member name="P:SfxrParams.hpFilterCutoff">
            Frequency at which the high-pass filter starts attenuating lower frequencies (0 to 1) 
        </member>
        <member name="P:SfxrParams.hpFilterCutoffSweep">
            Sweeps the high-pass cutoff up or down (-1 to 1) 
        </member>
        <member name="P:SfxrParams.changeRepeat">
            Pitch Jump Repeat Speed: larger Values means more pitch jumps, which can be useful for arpeggiation (0 to 1) 
        </member>
        <member name="P:SfxrParams.changeAmount2">
            Shift in note, either up or down (-1 to 1) 
        </member>
        <member name="P:SfxrParams.changeSpeed2">
            How fast the note shift happens (only happens once) (0 to 1) 
        </member>
        <member name="P:SfxrParams.compressionAmount">
            Pushes amplitudes together into a narrower range to make them stand out more. Very good for sound effects, where you want them to stick out against background music (0 to 1) 
        </member>
        <member name="P:SfxrParams.overtones">
            Harmonics: overlays copies of the waveform with copies and multiples of its frequency. Good for bulking out or otherwise enriching the texture of the sounds (warning: this is the number 1 cause of bfxr slowdown!) (0 to 1) 
        </member>
        <member name="P:SfxrParams.overtoneFalloff">
            Harmonics falloff: The rate at which higher overtones should decay (0 to 1) 
        </member>
        <member name="P:SfxrParams.bitCrush">
            Bit crush: resamples the audio at a lower frequency (0 to 1) 
        </member>
        <member name="P:SfxrParams.bitCrushSweep">
            Bit crush sweep: sweeps the Bit Crush filter up or down (-1 to 1) 
        </member>
        <member name="M:SfxrParams.GeneratePickupCoin">
            Sets the parameters to generate a pickup/coin sound
        </member>
        <member name="M:SfxrParams.GenerateLaserShoot">
            Sets the parameters to generate a laser/shoot sound
        </member>
        <member name="M:SfxrParams.GenerateExplosion">
            Sets the parameters to generate an explosion sound
        </member>
        <member name="M:SfxrParams.GeneratePowerup">
            Sets the parameters to generate a powerup sound
        </member>
        <member name="M:SfxrParams.GenerateHitHurt">
            Sets the parameters to generate a hit/hurt sound
        </member>
        <member name="M:SfxrParams.GenerateJump">
            Sets the parameters to generate a jump sound
        </member>
        <member name="M:SfxrParams.GenerateBlipSelect">
            Sets the parameters to generate a blip/select sound
        </member>
        <member name="M:SfxrParams.resetParams">
            Resets the parameters, used at the start of each generate function
        </member>
        <member name="M:SfxrParams.Mutate(System.Single)">
            Randomly adjusts the parameters ever so slightly
        </member>
        <member name="M:SfxrParams.Randomize">
            Sets all parameters to random values
        </member>
        <member name="M:SfxrParams.GetSettingsStringLegacy">
            Returns a string representation of the parameters for copy/paste sharing in the old format (24 parameters, SFXR/AS3SFXR compatible)
            @return	A comma-delimited list of parameter values
        </member>
        <member name="M:SfxrParams.GetSettingsString">
            Returns a string representation of the parameters for copy/paste sharing in the new format (32 parameters, BFXR compatible)
            @return	A comma-delimited list of parameter values
        </member>
        <member name="M:SfxrParams.SetSettingsString(System.String)">
            Parses a settings string into the parameters
            @param	string	Settings string to parse
            @return			If the string successfully parsed
        </member>
        <member name="M:SfxrParams.Clone">
            Returns a copy of this SfxrParams with all settings duplicated
            @return	A copy of this SfxrParams
        </member>
        <member name="M:SfxrParams.CopyFrom(SfxrParams,System.Boolean)">
            Copies parameters from another instance
            @param	params	Instance to copy parameters from
        </member>
        <member name="M:SfxrParams.Pow(System.Single,System.Int32)">
            Faster power function; this function takes about 36% of the time Mathf.Pow() would take in our use cases
            @param	base		Base to raise to power
            @param	power		Power to raise base by
            @return				The calculated power
        </member>
        <member name="M:SfxrParams.To4DP(System.Single)">
            Returns the number as a string to 4 decimal places
            @param	value	Number to convert
            @return			Number to 4dp as a string
        </member>
        <member name="M:SfxrParams.ParseUint(System.String)">
            Parses a string into an uint value; also returns 0 if the string is empty, rather than an error
        </member>
        <member name="M:SfxrParams.ParseFloat(System.String)">
            Parses a string into a float value; also returns 0 if the string is empty, rather than an error
        </member>
        <!-- Badly formed XML comment ignored for member "M:SfxrParams.GetRandom" -->
        <member name="M:SfxrParams.GetRandomBool">
            Returns a boolean value
        </member>
        <member name="F:SfxrSynth.LO_RES_NOISE_PERIOD">
             SfxrSynth
            
             Copyright 2010 Thomas Vian
             Copyright 2013 Zeh Fernando
            
             Licensed under the Apache License, Version 2.0 (the "License");
             you may not use this file except in compliance with the License.
             You may obtain a copy of the License at
            
             	http://www.apache.org/licenses/LICENSE-2.0
            
             Unless required by applicable law or agreed to in writing, software
             distributed under the License is distributed on an "AS IS" BASIS,
             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             See the License for the specific language governing permissions and
             limitations under the License.
            
             SfxrSynth
             Generates and plays all necessary audio
            
             @author Zeh Fernando
        </member>
        <member name="P:SfxrSynth.parameters">
            The sound parameters 
        </member>
        <member name="M:SfxrSynth.Play">
            Plays the sound. If the parameters are dirty, synthesises sound as it plays, caching it for later.
            If they're not, plays from the cached sound.
            Won't play if caching asynchronously.
        </member>
        <member name="M:SfxrSynth.PlayMutated(System.Single,System.UInt32)">
            Plays a mutation of the sound.  If the parameters are dirty, synthesises sound as it plays, caching it for later.
            If they're not, plays from the cached sound.
            Won't play if caching asynchronously.
            @param	mutationAmount	Amount of mutation
            @param	mutationsNum	The number of mutations to cache before picking from them
        </member>
        <member name="M:SfxrSynth.Stop">
            Stops the currently playing sound
        </member>
        <member name="M:SfxrSynth.GenerateAudioFilterData(System.Single[],System.Int32)">
            If there is a cached sound to play, reads out of the data.
            If there isn't, synthesises new chunch of data, caching it as it goes.
            @param	data		Float[] to write data to
            @param	channels	Number of channels used
            @return	Whether it needs to continue (there are samples left) or not
        </member>
        <member name="M:SfxrSynth.CacheSound(System.Action,System.Boolean)">
            Cache the sound for speedy playback.
            If a callback is passed in, the caching will be done asynchronously, taking maxTimePerFrame milliseconds
            per frame to cache, them calling the callback when it's done.
            If not, the whole sound is cached immediately - can freeze the player for a few seconds, especially in debug mode.
            @param	callback			Function to call when the caching is complete
            @param	maxTimePerFrame		Maximum time in milliseconds the caching will use per frame
        </member>
        <member name="M:SfxrSynth.CacheMutations(System.UInt32,System.Single,System.Action,System.Boolean)">
            Caches a series of mutations on the source sound.
            If a callback is passed in, the caching will be done asynchronously, taking maxTimePerFrame milliseconds
            per frame to cache, them calling the callback when it's done.
            If not, the whole sound is cached immediately - can freeze the player for a few seconds, especially in debug mode.
            @param	mutationsNum		Number of mutations to cache
            @param	mutationAmount		Amount of mutation
            @param	callback			Function to call when the caching is complete
            @param	maxTimePerFrame		Maximum time in milliseconds the caching will use per frame
        </member>
        <member name="M:SfxrSynth.SetParentTransform(UnityEngine.Transform)">
            Sets the parent transform of this audio, for positional audio
            @param	__transform		The transform object of the parent
        </member>
        <member name="M:SfxrSynth.GetWavFile(System.UInt32,System.UInt32)">
            Returns a ByteArray of the wave in the form of a .wav file, ready to be saved out
            @param	__sampleRate	Sample rate to generate the .wav data at (44100 or 22050, default 44100)
            @param	__bitDepth		Bit depth to generate the .wav at (8 or 16, default 16)
            @return					Wave data (in .wav format) as a byte array
        </member>
        <member name="M:SfxrSynth.Reset(System.Boolean)">
            Resets the runing variables from the params
            Used once at the start (total reset) and for the repeat effect (partial reset)
            @param	totalReset	If the reset is total
        </member>
        <member name="M:SfxrSynth.SynthWave(System.Single[],System.Int32,System.UInt32)">
            Writes the wave to the supplied buffer array of floats (it'll contain the mono audio)
            @param	buffer		A float[] to write the wave to
            @param	waveData	If the wave should be written for the waveData
            @return				If the wave is finished
        </member>
        <!-- Badly formed XML comment ignored for member "M:SfxrSynth.getRandom" -->
        <member name="M:SfxrSynth.writeShortToBytes(System.Byte[],System.Int32@,System.Int16,SfxrSynth.Endian)">
            Writes a short (Int16) to a byte array.
            This is an aux function used when creating the WAV data.
        </member>
        <member name="M:SfxrSynth.writeUintToBytes(System.Byte[],System.Int32@,System.UInt32,SfxrSynth.Endian)">
            Writes a uint (UInt32) to a byte array.
            This is an aux function used when creating the WAV data.
        </member>
        <member name="M:SfxrSynth.writeBytes(System.Byte[],System.Int32@,System.Byte[],SfxrSynth.Endian)">
            Writes any number of bytes into a byte array, at a given position.
            This is an aux function used when creating the WAV data.
        </member>
        <member name="T:iTween">
            <summary>
            <para>Version: 2.0.44</para>	 
            <para>Author: Bob Berkebile (http://pixelplacement.com)</para>
            <para>Support: http://itween.pixelplacement.com</para>
            </summary>
        </member>
        <member name="T:iTween.EaseType">
            <summary>
            The type of easing to use based on Robert Penner's open source easing equations (http://www.robertpenner.com/easing_terms_of_use.html).
            </summary>
        </member>
        <member name="T:iTween.LoopType">
            <summary>
            The type of loop (if any) to use.  
            </summary>
        </member>
        <member name="F:iTween.LoopType.none">
            <summary>
            Do not loop.
            </summary>
        </member>
        <member name="F:iTween.LoopType.loop">
            <summary>
            Rewind and replay.
            </summary>
        </member>
        <member name="F:iTween.LoopType.pingPong">
            <summary>
            Ping pong the animation back and forth.
            </summary>
        </member>
        <member name="T:iTween.NamedValueColor">
            <summary>
            Many shaders use more than one color. Use can have iTween's Color methods operate on them by name.   
            </summary>
        </member>
        <member name="F:iTween.NamedValueColor._Color">
            <summary>
            The main color of a material. Used by default and not required for Color methods to work in iTween.
            </summary>
        </member>
        <member name="F:iTween.NamedValueColor._SpecColor">
            <summary>
            The specular color of a material (used in specular/glossy/vertexlit shaders).
            </summary>
        </member>
        <member name="F:iTween.NamedValueColor._Emission">
            <summary>
            The emissive color of a material (used in vertexlit shaders).
            </summary>
        </member>
        <member name="F:iTween.NamedValueColor._ReflectColor">
            <summary>
            The reflection color of the material (used in reflective shaders).
            </summary>
        </member>
        <member name="T:iTween.Defaults">
            <summary>
            A collection of baseline presets that iTween needs and utilizes if certain parameters are not provided. 
            </summary>
        </member>
        <member name="M:iTween.Init(UnityEngine.GameObject)">
            <summary>
            Sets up a GameObject to avoid hiccups when an initial iTween is added. It's advisable to run this on every object you intend to run iTween on in its Start or Awake.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target to be initialized for iTween.
            </param>
        </member>
        <member name="M:iTween.CameraFadeFrom(System.Single,System.Single)">
            <summary>
            Instantly changes the amount(transparency) of a camera fade and then returns it back over time with MINIMUM customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.CameraFadeFrom(System.Collections.Hashtable)">
            <summary>
            Instantly changes the amount(transparency) of a camera fade and then returns it back over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.CameraFadeTo(System.Single,System.Single)">
            <summary>
            Changes the amount(transparency) of a camera fade over time with MINIMUM customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.CameraFadeTo(System.Collections.Hashtable)">
            <summary>
            Changes the amount(transparency) of a camera fade over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ValueTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Returns a value to an 'oncallback' method interpolated between the supplied 'from' and 'to' values for application as desired.  Requires an 'onupdate' callback that accepts the same type as the supplied 'from' and 'to' properties.
            </summary>
            <param name="from">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> or <see cref="T:UnityEngine.Vector3"/> or <see cref="T:UnityEngine.Vector2"/> or <see cref="T:UnityEngine.Color"/> or <see cref="T:UnityEngine.Rect"/> for the starting value.
            </param> 
            <param name="to">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> or <see cref="T:UnityEngine.Vector3"/> or <see cref="T:UnityEngine.Vector2"/> or <see cref="T:UnityEngine.Color"/> or <see cref="T:UnityEngine.Rect"/> for the ending value.
            </param> 
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed (only works with Vector2, Vector3, and Floats)
            </param>	
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.FadeFrom(UnityEngine.GameObject,System.Single,System.Single)">
            <summary>
            Changes a GameObject's alpha value instantly then returns it to the provided alpha over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorFrom and using the "a" parameter. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="alpha">
            A <see cref="T:System.Single"/> for the final alpha value of the animation.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.FadeFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's alpha value instantly then returns it to the provided alpha over time with FULL customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorFrom and using the "a" parameter.
            </summary>
            <param name="alpha">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the initial alpha value of the animation.
            </param>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the initial alpha value of the animation.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.FadeTo(UnityEngine.GameObject,System.Single,System.Single)">
            <summary>
            Changes a GameObject's alpha value over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorTo and using the "a" parameter.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="alpha">
            A <see cref="T:System.Single"/> for the final alpha value of the animation.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.FadeTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's alpha value over time with FULL customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorTo and using the "a" parameter.
            </summary>
            <param name="alpha">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the final alpha value of the animation.
            </param>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the final alpha value of the animation.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ColorFrom(UnityEngine.GameObject,UnityEngine.Color,System.Single)">
            <summary>
            Changes a GameObject's color values instantly then returns them to the provided properties over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ColorFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's color values instantly then returns them to the provided properties over time with FULL customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation.
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="r">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color red.
            </param>
            <param name="g">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="b">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="a">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the alpha.
            </param> 
            <param name="namedcolorvalue">
            A <see cref="!:NamedColorValue"/> or <see cref="T:System.String"/> for the individual setting of the alpha.
            </param> 
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ColorTo(UnityEngine.GameObject,UnityEngine.Color,System.Single)">
            <summary>
            Changes a GameObject's color values over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, they will become the target of the animation.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ColorTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's color values over time with FULL customization options.  If a GUIText or GUITexture component is attached, they will become the target of the animation.
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="r">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color red.
            </param>
            <param name="g">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="b">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="a">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the alpha.
            </param> 
            <param name="namedcolorvalue">
            A <see cref="!:NamedColorValue"/> or <see cref="T:System.String"/> for the individual setting of the alpha.
            </param> 
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.AudioFrom(UnityEngine.GameObject,System.Single,System.Single,System.Single)">
            <summary>
            Instantly changes an AudioSource's volume and pitch then returns it to it's starting volume and pitch over time with MINIMUM customization options. Default AudioSource attached to GameObject will be used (if one exists) if not supplied.
            </summary>
            <param name="target"> 
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation which holds the AudioSource to be changed.
            </param>
            <param name="volume"> for the target level of volume.
            A <see cref="T:System.Single"/>
            </param>
            <param name="pitch"> for the target pitch.
            A <see cref="T:System.Single"/>
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.AudioFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes an AudioSource's volume and pitch then returns it to it's starting volume and pitch over time with FULL customization options. Default AudioSource attached to GameObject will be used (if one exists) if not supplied. 
            </summary>
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource"/> for which AudioSource to use.
            </param> 
            <param name="volume">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.AudioTo(UnityEngine.GameObject,System.Single,System.Single,System.Single)">
            <summary>
            Fades volume and pitch of an AudioSource with MINIMUM customization options.  Default AudioSource attached to GameObject will be used (if one exists) if not supplied. 
            </summary>
            <param name="target"> 
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation which holds the AudioSource to be changed.
            </param>
            <param name="volume"> for the target level of volume.
            A <see cref="T:System.Single"/>
            </param>
            <param name="pitch"> for the target pitch.
            A <see cref="T:System.Single"/>
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.AudioTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Fades volume and pitch of an AudioSource with FULL customization options.  Default AudioSource attached to GameObject will be used (if one exists) if not supplied. 
            </summary>
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource"/> for which AudioSource to use.
            </param> 
            <param name="volume">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.Stab(UnityEngine.GameObject,UnityEngine.AudioClip,System.Single)">
            <summary>
            Plays an AudioClip once based on supplied volume and pitch and following any delay with MINIMUM customization options. AudioSource is optional as iTween will provide one.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation which holds the AudioSource to be utilized.
            </param>
            <param name="audioclip">
            A <see cref="T:UnityEngine.AudioClip"/> for a reference to the AudioClip to be played.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> for the time in seconds the action will wait before beginning.
            </param>
        </member>
        <member name="M:iTween.Stab(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Plays an AudioClip once based on supplied volume and pitch and following any delay with FULL customization options. AudioSource is optional as iTween will provide one.
            </summary>
            <param name="audioclip">
            A <see cref="T:UnityEngine.AudioClip"/> for a reference to the AudioClip to be played.
            </param> 
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource"/> for which AudioSource to use
            </param> 
            <param name="volume">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target pitch.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the action will wait before beginning.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.LookFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly rotates a GameObject to look at the supplied Vector3 then returns it to it's starting rotation over time with MINIMUM customization options. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> to be the Vector3 that the target will look towards.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.LookFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly rotates a GameObject to look at a supplied Transform or Vector3 then returns it to it's starting rotation over time with FULL customization options. 
            </summary>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a target the GameObject will look at.
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.LookTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Rotates a GameObject to look at the supplied Vector3 over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> to be the Vector3 that the target will look towards.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.LookTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Rotates a GameObject to look at a supplied Transform or Vector3 over time with FULL customization options.
            </summary>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a target the GameObject will look at.
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.MoveTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Changes a GameObject's position over time to a supplied destination with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="position">
            A <see cref="T:UnityEngine.Vector3"/> for the destination Vector3.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.MoveTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's position over time to a supplied destination with FULL customization options.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a point in space the GameObject will animate to.
            </param>
            <param name="path">
            A <see cref="!:Transform[]"/> or <see cref="!:Vector3[]"/> for a list of points to draw a Catmull-Rom through for a curved animation path.
            </param>
            <param name="movetopath">
            A <see cref="T:System.Boolean"/> for whether to automatically generate a curve from the GameObject's current position to the beginning of the path. True by default.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="lookahead">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how much of a percentage to look ahead on a path to influence how strict "orientopath" is.
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.MoveFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly changes a GameObject's position to a supplied destination then returns it to it's starting position over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="position">
            A <see cref="T:UnityEngine.Vector3"/> for the destination Vector3.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.MoveFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes a GameObject's position to a supplied destination then returns it to it's starting position over time with FULL customization options.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a point in space the GameObject will animate to.
            </param>
            <param name="path">
            A <see cref="!:Transform[]"/> or <see cref="!:Vector3[]"/> for a list of points to draw a Catmull-Rom through for a curved animation path.
            </param>
            <param name="movetopath">
            A <see cref="T:System.Boolean"/> for whether to automatically generate a curve from the GameObject's current position to the beginning of the path. True by default.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="lookahead">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how much of a percentage to look ahead on a path to influence how strict "orientopath" is.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.MoveAdd(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Translates a GameObject's position over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of change in position to move the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.MoveAdd(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Translates a GameObject's position over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of change in position to move the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> or <see cref="T:System.String"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.MoveBy(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Adds the supplied coordinates to a GameObject's postion with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of change in position to move the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.MoveBy(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Adds the supplied coordinates to a GameObject's position with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of change in position to move the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> or <see cref="T:System.String"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ScaleTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Changes a GameObject's scale over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="scale">
            A <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ScaleTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="scale">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ScaleFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly changes a GameObject's scale then returns it to it's starting scale over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="scale">
            A <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ScaleFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes a GameObject's scale then returns it to it's starting scale over time with FULL customization options.
            </summary>
            <param name="scale">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ScaleAdd(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Adds to a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of scale to be added to the GameObject's current scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ScaleAdd(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Adds to a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount to be added to the GameObject's current scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ScaleBy(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Multiplies a GameObject's scale over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of scale to be multiplied by the GameObject's current scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ScaleBy(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Multiplies a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount to be multiplied to the GameObject's current scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.RotateTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Rotates a GameObject to the supplied Euler angles in degrees over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="rotation">
            A <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.RotateTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Rotates a GameObject to the supplied Euler angles in degrees over time with FULL customization options.
            </summary>
            <param name="rotation">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.RotateFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly changes a GameObject's Euler angles in degrees then returns it to it's starting rotation over time (if allowed) with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="rotation">
            A <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate from.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.RotateFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes a GameObject's Euler angles in degrees then returns it to it's starting rotation over time (if allowed) with FULL customization options.
            </summary>
            <param name="rotation">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.RotateAdd(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Adds supplied Euler angles in degrees to a GameObject's rotation over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of Euler angles in degrees to add to the current rotation of the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.RotateAdd(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Adds supplied Euler angles in degrees to a GameObject's rotation over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of Euler angles in degrees to add to the current rotation of the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> or <see cref="T:System.String"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.RotateBy(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Multiplies supplied values by 360 and rotates a GameObject by calculated amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount to be multiplied by 360 to rotate the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.RotateBy(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Multiplies supplied values by 360 and rotates a GameObject by calculated amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount to be multiplied by 360 to rotate the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> or <see cref="T:System.String"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ShakePosition(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Randomly shakes a GameObject's position by a diminishing amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ShakePosition(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Randomly shakes a GameObject's position by a diminishing amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param> 
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>  
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with shakes)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ShakeScale(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Randomly shakes a GameObject's scale by a diminishing amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ShakeScale(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Randomly shakes a GameObject's scale by a diminishing amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with shakes)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ShakeRotation(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Randomly shakes a GameObject's rotation by a diminishing amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ShakeRotation(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Randomly shakes a GameObject's rotation by a diminishing amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param> 
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with shakes)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.PunchPosition(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a jolt of force to a GameObject's position and wobbles it back to its initial position with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of the punch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.PunchPosition(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Applies a jolt of force to a GameObject's position and wobbles it back to its initial position with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param> 
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget".
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with punches)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.PunchRotation(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a jolt of force to a GameObject's rotation and wobbles it back to its initial rotation with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of the punch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.PunchRotation(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Applies a jolt of force to a GameObject's rotation and wobbles it back to its initial rotation with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param> 
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param> 
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with punches)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.PunchScale(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a jolt of force to a GameObject's scale and wobbles it back to its initial scale with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of the punch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.PunchScale(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Applies a jolt of force to a GameObject's scale and wobbles it back to its initial scale with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param> 
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with punches)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTween.RectUpdate(UnityEngine.Rect,UnityEngine.Rect,System.Single)" -->
        <member name="M:iTween.Vector3Update(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Returns a Vector3 that is eased between a current and target value by the supplied speed.
            </summary>
            <returns>
            A <see cref="T:UnityEngine.Vector3"/>
            </returns>
            <param name='currentValue'>
            A <see cref="T:UnityEngine.Vector3"/> the starting or initial value
            </param>
            <param name='targetValue'>
            A <see cref="T:UnityEngine.Vector3"/> the target value that the current value will be eased to.
            </param>
            <param name='speed'>
            A <see cref="T:System.Single"/> to be used as rate of speed (larger number equals faster animation)
            </param>
        </member>
        <member name="M:iTween.Vector2Update(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns a Vector2 that is eased between a current and target value by the supplied speed.
            </summary>
            <returns>
            A <see cref="T:UnityEngine.Vector2"/>
            </returns>
            <param name='currentValue'>
            A <see cref="T:UnityEngine.Vector2"/> the starting or initial value
            </param>
            <param name='targetValue'>
            A <see cref="T:UnityEngine.Vector2"/> the target value that the current value will be eased to.
            </param>
            <param name='speed'>
            A <see cref="T:System.Single"/> to be used as rate of speed (larger number equals faster animation)
            </param>
        </member>
        <member name="M:iTween.FloatUpdate(System.Single,System.Single,System.Single)">
            <summary>
            Returns a float that is eased between a current and target value by the supplied speed.
            </summary>
            <returns>
            A <see cref="T:System.Single"/>
            </returns>
            <param name='currentValue'>
            A <see cref="T:System.Single"/> the starting or initial value
            </param>
            <param name='targetValue'>
            A <see cref="T:System.Single"/> the target value that the current value will be eased to.
            </param>
            <param name='speed'>
            A <see cref="T:System.Single"/> to be used as rate of speed (larger number equals faster animation)
            </param>
        </member>
        <member name="M:iTween.FadeUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to FadeTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="alpha">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the final alpha value of the animation.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.FadeUpdate(UnityEngine.GameObject,System.Single,System.Single)">
            <summary>
            Similar to FadeTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="alpha">
            A <see cref="T:System.Single"/> for the final alpha value of the animation.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ColorUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to ColorTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="r">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color red.
            </param>
            <param name="g">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="b">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="a">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the alpha.
            </param> 
            <param name="namedcolorvalue">
            A <see cref="!:NamedColorValue"/> or <see cref="T:System.String"/> for the individual setting of the alpha.
            </param> 
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ColorUpdate(UnityEngine.GameObject,UnityEngine.Color,System.Single)">
            <summary>
            Similar to ColorTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.AudioUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to AudioTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource"/> for which AudioSource to use.
            </param> 
            <param name="volume">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.AudioUpdate(UnityEngine.GameObject,System.Single,System.Single,System.Single)">
            <summary>
            Similar to AudioTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="volume">
            A <see cref="T:System.Single"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.RotateUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to RotateTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="rotation">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param> 
        </member>
        <member name="M:iTween.RotateUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to RotateTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="rotation">
            A <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ScaleUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to ScaleTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options.  Does not utilize an EaseType. 
            </summary>
            <param name="scale">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param> 
        </member>
        <member name="M:iTween.ScaleUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to ScaleTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options.  Does not utilize an EaseType.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="scale">
            A <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.MoveUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to MoveTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a point in space the GameObject will animate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param> 
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False be default.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
        </member>
        <member name="M:iTween.MoveUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to MoveTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="position">
            A <see cref="T:UnityEngine.Vector3"/> for a point in space the GameObject will animate to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.LookUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to LookTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a target the GameObject will look at.
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param> 
        </member>
        <member name="M:iTween.LookUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to LookTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> for a target the GameObject will look at.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.PathLength(UnityEngine.Transform[])">
            <summary>
            Returns the length of a curved path drawn through the provided array of Transforms.
            </summary>
            <returns>
            A <see cref="T:System.Single"/>
            </returns>
            <param name='path'>
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.PathLength(UnityEngine.Vector3[])">
            <summary>
            Returns the length of a curved path drawn through the provided array of Vector3s.
            </summary>
            <returns>
            The length.
            </returns>
            <param name='path'>
            A <see cref="!:Vector3[]"/>
            </param>
        </member>
        <member name="M:iTween.CameraTexture(UnityEngine.Color)">
            <summary>
            Creates and returns a full-screen Texture2D for use with CameraFade.
            </summary>
            <returns>
            Texture2D
            </returns>
            <param name='color'>
            Color
            </param>
        </member>
        <member name="M:iTween.PutOnPath(UnityEngine.GameObject,UnityEngine.Vector3[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/>
            </param>
            <param name="path">
            A <see cref="!:Vector3[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:iTween.PutOnPath(UnityEngine.Transform,UnityEngine.Vector3[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.Transform"/>
            </param>
            <param name="path">
            A <see cref="!:Vector3[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:iTween.PutOnPath(UnityEngine.GameObject,UnityEngine.Transform[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/>
            </param>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:iTween.PutOnPath(UnityEngine.Transform,UnityEngine.Transform[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.Transform"/>
            </param>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:iTween.PointOnPath(UnityEngine.Transform[],System.Single)">
            <summary>
            Returns a Vector3 position on a path at the provided percentage  
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
            <returns>
            A <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:iTween.DrawLine(UnityEngine.Vector3[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Vector3s.
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawLine(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Vector3s.
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawLine(UnityEngine.Transform[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Transforms.
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawLine(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Transforms.
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawLineGizmos(UnityEngine.Vector3[])">
            <summary>
            Draws a line through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawLineGizmos(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawLineGizmos(UnityEngine.Transform[])">
            <summary>
            Draws a line through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawLineGizmos(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawLineHandles(UnityEngine.Vector3[])">
            <summary>
            Draws a line through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawLineHandles(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawLineHandles(UnityEngine.Transform[])">
            <summary>
            Draws a line through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawLineHandles(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.PointOnPath(UnityEngine.Vector3[],System.Single)">
            <summary>
            Returns a Vector3 position on a path at the provided percentage  
            </summary>
            <param name="path">
            A <see cref="!:Vector3[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
            <returns>
            A <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:iTween.DrawPath(UnityEngine.Vector3[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Vector3s.
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawPath(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Vector3s.
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawPath(UnityEngine.Transform[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Transforms.
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawPath(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Transforms.
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawPathGizmos(UnityEngine.Vector3[])">
            <summary>
            Draws a curved path through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawPathGizmos(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawPathGizmos(UnityEngine.Transform[])">
            <summary>
            Draws a curved path through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawPathGizmos(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawPathHandles(UnityEngine.Vector3[])">
            <summary>
            Draws a curved path through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawPathHandles(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawPathHandles(UnityEngine.Transform[])">
            <summary>
            Draws a curved path through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawPathHandles(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.CameraFadeDepth(System.Int32)">
            <summary>
            Changes a camera fade's texture.
            </summary>
            <param name="depth">
            A <see cref="T:System.Int32"/>
            </param>
        </member>
        <member name="M:iTween.CameraFadeDestroy">
            <summary>
            Removes and destroyes a camera fade.
            </summary>
        </member>
        <member name="M:iTween.CameraFadeSwap(UnityEngine.Texture2D)">
            <summary>
            Changes a camera fade's texture.
            </summary>
            <param name='texture'>
            A <see cref="T:UnityEngine.Texture2D"/>
            </param>
        </member>
        <member name="M:iTween.CameraFadeAdd(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Creates a GameObject (if it doesn't exist) at the supplied depth that can be used to simulate a camera fade.
            </summary>
            <param name='texture'>
            A <see cref="T:UnityEngine.Texture2D"/>
            </param>
            <param name='depth'>
            A <see cref="T:System.Int32"/>
            </param>
            <returns>
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the CameraFade.
            </returns>
        </member>
        <member name="M:iTween.CameraFadeAdd(UnityEngine.Texture2D)">
            <summary>
            Creates a GameObject (if it doesn't exist) at the default depth that can be used to simulate a camera fade.
            </summary>
            <param name='texture'>
            A <see cref="T:UnityEngine.Texture2D"/>
            </param>
            <returns>
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the CameraFade.
            </returns>
        </member>
        <member name="M:iTween.CameraFadeAdd">
            <summary>
            Creates a GameObject (if it doesn't exist) at the default depth filled with black that can be used to simulate a camera fade.
            </summary>
            <returns>
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the CameraFade.
            </returns>
        </member>
        <member name="M:iTween.Resume(UnityEngine.GameObject)">
            <summary>
            Resume all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:iTween.Resume(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Resume all iTweens on a GameObject including its children.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTween.Resume(UnityEngine.GameObject,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iTween.Resume(UnityEngine.GameObject,System.String,System.Boolean)" -->
        <member name="M:iTween.Resume">
            <summary>
            Resume all iTweens in scene.
            </summary>
        </member>
        <member name="M:iTween.Resume(System.String)">
            <summary>
            Resume all iTweens in scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to resume.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param> 
        </member>
        <member name="M:iTween.Pause(UnityEngine.GameObject)">
            <summary>
            Pause all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:iTween.Pause(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Pause all iTweens on a GameObject including its children.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTween.Pause(UnityEngine.GameObject,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iTween.Pause(UnityEngine.GameObject,System.String,System.Boolean)" -->
        <member name="M:iTween.Pause">
            <summary>
            Pause all iTweens in scene.
            </summary>
        </member>
        <member name="M:iTween.Pause(System.String)">
            <summary>
            Pause all iTweens in scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to pause.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param> 
        </member>
        <member name="M:iTween.Count">
            <summary>
            Count all iTweens in current scene.
            </summary>
        </member>
        <member name="M:iTween.Count(System.String)">
            <summary>
            Count all iTweens in current scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to stop.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param> 
        </member>
        <member name="M:iTween.Count(UnityEngine.GameObject)">
            <summary>
            Count all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:iTween.Count(UnityEngine.GameObject,System.String)">
            <summary>
            Count all iTweens on a GameObject of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to count.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param>  
        </member>
        <member name="M:iTween.Stop">
            <summary>
            Stop and destroy all Tweens in current scene.
            </summary>
        </member>
        <member name="M:iTween.Stop(System.String)">
            <summary>
            Stop and destroy all iTweens in current scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to stop.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param> 
        </member>
        <member name="M:iTween.StopByName(System.String)">
            <summary>
            Stop and destroy all iTweens in current scene of a particular name.
            </summary>
            <param name="name">
            The <see cref="T:System.String"/> name of iTween you would like to stop.
            </param> 
        </member>
        <member name="M:iTween.Stop(UnityEngine.GameObject)">
            <summary>
            Stop and destroy all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:iTween.Stop(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Stop and destroy all iTweens on a GameObject including its children.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTween.Stop(UnityEngine.GameObject,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iTween.StopByName(UnityEngine.GameObject,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iTween.Stop(UnityEngine.GameObject,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iTween.StopByName(UnityEngine.GameObject,System.String,System.Boolean)" -->
        <member name="M:iTween.Hash(System.Object[])">
            <summary>
            Universal interface to help in the creation of Hashtables.  Especially useful for C# users.
            </summary>
            <param name="args">
            A <see cref="!:System.Object[]"/> of alternating name value pairs.  For example "time",1,"delay",2...
            </param>
            <returns>
            A <see cref="T:System.Collections.Hashtable"/>
            </returns>
        </member>
        <member name="T:HutongGames.PlayMaker.Actions.AnimateFsmAction">
            <summary>
            Base action for AnimateXXX actions
            </summary>
        </member>
        <member name="F:HutongGames.PlayMaker.Actions.FsmStateActionAnimatorBase.IklayerIndex">
            <summary>
            The layerIndex index passed when processing action during OnAnimatorIK
            </summary>
        </member>
        <member name="M:HutongGames.PlayMaker.Actions.FsmStateActionAnimatorBase.OnActionUpdate">
            <summary>
            Raises the action update event. Could be fired during onUpdate or OnAnimatorMove based on the action setup.
            </summary>
        </member>
        <member name="M:HutongGames.PlayMaker.Actions.ArrayForEach.Awake">
            <summary>
            Initialize FSM on awake so it doesn't cause hitches later
            </summary>
        </member>
        <member name="F:HutongGames.PlayMaker.Actions.ComponentAction`1.cachedGameObject">
            <summary>
            The cached GameObject. Call UpdateCache() first
            </summary>
        </member>
        <member name="F:HutongGames.PlayMaker.Actions.ComponentAction`1.cachedComponent">
            <summary>
            The cached component. Call UpdateCache() first
            </summary>
        </member>
        <member name="M:HutongGames.PlayMaker.Actions.Assert.PlayMaker#ConditionalExpression#IEvaluatorContext#GetVariable(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:HutongGames.PlayMaker.Actions.MouseLook">
            <summary>
            Action version of Unity's builtin MouseLook behaviour.
            TODO: Expose invert Y option.
            </summary>
        </member>
        <member name="T:HutongGames.PlayMaker.Actions.MouseLook2">
            <summary>
            Action version of Unity's builtin MouseLook behaviour.
            TODO: Expose invert Y option.
            </summary>
        </member>
        <member name="T:HutongGames.PlayMaker.Actions.BaseFsmVariableAction">
            <summary>
            Base class for Get/Set FSM Variable actions
            </summary>
        </member>
        <member name="T:HutongGames.PlayMaker.Actions.BaseFsmVariableIndexAction">
            <summary>
            Base class for Get/Set FSM Variable actions
            </summary>
        </member>
        <member name="M:HutongGames.PlayMaker.Actions.ForwardAllEvents.Event(HutongGames.PlayMaker.FsmEvent)">
            <summary>
            Return true to eat the event
            </summary>
        </member>
        <member name="M:HutongGames.PlayMaker.Actions.ForwardEvent.Event(HutongGames.PlayMaker.FsmEvent)">
            <summary>
            Return true to eat the event
            </summary>
        </member>
        <member name="M:HutongGames.PlayMaker.Actions.RunFSM.Awake">
            <summary>
            Initialize FSM on awake so it doesn't cause hitches later
            </summary>
        </member>
        <member name="M:HutongGames.PlayMaker.Actions.RunFSM.OnEnter">
            <summary>
            Start the FSM on entering the state
            </summary>
        </member>
        <member name="M:HutongGames.PlayMaker.Actions.RunFSMAction.Event(HutongGames.PlayMaker.FsmEvent)">
            <summary>
            Forward global events to the sub FSM
            </summary>
        </member>
        <member name="M:HutongGames.PlayMaker.Actions.RunFSMAction.OnEnter">
            <summary>
            Start the FSM on entering the state
            </summary>
        </member>
        <member name="M:HutongGames.PlayMaker.Actions.RunFSMAction.OnExit">
            <summary>
            Stop the FSM on exiting the state
            </summary>
        </member>
        <member name="T:HutongGames.PlayMaker.UpdateHelper">
            <summary>
            Playmaker runtime code can't call unity editor code
            This class is a workaround, allowing runtime code to call EditorUtility.SetDirty
            </summary>
        </member>
    </members>
</doc>
